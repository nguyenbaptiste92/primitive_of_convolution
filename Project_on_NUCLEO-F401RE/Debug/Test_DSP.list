
Test_DSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003660  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b84  08003800  08003800  00013800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004384  08004384  00024070  2**0
                  CONTENTS
  4 .ARM          00000008  08004384  08004384  00014384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800438c  0800438c  00024070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800438c  0800438c  0001438c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004390  08004390  00014390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00004070  20000000  08004394  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000814c  20004070  08008404  00024070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000c1bc  08008404  0002c1bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00024070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f130  00000000  00000000  000240a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e94  00000000  00000000  000431d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000efdf  00000000  00000000  00047064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e50  00000000  00000000  00056048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001408  00000000  00000000  00056e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019b91  00000000  00000000  000582a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019832  00000000  00000000  00071e31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000926b2  00000000  00000000  0008b663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011dd15  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003290  00000000  00000000  0011dd68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20004070 	.word	0x20004070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080037e8 	.word	0x080037e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20004074 	.word	0x20004074
 80001dc:	080037e8 	.word	0x080037e8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b510      	push	{r4, lr}
 8000586:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000588:	2214      	movs	r2, #20
 800058a:	2100      	movs	r1, #0
 800058c:	a809      	add	r0, sp, #36	; 0x24
 800058e:	f002 f8c1 	bl	8002714 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000592:	2214      	movs	r2, #20
 8000594:	2100      	movs	r1, #0
 8000596:	a803      	add	r0, sp, #12
 8000598:	f002 f8bc 	bl	8002714 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800059c:	4b1e      	ldr	r3, [pc, #120]	; (8000618 <SystemClock_Config+0x94>)
 800059e:	2200      	movs	r2, #0
 80005a0:	9201      	str	r2, [sp, #4]
 80005a2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80005a4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80005a8:	6419      	str	r1, [r3, #64]	; 0x40
 80005aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005ac:	491b      	ldr	r1, [pc, #108]	; (800061c <SystemClock_Config+0x98>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005b6:	9202      	str	r2, [sp, #8]
 80005b8:	680b      	ldr	r3, [r1, #0]
 80005ba:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005c2:	600b      	str	r3, [r1, #0]
 80005c4:	680b      	ldr	r3, [r1, #0]
 80005c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ca:	9302      	str	r3, [sp, #8]
 80005cc:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ce:	2101      	movs	r1, #1
 80005d0:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d2:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d4:	e9cd 130b 	strd	r1, r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005d8:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005da:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005dc:	e9cd 3411 	strd	r3, r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005e2:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e4:	e9cd 420e 	strd	r4, r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e8:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ea:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ec:	f000 fbc6 	bl	8000d7c <HAL_RCC_OscConfig>
 80005f0:	b108      	cbz	r0, 80005f6 <SystemClock_Config+0x72>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f2:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <SystemClock_Config+0x70>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f6:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f8:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000600:	e9cd 3006 	strd	r3, r0, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000604:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000606:	4621      	mov	r1, r4
 8000608:	a803      	add	r0, sp, #12
 800060a:	f000 fd95 	bl	8001138 <HAL_RCC_ClockConfig>
 800060e:	b108      	cbz	r0, 8000614 <SystemClock_Config+0x90>
 8000610:	b672      	cpsid	i
  while (1)
 8000612:	e7fe      	b.n	8000612 <SystemClock_Config+0x8e>
}
 8000614:	b014      	add	sp, #80	; 0x50
 8000616:	bd10      	pop	{r4, pc}
 8000618:	40023800 	.word	0x40023800
 800061c:	40007000 	.word	0x40007000

08000620 <main>:
{
 8000620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000624:	b09d      	sub	sp, #116	; 0x74
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	ae17      	add	r6, sp, #92	; 0x5c
  HAL_Init();
 8000628:	f000 fa2a 	bl	8000a80 <HAL_Init>
  SystemClock_Config();
 800062c:	f7ff ffaa 	bl	8000584 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000630:	2214      	movs	r2, #20
 8000632:	2100      	movs	r1, #0
 8000634:	4630      	mov	r0, r6
 8000636:	f002 f86d 	bl	8002714 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063a:	2400      	movs	r4, #0
 800063c:	4b6d      	ldr	r3, [pc, #436]	; (80007f4 <main+0x1d4>)
 800063e:	940b      	str	r4, [sp, #44]	; 0x2c
 8000640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000642:	486d      	ldr	r0, [pc, #436]	; (80007f8 <main+0x1d8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000644:	f042 0204 	orr.w	r2, r2, #4
 8000648:	631a      	str	r2, [r3, #48]	; 0x30
 800064a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800064c:	f002 0204 	and.w	r2, r2, #4
 8000650:	920b      	str	r2, [sp, #44]	; 0x2c
 8000652:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000654:	940c      	str	r4, [sp, #48]	; 0x30
 8000656:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000658:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800065c:	631a      	str	r2, [r3, #48]	; 0x30
 800065e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000660:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000664:	920c      	str	r2, [sp, #48]	; 0x30
 8000666:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000668:	940d      	str	r4, [sp, #52]	; 0x34
 800066a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800066c:	f042 0201 	orr.w	r2, r2, #1
 8000670:	631a      	str	r2, [r3, #48]	; 0x30
 8000672:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000674:	f002 0201 	and.w	r2, r2, #1
 8000678:	920d      	str	r2, [sp, #52]	; 0x34
 800067a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067c:	940e      	str	r4, [sp, #56]	; 0x38
 800067e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000680:	f042 0202 	orr.w	r2, r2, #2
 8000684:	631a      	str	r2, [r3, #48]	; 0x30
 8000686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000688:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800068c:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068e:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000690:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000692:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000694:	f000 fb5c 	bl	8000d50 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000698:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800069c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006a0:	e9cd 1317 	strd	r1, r3, [sp, #92]	; 0x5c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006a4:	4855      	ldr	r0, [pc, #340]	; (80007fc <main+0x1dc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	9419      	str	r4, [sp, #100]	; 0x64
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006a8:	4631      	mov	r1, r6
 80006aa:	f000 fa89 	bl	8000bc0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ae:	2720      	movs	r7, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006b0:	4851      	ldr	r0, [pc, #324]	; (80007f8 <main+0x1d8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b2:	2501      	movs	r5, #1
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006b4:	4631      	mov	r1, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b6:	e9cd 7517 	strd	r7, r5, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ba:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006be:	f000 fa7f 	bl	8000bc0 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 80006c2:	484f      	ldr	r0, [pc, #316]	; (8000800 <main+0x1e0>)
  huart2.Init.BaudRate = 115200;
 80006c4:	f8df c15c 	ldr.w	ip, [pc, #348]	; 8000824 <main+0x204>
  huart2.Init.Parity = UART_PARITY_NONE;
 80006c8:	6104      	str	r4, [r0, #16]
  huart2.Init.BaudRate = 115200;
 80006ca:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80006ce:	e9c0 c300 	strd	ip, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d2:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d4:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d8:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006dc:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006de:	f000 ff99 	bl	8001614 <HAL_UART_Init>
 80006e2:	b108      	cbz	r0, 80006e8 <main+0xc8>
 80006e4:	b672      	cpsid	i
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <main+0xc6>
  htim10.Instance = TIM10;
 80006e8:	4c46      	ldr	r4, [pc, #280]	; (8000804 <main+0x1e4>)
  htim10.Init.Prescaler = 8400-1;
 80006ea:	4a47      	ldr	r2, [pc, #284]	; (8000808 <main+0x1e8>)
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ec:	60a0      	str	r0, [r4, #8]
  htim10.Init.Prescaler = 8400-1;
 80006ee:	f242 03cf 	movw	r3, #8399	; 0x20cf
 80006f2:	e9c4 2300 	strd	r2, r3, [r4]
  htim10.Init.Period = 2000-1;
 80006f6:	f240 73cf 	movw	r3, #1999	; 0x7cf
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006fa:	e9c4 3003 	strd	r3, r0, [r4, #12]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006fe:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000700:	4620      	mov	r0, r4
 8000702:	f000 fefb 	bl	80014fc <HAL_TIM_Base_Init>
 8000706:	b108      	cbz	r0, 800070c <main+0xec>
 8000708:	b672      	cpsid	i
  while (1)
 800070a:	e7fe      	b.n	800070a <main+0xea>
static nnom_model_t* nnom_model_create(void)
{
	static nnom_model_t model;
	nnom_layer_t* layer[3];

	new_model(&model);
 800070c:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8000820 <main+0x200>
  HAL_TIM_Base_Start_IT(&htim10);
 8000710:	4620      	mov	r0, r4
 8000712:	f000 fdcd 	bl	80012b0 <HAL_TIM_Base_Start_IT>
 8000716:	4640      	mov	r0, r8
 8000718:	f001 f9ca 	bl	8001ab0 <new_model>

	layer[0] = Input(shape(32, 32, 16), nnom_input_data);
 800071c:	2310      	movs	r3, #16
 800071e:	4630      	mov	r0, r6
 8000720:	463a      	mov	r2, r7
 8000722:	4639      	mov	r1, r7
 8000724:	f001 fce7 	bl	80020f6 <shape>
 8000728:	e896 0003 	ldmia.w	r6, {r0, r1}
 800072c:	4a37      	ldr	r2, [pc, #220]	; (800080c <main+0x1ec>)
 800072e:	f001 ff37 	bl	80025a0 <Input>
	layer[1] = model.hook(GroupConv2D(16, 2, kernel(3, 3), stride(1, 1), dilation(1, 1), PADDING_SAME, &group_conv2d_w, &group_conv2d_b), layer[0]);
 8000732:	f10d 0954 	add.w	r9, sp, #84	; 0x54
 8000736:	2203      	movs	r2, #3
 8000738:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800073c:	9309      	str	r3, [sp, #36]	; 0x24
	layer[0] = Input(shape(32, 32, 16), nnom_input_data);
 800073e:	4606      	mov	r6, r0
	layer[1] = model.hook(GroupConv2D(16, 2, kernel(3, 3), stride(1, 1), dilation(1, 1), PADDING_SAME, &group_conv2d_w, &group_conv2d_b), layer[0]);
 8000740:	4611      	mov	r1, r2
 8000742:	4648      	mov	r0, r9
 8000744:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
 8000748:	f001 fcda 	bl	8002100 <kernel>
 800074c:	f10d 0b44 	add.w	fp, sp, #68	; 0x44
 8000750:	462a      	mov	r2, r5
 8000752:	4629      	mov	r1, r5
 8000754:	4650      	mov	r0, sl
 8000756:	f001 fcd8 	bl	800210a <stride>
 800075a:	462a      	mov	r2, r5
 800075c:	4629      	mov	r1, r5
 800075e:	4658      	mov	r0, fp
 8000760:	f001 fcd8 	bl	8002114 <dilation>
 8000764:	4b2a      	ldr	r3, [pc, #168]	; (8000810 <main+0x1f0>)
 8000766:	9306      	str	r3, [sp, #24]
 8000768:	4b2a      	ldr	r3, [pc, #168]	; (8000814 <main+0x1f4>)
 800076a:	e9cd 5304 	strd	r5, r3, [sp, #16]
 800076e:	e89b 0003 	ldmia.w	fp, {r0, r1}
 8000772:	9002      	str	r0, [sp, #8]
 8000774:	f8ad 100c 	strh.w	r1, [sp, #12]
 8000778:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800077c:	9000      	str	r0, [sp, #0]
 800077e:	f8ad 1004 	strh.w	r1, [sp, #4]
 8000782:	e899 000c 	ldmia.w	r9, {r2, r3}
 8000786:	2102      	movs	r1, #2
 8000788:	2010      	movs	r0, #16
 800078a:	f001 fe51 	bl	8002430 <GroupConv2D>
 800078e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000790:	4631      	mov	r1, r6
 8000792:	4798      	blx	r3
	layer[2] = model.hook(Output(shape(32, 32, 16), nnom_output_data), layer[1]);
 8000794:	f10d 093c 	add.w	r9, sp, #60	; 0x3c
 8000798:	2310      	movs	r3, #16
	layer[1] = model.hook(GroupConv2D(16, 2, kernel(3, 3), stride(1, 1), dilation(1, 1), PADDING_SAME, &group_conv2d_w, &group_conv2d_b), layer[0]);
 800079a:	4605      	mov	r5, r0
	layer[2] = model.hook(Output(shape(32, 32, 16), nnom_output_data), layer[1]);
 800079c:	463a      	mov	r2, r7
 800079e:	4639      	mov	r1, r7
 80007a0:	4648      	mov	r0, r9
 80007a2:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 80007a6:	f001 fca6 	bl	80020f6 <shape>
 80007aa:	4a1b      	ldr	r2, [pc, #108]	; (8000818 <main+0x1f8>)
 80007ac:	e899 0003 	ldmia.w	r9, {r0, r1}
 80007b0:	f001 ff5a 	bl	8002668 <Output>
 80007b4:	4629      	mov	r1, r5
 80007b6:	47d0      	blx	sl
	model_compile(&model, layer[0], layer[2]);
 80007b8:	4631      	mov	r1, r6
	layer[2] = model.hook(Output(shape(32, 32, 16), nnom_output_data), layer[1]);
 80007ba:	4602      	mov	r2, r0
	model_compile(&model, layer[0], layer[2]);
 80007bc:	4640      	mov	r0, r8
 80007be:	f001 fbb9 	bl	8001f34 <model_compile>
  for (idx = 0 ; idx < input_lenght ; idx++)
 80007c2:	4916      	ldr	r1, [pc, #88]	; (800081c <main+0x1fc>)
 80007c4:	4a11      	ldr	r2, [pc, #68]	; (800080c <main+0x1ec>)
 80007c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	  nnom_input_data[idx] = liste_image[0][idx];
 80007ca:	f811 0b01 	ldrb.w	r0, [r1], #1
 80007ce:	f802 0b01 	strb.w	r0, [r2], #1
  for (idx = 0 ; idx < input_lenght ; idx++)
 80007d2:	3b01      	subs	r3, #1
 80007d4:	d1f9      	bne.n	80007ca <main+0x1aa>
	  model_run(model);
 80007d6:	4e12      	ldr	r6, [pc, #72]	; (8000820 <main+0x200>)
	  __HAL_TIM_SET_COUNTER(&htim10,0);
 80007d8:	461d      	mov	r5, r3
	  model_run(model);
 80007da:	4630      	mov	r0, r6
 80007dc:	f001 fc88 	bl	80020f0 <model_run>
	  HAL_SuspendTick();
 80007e0:	f000 f97a 	bl	8000ad8 <HAL_SuspendTick>
	  __HAL_TIM_SET_COUNTER(&htim10,0);
 80007e4:	6823      	ldr	r3, [r4, #0]
	  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80007e6:	2101      	movs	r1, #1
	  __HAL_TIM_SET_COUNTER(&htim10,0);
 80007e8:	625d      	str	r5, [r3, #36]	; 0x24
	  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80007ea:	2000      	movs	r0, #0
 80007ec:	f000 fab6 	bl	8000d5c <HAL_PWR_EnterSLEEPMode>
  while (1)
 80007f0:	e7f3      	b.n	80007da <main+0x1ba>
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40020000 	.word	0x40020000
 80007fc:	40020800 	.word	0x40020800
 8000800:	200040d4 	.word	0x200040d4
 8000804:	2000408c 	.word	0x2000408c
 8000808:	40014400 	.word	0x40014400
 800080c:	200041a0 	.word	0x200041a0
 8000810:	08003800 	.word	0x08003800
 8000814:	08003818 	.word	0x08003818
 8000818:	200081a0 	.word	0x200081a0
 800081c:	20000000 	.word	0x20000000
 8000820:	20004118 	.word	0x20004118
 8000824:	40004400 	.word	0x40004400

08000828 <HAL_TIM_PeriodElapsedCallback>:
  if (htim == &htim10 )
 8000828:	4b02      	ldr	r3, [pc, #8]	; (8000834 <HAL_TIM_PeriodElapsedCallback+0xc>)
 800082a:	4283      	cmp	r3, r0
 800082c:	d101      	bne.n	8000832 <HAL_TIM_PeriodElapsedCallback+0xa>
	  HAL_ResumeTick();
 800082e:	f000 b95a 	b.w	8000ae6 <HAL_ResumeTick>
}
 8000832:	4770      	bx	lr
 8000834:	2000408c 	.word	0x2000408c

08000838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000838:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083a:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <HAL_MspInit+0x38>)
 800083c:	2100      	movs	r1, #0
 800083e:	9100      	str	r1, [sp, #0]
 8000840:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000842:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000846:	645a      	str	r2, [r3, #68]	; 0x44
 8000848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800084a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800084e:	9200      	str	r2, [sp, #0]
 8000850:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000852:	9101      	str	r1, [sp, #4]
 8000854:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000856:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800085a:	641a      	str	r2, [r3, #64]	; 0x40
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000862:	9301      	str	r3, [sp, #4]
 8000864:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000866:	2007      	movs	r0, #7
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000868:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800086a:	f000 b943 	b.w	8000af4 <HAL_NVIC_SetPriorityGrouping>
 800086e:	bf00      	nop
 8000870:	40023800 	.word	0x40023800

08000874 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000874:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM10)
 8000876:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <HAL_TIM_Base_MspInit+0x40>)
 8000878:	6802      	ldr	r2, [r0, #0]
 800087a:	429a      	cmp	r2, r3
 800087c:	d116      	bne.n	80008ac <HAL_TIM_Base_MspInit+0x38>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800087e:	2200      	movs	r2, #0
 8000880:	f503 4374 	add.w	r3, r3, #62464	; 0xf400
 8000884:	9201      	str	r2, [sp, #4]
 8000886:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000888:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800088c:	6459      	str	r1, [r3, #68]	; 0x44
 800088e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000894:	9301      	str	r3, [sp, #4]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000896:	4611      	mov	r1, r2
 8000898:	2019      	movs	r0, #25
    __HAL_RCC_TIM10_CLK_ENABLE();
 800089a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800089c:	f000 f93c 	bl	8000b18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80008a0:	2019      	movs	r0, #25
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80008a2:	b003      	add	sp, #12
 80008a4:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80008a8:	f000 b968 	b.w	8000b7c <HAL_NVIC_EnableIRQ>
}
 80008ac:	b003      	add	sp, #12
 80008ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80008b2:	bf00      	nop
 80008b4:	40014400 	.word	0x40014400

080008b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b8:	b510      	push	{r4, lr}
 80008ba:	4604      	mov	r4, r0
 80008bc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	2214      	movs	r2, #20
 80008c0:	2100      	movs	r1, #0
 80008c2:	a803      	add	r0, sp, #12
 80008c4:	f001 ff26 	bl	8002714 <memset>
  if(huart->Instance==USART2)
 80008c8:	6822      	ldr	r2, [r4, #0]
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <HAL_UART_MspInit+0x60>)
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d120      	bne.n	8000912 <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008d0:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80008d4:	2100      	movs	r1, #0
 80008d6:	9101      	str	r1, [sp, #4]
 80008d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008da:	4810      	ldr	r0, [pc, #64]	; (800091c <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80008dc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80008e0:	641a      	str	r2, [r3, #64]	; 0x40
 80008e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008e4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80008e8:	9201      	str	r2, [sp, #4]
 80008ea:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ec:	9102      	str	r1, [sp, #8]
 80008ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008f0:	f042 0201 	orr.w	r2, r2, #1
 80008f4:	631a      	str	r2, [r3, #48]	; 0x30
 80008f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f8:	f003 0301 	and.w	r3, r3, #1
 80008fc:	9302      	str	r3, [sp, #8]
 80008fe:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000900:	220c      	movs	r2, #12
 8000902:	2302      	movs	r3, #2
 8000904:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000908:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800090a:	2307      	movs	r3, #7
 800090c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090e:	f000 f957 	bl	8000bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000912:	b008      	add	sp, #32
 8000914:	bd10      	pop	{r4, pc}
 8000916:	bf00      	nop
 8000918:	40004400 	.word	0x40004400
 800091c:	40020000 	.word	0x40020000

08000920 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <NMI_Handler>

08000922 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000922:	e7fe      	b.n	8000922 <HardFault_Handler>

08000924 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <MemManage_Handler>

08000926 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <BusFault_Handler>

08000928 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <UsageFault_Handler>

0800092a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800092a:	4770      	bx	lr

0800092c <DebugMon_Handler>:
 800092c:	4770      	bx	lr

0800092e <PendSV_Handler>:
 800092e:	4770      	bx	lr

08000930 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000930:	f000 b8c0 	b.w	8000ab4 <HAL_IncTick>

08000934 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000934:	4801      	ldr	r0, [pc, #4]	; (800093c <TIM1_UP_TIM10_IRQHandler+0x8>)
 8000936:	f000 bcf1 	b.w	800131c <HAL_TIM_IRQHandler>
 800093a:	bf00      	nop
 800093c:	2000408c 	.word	0x2000408c

08000940 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000940:	b570      	push	{r4, r5, r6, lr}
 8000942:	460d      	mov	r5, r1
 8000944:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000946:	460e      	mov	r6, r1
 8000948:	1b73      	subs	r3, r6, r5
 800094a:	429c      	cmp	r4, r3
 800094c:	dc01      	bgt.n	8000952 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800094e:	4620      	mov	r0, r4
 8000950:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8000952:	f3af 8000 	nop.w
 8000956:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800095a:	e7f5      	b.n	8000948 <_read+0x8>

0800095c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800095c:	b570      	push	{r4, r5, r6, lr}
 800095e:	460d      	mov	r5, r1
 8000960:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000962:	460e      	mov	r6, r1
 8000964:	1b73      	subs	r3, r6, r5
 8000966:	429c      	cmp	r4, r3
 8000968:	dc01      	bgt.n	800096e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800096a:	4620      	mov	r0, r4
 800096c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800096e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8000972:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000976:	e7f5      	b.n	8000964 <_write+0x8>

08000978 <_close>:

int _close(int file)
{
	return -1;
}
 8000978:	f04f 30ff 	mov.w	r0, #4294967295
 800097c:	4770      	bx	lr

0800097e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800097e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000982:	604b      	str	r3, [r1, #4]
	return 0;
}
 8000984:	2000      	movs	r0, #0
 8000986:	4770      	bx	lr

08000988 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000988:	2001      	movs	r0, #1
 800098a:	4770      	bx	lr

0800098c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800098c:	2000      	movs	r0, #0
 800098e:	4770      	bx	lr

08000990 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000990:	4a0b      	ldr	r2, [pc, #44]	; (80009c0 <_sbrk+0x30>)
 8000992:	6811      	ldr	r1, [r2, #0]
{
 8000994:	b510      	push	{r4, lr}
 8000996:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8000998:	b909      	cbnz	r1, 800099e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800099a:	490a      	ldr	r1, [pc, #40]	; (80009c4 <_sbrk+0x34>)
 800099c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800099e:	6810      	ldr	r0, [r2, #0]
 80009a0:	4909      	ldr	r1, [pc, #36]	; (80009c8 <_sbrk+0x38>)
 80009a2:	4c0a      	ldr	r4, [pc, #40]	; (80009cc <_sbrk+0x3c>)
 80009a4:	4403      	add	r3, r0
 80009a6:	1b09      	subs	r1, r1, r4
 80009a8:	428b      	cmp	r3, r1
 80009aa:	d906      	bls.n	80009ba <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80009ac:	f001 fe72 	bl	8002694 <__errno>
 80009b0:	230c      	movs	r3, #12
 80009b2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80009b4:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80009b8:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80009ba:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80009bc:	e7fc      	b.n	80009b8 <_sbrk+0x28>
 80009be:	bf00      	nop
 80009c0:	2000c1a0 	.word	0x2000c1a0
 80009c4:	2000c1c0 	.word	0x2000c1c0
 80009c8:	20018000 	.word	0x20018000
 80009cc:	00000400 	.word	0x00000400

080009d0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009d0:	4a03      	ldr	r2, [pc, #12]	; (80009e0 <SystemInit+0x10>)
 80009d2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80009d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009da:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009de:	4770      	bx	lr
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009e8:	480d      	ldr	r0, [pc, #52]	; (8000a20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009ea:	490e      	ldr	r1, [pc, #56]	; (8000a24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009ec:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f0:	e002      	b.n	80009f8 <LoopCopyDataInit>

080009f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f6:	3304      	adds	r3, #4

080009f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009fc:	d3f9      	bcc.n	80009f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fe:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a00:	4c0b      	ldr	r4, [pc, #44]	; (8000a30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a04:	e001      	b.n	8000a0a <LoopFillZerobss>

08000a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a08:	3204      	adds	r2, #4

08000a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a0c:	d3fb      	bcc.n	8000a06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a0e:	f7ff ffdf 	bl	80009d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a12:	f001 fe45 	bl	80026a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a16:	f7ff fe03 	bl	8000620 <main>
  bx  lr    
 8000a1a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a1c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a24:	20004070 	.word	0x20004070
  ldr r2, =_sidata
 8000a28:	08004394 	.word	0x08004394
  ldr r2, =_sbss
 8000a2c:	20004070 	.word	0x20004070
  ldr r4, =_ebss
 8000a30:	2000c1bc 	.word	0x2000c1bc

08000a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a34:	e7fe      	b.n	8000a34 <ADC_IRQHandler>
	...

08000a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a38:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a3a:	4a0e      	ldr	r2, [pc, #56]	; (8000a74 <HAL_InitTick+0x3c>)
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <HAL_InitTick+0x40>)
{
 8000a3e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a40:	7818      	ldrb	r0, [r3, #0]
 8000a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a46:	fbb3 f3f0 	udiv	r3, r3, r0
 8000a4a:	6810      	ldr	r0, [r2, #0]
 8000a4c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a50:	f000 f8a2 	bl	8000b98 <HAL_SYSTICK_Config>
 8000a54:	4604      	mov	r4, r0
 8000a56:	b958      	cbnz	r0, 8000a70 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a58:	2d0f      	cmp	r5, #15
 8000a5a:	d809      	bhi.n	8000a70 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	4629      	mov	r1, r5
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	f000 f858 	bl	8000b18 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a68:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <HAL_InitTick+0x44>)
 8000a6a:	4620      	mov	r0, r4
 8000a6c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000a6e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000a70:	2001      	movs	r0, #1
 8000a72:	e7fc      	b.n	8000a6e <HAL_InitTick+0x36>
 8000a74:	20004000 	.word	0x20004000
 8000a78:	20004004 	.word	0x20004004
 8000a7c:	20004008 	.word	0x20004008

08000a80 <HAL_Init>:
{
 8000a80:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <HAL_Init+0x30>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a8a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000a92:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a9a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a9c:	2003      	movs	r0, #3
 8000a9e:	f000 f829 	bl	8000af4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f7ff ffc8 	bl	8000a38 <HAL_InitTick>
  HAL_MspInit();
 8000aa8:	f7ff fec6 	bl	8000838 <HAL_MspInit>
}
 8000aac:	2000      	movs	r0, #0
 8000aae:	bd08      	pop	{r3, pc}
 8000ab0:	40023c00 	.word	0x40023c00

08000ab4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ab4:	4a03      	ldr	r2, [pc, #12]	; (8000ac4 <HAL_IncTick+0x10>)
 8000ab6:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <HAL_IncTick+0x14>)
 8000ab8:	6811      	ldr	r1, [r2, #0]
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	440b      	add	r3, r1
 8000abe:	6013      	str	r3, [r2, #0]
}
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	2000c1a4 	.word	0x2000c1a4
 8000ac8:	20004004 	.word	0x20004004

08000acc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000acc:	4b01      	ldr	r3, [pc, #4]	; (8000ad4 <HAL_GetTick+0x8>)
 8000ace:	6818      	ldr	r0, [r3, #0]
}
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	2000c1a4 	.word	0x2000c1a4

08000ad8 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000ad8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8000adc:	6913      	ldr	r3, [r2, #16]
 8000ade:	f023 0302 	bic.w	r3, r3, #2
 8000ae2:	6113      	str	r3, [r2, #16]
}
 8000ae4:	4770      	bx	lr

08000ae6 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000ae6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8000aea:	6913      	ldr	r3, [r2, #16]
 8000aec:	f043 0302 	orr.w	r3, r3, #2
 8000af0:	6113      	str	r3, [r2, #16]
}
 8000af2:	4770      	bx	lr

08000af4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af4:	4907      	ldr	r1, [pc, #28]	; (8000b14 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000af6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000af8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000afc:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000afe:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b04:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000b10:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000b12:	4770      	bx	lr
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b18:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b1a:	b530      	push	{r4, r5, lr}
 8000b1c:	68dc      	ldr	r4, [r3, #12]
 8000b1e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b22:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b26:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b28:	2d04      	cmp	r5, #4
 8000b2a:	bf28      	it	cs
 8000b2c:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b2e:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b30:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b34:	bf8c      	ite	hi
 8000b36:	3c03      	subhi	r4, #3
 8000b38:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b3a:	fa03 f505 	lsl.w	r5, r3, r5
 8000b3e:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b42:	40a3      	lsls	r3, r4
 8000b44:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b48:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8000b4a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b4c:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b50:	bfac      	ite	ge
 8000b52:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b56:	4a08      	ldrlt	r2, [pc, #32]	; (8000b78 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b58:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5c:	bfb8      	it	lt
 8000b5e:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	bfaa      	itet	ge
 8000b66:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000b70:	bd30      	pop	{r4, r5, pc}
 8000b72:	bf00      	nop
 8000b74:	e000ed00 	.word	0xe000ed00
 8000b78:	e000ed14 	.word	0xe000ed14

08000b7c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000b7c:	2800      	cmp	r0, #0
 8000b7e:	db08      	blt.n	8000b92 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b80:	0942      	lsrs	r2, r0, #5
 8000b82:	2301      	movs	r3, #1
 8000b84:	f000 001f 	and.w	r0, r0, #31
 8000b88:	fa03 f000 	lsl.w	r0, r3, r0
 8000b8c:	4b01      	ldr	r3, [pc, #4]	; (8000b94 <HAL_NVIC_EnableIRQ+0x18>)
 8000b8e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000b92:	4770      	bx	lr
 8000b94:	e000e100 	.word	0xe000e100

08000b98 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b98:	3801      	subs	r0, #1
 8000b9a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b9e:	d20b      	bcs.n	8000bb8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ba0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba4:	4a05      	ldr	r2, [pc, #20]	; (8000bbc <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ba6:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba8:	21f0      	movs	r1, #240	; 0xf0
 8000baa:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bae:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bb0:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bb2:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bb4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000bb8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc4:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8000d4c <HAL_GPIO_Init+0x18c>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bc8:	4a5e      	ldr	r2, [pc, #376]	; (8000d44 <HAL_GPIO_Init+0x184>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bca:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bcc:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8000bce:	2401      	movs	r4, #1
 8000bd0:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bd2:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8000bd6:	43ac      	bics	r4, r5
 8000bd8:	f040 80a5 	bne.w	8000d26 <HAL_GPIO_Init+0x166>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bdc:	684d      	ldr	r5, [r1, #4]
 8000bde:	f005 0403 	and.w	r4, r5, #3
 8000be2:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000be6:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000be8:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bea:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bee:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bf0:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bf4:	d834      	bhi.n	8000c60 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8000bf6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bf8:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bfc:	68cf      	ldr	r7, [r1, #12]
 8000bfe:	fa07 f708 	lsl.w	r7, r7, r8
 8000c02:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8000c06:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000c08:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c0a:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c0e:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8000c12:	409f      	lsls	r7, r3
 8000c14:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000c18:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8000c1a:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c1c:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c20:	688f      	ldr	r7, [r1, #8]
 8000c22:	fa07 f708 	lsl.w	r7, r7, r8
 8000c26:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c2a:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8000c2c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c2e:	d119      	bne.n	8000c64 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8000c30:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000c34:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c38:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000c3c:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c40:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000c44:	f04f 0e0f 	mov.w	lr, #15
 8000c48:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000c4c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c50:	690f      	ldr	r7, [r1, #16]
 8000c52:	fa07 f70b 	lsl.w	r7, r7, fp
 8000c56:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000c5a:	f8ca 7020 	str.w	r7, [sl, #32]
 8000c5e:	e001      	b.n	8000c64 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c60:	2c03      	cmp	r4, #3
 8000c62:	d1da      	bne.n	8000c1a <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8000c64:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c66:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c6a:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c6c:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c6e:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8000c72:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c74:	d057      	beq.n	8000d26 <HAL_GPIO_Init+0x166>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c76:	f04f 0a00 	mov.w	sl, #0
 8000c7a:	f8cd a004 	str.w	sl, [sp, #4]
 8000c7e:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c82:	4c31      	ldr	r4, [pc, #196]	; (8000d48 <HAL_GPIO_Init+0x188>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c84:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000c88:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8000c8c:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8000c90:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000c94:	9601      	str	r6, [sp, #4]
 8000c96:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000c98:	f023 0603 	bic.w	r6, r3, #3
 8000c9c:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000ca0:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ca4:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000ca8:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cac:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000cb0:	270f      	movs	r7, #15
 8000cb2:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cb6:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cb8:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cbc:	d03a      	beq.n	8000d34 <HAL_GPIO_Init+0x174>
 8000cbe:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000cc2:	42a0      	cmp	r0, r4
 8000cc4:	d038      	beq.n	8000d38 <HAL_GPIO_Init+0x178>
 8000cc6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000cca:	42a0      	cmp	r0, r4
 8000ccc:	d036      	beq.n	8000d3c <HAL_GPIO_Init+0x17c>
 8000cce:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000cd2:	42a0      	cmp	r0, r4
 8000cd4:	d034      	beq.n	8000d40 <HAL_GPIO_Init+0x180>
 8000cd6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000cda:	42a0      	cmp	r0, r4
 8000cdc:	bf0c      	ite	eq
 8000cde:	2404      	moveq	r4, #4
 8000ce0:	2407      	movne	r4, #7
 8000ce2:	fa04 f40e 	lsl.w	r4, r4, lr
 8000ce6:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ce8:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 8000cea:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000cec:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000cf0:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8000cf2:	bf54      	ite	pl
 8000cf4:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000cf6:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8000cfa:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8000cfc:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000cfe:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8000d00:	bf54      	ite	pl
 8000d02:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000d04:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8000d08:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8000d0a:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d0c:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8000d0e:	bf54      	ite	pl
 8000d10:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000d12:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8000d16:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d18:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d1a:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8000d1c:	bf54      	ite	pl
 8000d1e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000d20:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8000d24:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d26:	3301      	adds	r3, #1
 8000d28:	2b10      	cmp	r3, #16
 8000d2a:	f47f af4f 	bne.w	8000bcc <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8000d2e:	b003      	add	sp, #12
 8000d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d34:	4654      	mov	r4, sl
 8000d36:	e7d4      	b.n	8000ce2 <HAL_GPIO_Init+0x122>
 8000d38:	2401      	movs	r4, #1
 8000d3a:	e7d2      	b.n	8000ce2 <HAL_GPIO_Init+0x122>
 8000d3c:	2402      	movs	r4, #2
 8000d3e:	e7d0      	b.n	8000ce2 <HAL_GPIO_Init+0x122>
 8000d40:	2403      	movs	r4, #3
 8000d42:	e7ce      	b.n	8000ce2 <HAL_GPIO_Init+0x122>
 8000d44:	40013c00 	.word	0x40013c00
 8000d48:	40020000 	.word	0x40020000
 8000d4c:	40023800 	.word	0x40023800

08000d50 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d50:	b10a      	cbz	r2, 8000d56 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000d52:	6181      	str	r1, [r0, #24]
  }
}
 8000d54:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000d56:	0409      	lsls	r1, r1, #16
 8000d58:	e7fb      	b.n	8000d52 <HAL_GPIO_WritePin+0x2>
	...

08000d5c <HAL_PWR_EnterSLEEPMode>:
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000d5c:	4a06      	ldr	r2, [pc, #24]	; (8000d78 <HAL_PWR_EnterSLEEPMode+0x1c>)
 8000d5e:	6913      	ldr	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8000d60:	2901      	cmp	r1, #1
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000d62:	f023 0304 	bic.w	r3, r3, #4
 8000d66:	6113      	str	r3, [r2, #16]
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8000d68:	d101      	bne.n	8000d6e <HAL_PWR_EnterSLEEPMode+0x12>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8000d6a:	bf30      	wfi
 8000d6c:	4770      	bx	lr
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8000d6e:	bf40      	sev
    __WFE();
 8000d70:	bf20      	wfe
    __WFE();
 8000d72:	bf20      	wfe
  }
}
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d80:	4604      	mov	r4, r0
 8000d82:	b340      	cbz	r0, 8000dd6 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d84:	6803      	ldr	r3, [r0, #0]
 8000d86:	07dd      	lsls	r5, r3, #31
 8000d88:	d410      	bmi.n	8000dac <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d8a:	6823      	ldr	r3, [r4, #0]
 8000d8c:	0798      	lsls	r0, r3, #30
 8000d8e:	d45e      	bmi.n	8000e4e <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d90:	6823      	ldr	r3, [r4, #0]
 8000d92:	071a      	lsls	r2, r3, #28
 8000d94:	f100 80a0 	bmi.w	8000ed8 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d98:	6823      	ldr	r3, [r4, #0]
 8000d9a:	075b      	lsls	r3, r3, #29
 8000d9c:	f100 80c0 	bmi.w	8000f20 <HAL_RCC_OscConfig+0x1a4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000da0:	69a0      	ldr	r0, [r4, #24]
 8000da2:	2800      	cmp	r0, #0
 8000da4:	f040 8128 	bne.w	8000ff8 <HAL_RCC_OscConfig+0x27c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000da8:	2000      	movs	r0, #0
 8000daa:	e02b      	b.n	8000e04 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000dac:	4b8f      	ldr	r3, [pc, #572]	; (8000fec <HAL_RCC_OscConfig+0x270>)
 8000dae:	689a      	ldr	r2, [r3, #8]
 8000db0:	f002 020c 	and.w	r2, r2, #12
 8000db4:	2a04      	cmp	r2, #4
 8000db6:	d007      	beq.n	8000dc8 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000db8:	689a      	ldr	r2, [r3, #8]
 8000dba:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000dbe:	2a08      	cmp	r2, #8
 8000dc0:	d10b      	bne.n	8000dda <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000dc2:	685a      	ldr	r2, [r3, #4]
 8000dc4:	0251      	lsls	r1, r2, #9
 8000dc6:	d508      	bpl.n	8000dda <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dc8:	4b88      	ldr	r3, [pc, #544]	; (8000fec <HAL_RCC_OscConfig+0x270>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	039a      	lsls	r2, r3, #14
 8000dce:	d5dc      	bpl.n	8000d8a <HAL_RCC_OscConfig+0xe>
 8000dd0:	6863      	ldr	r3, [r4, #4]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d1d9      	bne.n	8000d8a <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	e014      	b.n	8000e04 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dda:	6862      	ldr	r2, [r4, #4]
 8000ddc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000de0:	d113      	bne.n	8000e0a <HAL_RCC_OscConfig+0x8e>
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000de8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000dea:	f7ff fe6f 	bl	8000acc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dee:	4e7f      	ldr	r6, [pc, #508]	; (8000fec <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8000df0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000df2:	6833      	ldr	r3, [r6, #0]
 8000df4:	039b      	lsls	r3, r3, #14
 8000df6:	d4c8      	bmi.n	8000d8a <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000df8:	f7ff fe68 	bl	8000acc <HAL_GetTick>
 8000dfc:	1b40      	subs	r0, r0, r5
 8000dfe:	2864      	cmp	r0, #100	; 0x64
 8000e00:	d9f7      	bls.n	8000df2 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8000e02:	2003      	movs	r0, #3
}
 8000e04:	b002      	add	sp, #8
 8000e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e0a:	4d78      	ldr	r5, [pc, #480]	; (8000fec <HAL_RCC_OscConfig+0x270>)
 8000e0c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000e10:	682b      	ldr	r3, [r5, #0]
 8000e12:	d107      	bne.n	8000e24 <HAL_RCC_OscConfig+0xa8>
 8000e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e18:	602b      	str	r3, [r5, #0]
 8000e1a:	682b      	ldr	r3, [r5, #0]
 8000e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e20:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000e22:	e7e2      	b.n	8000dea <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e28:	602b      	str	r3, [r5, #0]
 8000e2a:	682b      	ldr	r3, [r5, #0]
 8000e2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e30:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	d1d9      	bne.n	8000dea <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8000e36:	f7ff fe49 	bl	8000acc <HAL_GetTick>
 8000e3a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e3c:	682b      	ldr	r3, [r5, #0]
 8000e3e:	039f      	lsls	r7, r3, #14
 8000e40:	d5a3      	bpl.n	8000d8a <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e42:	f7ff fe43 	bl	8000acc <HAL_GetTick>
 8000e46:	1b80      	subs	r0, r0, r6
 8000e48:	2864      	cmp	r0, #100	; 0x64
 8000e4a:	d9f7      	bls.n	8000e3c <HAL_RCC_OscConfig+0xc0>
 8000e4c:	e7d9      	b.n	8000e02 <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000e4e:	4b67      	ldr	r3, [pc, #412]	; (8000fec <HAL_RCC_OscConfig+0x270>)
 8000e50:	689a      	ldr	r2, [r3, #8]
 8000e52:	f012 0f0c 	tst.w	r2, #12
 8000e56:	d007      	beq.n	8000e68 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e58:	689a      	ldr	r2, [r3, #8]
 8000e5a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000e5e:	2a08      	cmp	r2, #8
 8000e60:	d111      	bne.n	8000e86 <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	025e      	lsls	r6, r3, #9
 8000e66:	d40e      	bmi.n	8000e86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e68:	4a60      	ldr	r2, [pc, #384]	; (8000fec <HAL_RCC_OscConfig+0x270>)
 8000e6a:	6813      	ldr	r3, [r2, #0]
 8000e6c:	079d      	lsls	r5, r3, #30
 8000e6e:	d502      	bpl.n	8000e76 <HAL_RCC_OscConfig+0xfa>
 8000e70:	68e3      	ldr	r3, [r4, #12]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d1af      	bne.n	8000dd6 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e76:	6813      	ldr	r3, [r2, #0]
 8000e78:	6921      	ldr	r1, [r4, #16]
 8000e7a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e7e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000e82:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e84:	e784      	b.n	8000d90 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000e86:	68e2      	ldr	r2, [r4, #12]
 8000e88:	4b59      	ldr	r3, [pc, #356]	; (8000ff0 <HAL_RCC_OscConfig+0x274>)
 8000e8a:	b1b2      	cbz	r2, 8000eba <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e90:	f7ff fe1c 	bl	8000acc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e94:	4d55      	ldr	r5, [pc, #340]	; (8000fec <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8000e96:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e98:	682b      	ldr	r3, [r5, #0]
 8000e9a:	0798      	lsls	r0, r3, #30
 8000e9c:	d507      	bpl.n	8000eae <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e9e:	682b      	ldr	r3, [r5, #0]
 8000ea0:	6922      	ldr	r2, [r4, #16]
 8000ea2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000ea6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000eaa:	602b      	str	r3, [r5, #0]
 8000eac:	e770      	b.n	8000d90 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000eae:	f7ff fe0d 	bl	8000acc <HAL_GetTick>
 8000eb2:	1b80      	subs	r0, r0, r6
 8000eb4:	2802      	cmp	r0, #2
 8000eb6:	d9ef      	bls.n	8000e98 <HAL_RCC_OscConfig+0x11c>
 8000eb8:	e7a3      	b.n	8000e02 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8000eba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ebc:	f7ff fe06 	bl	8000acc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ec0:	4e4a      	ldr	r6, [pc, #296]	; (8000fec <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8000ec2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ec4:	6833      	ldr	r3, [r6, #0]
 8000ec6:	0799      	lsls	r1, r3, #30
 8000ec8:	f57f af62 	bpl.w	8000d90 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ecc:	f7ff fdfe 	bl	8000acc <HAL_GetTick>
 8000ed0:	1b40      	subs	r0, r0, r5
 8000ed2:	2802      	cmp	r0, #2
 8000ed4:	d9f6      	bls.n	8000ec4 <HAL_RCC_OscConfig+0x148>
 8000ed6:	e794      	b.n	8000e02 <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000ed8:	6962      	ldr	r2, [r4, #20]
 8000eda:	4b45      	ldr	r3, [pc, #276]	; (8000ff0 <HAL_RCC_OscConfig+0x274>)
 8000edc:	b182      	cbz	r2, 8000f00 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8000ee4:	f7ff fdf2 	bl	8000acc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ee8:	4e40      	ldr	r6, [pc, #256]	; (8000fec <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8000eea:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eec:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000eee:	079f      	lsls	r7, r3, #30
 8000ef0:	f53f af52 	bmi.w	8000d98 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ef4:	f7ff fdea 	bl	8000acc <HAL_GetTick>
 8000ef8:	1b40      	subs	r0, r0, r5
 8000efa:	2802      	cmp	r0, #2
 8000efc:	d9f6      	bls.n	8000eec <HAL_RCC_OscConfig+0x170>
 8000efe:	e780      	b.n	8000e02 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8000f00:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8000f04:	f7ff fde2 	bl	8000acc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f08:	4e38      	ldr	r6, [pc, #224]	; (8000fec <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8000f0a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f0c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000f0e:	0798      	lsls	r0, r3, #30
 8000f10:	f57f af42 	bpl.w	8000d98 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f14:	f7ff fdda 	bl	8000acc <HAL_GetTick>
 8000f18:	1b40      	subs	r0, r0, r5
 8000f1a:	2802      	cmp	r0, #2
 8000f1c:	d9f6      	bls.n	8000f0c <HAL_RCC_OscConfig+0x190>
 8000f1e:	e770      	b.n	8000e02 <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f20:	4b32      	ldr	r3, [pc, #200]	; (8000fec <HAL_RCC_OscConfig+0x270>)
 8000f22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f24:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000f28:	d128      	bne.n	8000f7c <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f2a:	9201      	str	r2, [sp, #4]
 8000f2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f2e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f32:	641a      	str	r2, [r3, #64]	; 0x40
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3a:	9301      	str	r3, [sp, #4]
 8000f3c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000f3e:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f40:	4d2c      	ldr	r5, [pc, #176]	; (8000ff4 <HAL_RCC_OscConfig+0x278>)
 8000f42:	682b      	ldr	r3, [r5, #0]
 8000f44:	05d9      	lsls	r1, r3, #23
 8000f46:	d51b      	bpl.n	8000f80 <HAL_RCC_OscConfig+0x204>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f48:	68a3      	ldr	r3, [r4, #8]
 8000f4a:	4d28      	ldr	r5, [pc, #160]	; (8000fec <HAL_RCC_OscConfig+0x270>)
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d127      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x224>
 8000f50:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000f58:	f7ff fdb8 	bl	8000acc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f5c:	4e23      	ldr	r6, [pc, #140]	; (8000fec <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8000f5e:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f60:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f64:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000f66:	079b      	lsls	r3, r3, #30
 8000f68:	d539      	bpl.n	8000fde <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000f6a:	2f00      	cmp	r7, #0
 8000f6c:	f43f af18 	beq.w	8000da0 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f70:	4a1e      	ldr	r2, [pc, #120]	; (8000fec <HAL_RCC_OscConfig+0x270>)
 8000f72:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f78:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7a:	e711      	b.n	8000da0 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000f7c:	2700      	movs	r7, #0
 8000f7e:	e7df      	b.n	8000f40 <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f80:	682b      	ldr	r3, [r5, #0]
 8000f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f86:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000f88:	f7ff fda0 	bl	8000acc <HAL_GetTick>
 8000f8c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f8e:	682b      	ldr	r3, [r5, #0]
 8000f90:	05da      	lsls	r2, r3, #23
 8000f92:	d4d9      	bmi.n	8000f48 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f94:	f7ff fd9a 	bl	8000acc <HAL_GetTick>
 8000f98:	1b80      	subs	r0, r0, r6
 8000f9a:	2802      	cmp	r0, #2
 8000f9c:	d9f7      	bls.n	8000f8e <HAL_RCC_OscConfig+0x212>
 8000f9e:	e730      	b.n	8000e02 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fa0:	2b05      	cmp	r3, #5
 8000fa2:	d104      	bne.n	8000fae <HAL_RCC_OscConfig+0x232>
 8000fa4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000fa6:	f043 0304 	orr.w	r3, r3, #4
 8000faa:	672b      	str	r3, [r5, #112]	; 0x70
 8000fac:	e7d0      	b.n	8000f50 <HAL_RCC_OscConfig+0x1d4>
 8000fae:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000fb0:	f022 0201 	bic.w	r2, r2, #1
 8000fb4:	672a      	str	r2, [r5, #112]	; 0x70
 8000fb6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000fb8:	f022 0204 	bic.w	r2, r2, #4
 8000fbc:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1ca      	bne.n	8000f58 <HAL_RCC_OscConfig+0x1dc>
      tickstart = HAL_GetTick();
 8000fc2:	f7ff fd83 	bl	8000acc <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fc6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000fca:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fcc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000fce:	0798      	lsls	r0, r3, #30
 8000fd0:	d5cb      	bpl.n	8000f6a <HAL_RCC_OscConfig+0x1ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fd2:	f7ff fd7b 	bl	8000acc <HAL_GetTick>
 8000fd6:	1b80      	subs	r0, r0, r6
 8000fd8:	4540      	cmp	r0, r8
 8000fda:	d9f7      	bls.n	8000fcc <HAL_RCC_OscConfig+0x250>
 8000fdc:	e711      	b.n	8000e02 <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fde:	f7ff fd75 	bl	8000acc <HAL_GetTick>
 8000fe2:	1b40      	subs	r0, r0, r5
 8000fe4:	4540      	cmp	r0, r8
 8000fe6:	d9bd      	bls.n	8000f64 <HAL_RCC_OscConfig+0x1e8>
 8000fe8:	e70b      	b.n	8000e02 <HAL_RCC_OscConfig+0x86>
 8000fea:	bf00      	nop
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	42470000 	.word	0x42470000
 8000ff4:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000ff8:	4d36      	ldr	r5, [pc, #216]	; (80010d4 <HAL_RCC_OscConfig+0x358>)
 8000ffa:	68ab      	ldr	r3, [r5, #8]
 8000ffc:	f003 030c 	and.w	r3, r3, #12
 8001000:	2b08      	cmp	r3, #8
 8001002:	d03d      	beq.n	8001080 <HAL_RCC_OscConfig+0x304>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001004:	4b34      	ldr	r3, [pc, #208]	; (80010d8 <HAL_RCC_OscConfig+0x35c>)
 8001006:	2200      	movs	r2, #0
 8001008:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800100a:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800100c:	d12b      	bne.n	8001066 <HAL_RCC_OscConfig+0x2ea>
        tickstart = HAL_GetTick();
 800100e:	f7ff fd5d 	bl	8000acc <HAL_GetTick>
 8001012:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001014:	682b      	ldr	r3, [r5, #0]
 8001016:	0199      	lsls	r1, r3, #6
 8001018:	d41f      	bmi.n	800105a <HAL_RCC_OscConfig+0x2de>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800101a:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800101e:	4313      	orrs	r3, r2
 8001020:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001022:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001026:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001028:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800102c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800102e:	0852      	lsrs	r2, r2, #1
 8001030:	3a01      	subs	r2, #1
 8001032:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001036:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001038:	4b27      	ldr	r3, [pc, #156]	; (80010d8 <HAL_RCC_OscConfig+0x35c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800103a:	4d26      	ldr	r5, [pc, #152]	; (80010d4 <HAL_RCC_OscConfig+0x358>)
        __HAL_RCC_PLL_ENABLE();
 800103c:	2201      	movs	r2, #1
 800103e:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001040:	f7ff fd44 	bl	8000acc <HAL_GetTick>
 8001044:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001046:	682b      	ldr	r3, [r5, #0]
 8001048:	019a      	lsls	r2, r3, #6
 800104a:	f53f aead 	bmi.w	8000da8 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800104e:	f7ff fd3d 	bl	8000acc <HAL_GetTick>
 8001052:	1b00      	subs	r0, r0, r4
 8001054:	2802      	cmp	r0, #2
 8001056:	d9f6      	bls.n	8001046 <HAL_RCC_OscConfig+0x2ca>
 8001058:	e6d3      	b.n	8000e02 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800105a:	f7ff fd37 	bl	8000acc <HAL_GetTick>
 800105e:	1b80      	subs	r0, r0, r6
 8001060:	2802      	cmp	r0, #2
 8001062:	d9d7      	bls.n	8001014 <HAL_RCC_OscConfig+0x298>
 8001064:	e6cd      	b.n	8000e02 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8001066:	f7ff fd31 	bl	8000acc <HAL_GetTick>
 800106a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800106c:	682b      	ldr	r3, [r5, #0]
 800106e:	019b      	lsls	r3, r3, #6
 8001070:	f57f ae9a 	bpl.w	8000da8 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001074:	f7ff fd2a 	bl	8000acc <HAL_GetTick>
 8001078:	1b00      	subs	r0, r0, r4
 800107a:	2802      	cmp	r0, #2
 800107c:	d9f6      	bls.n	800106c <HAL_RCC_OscConfig+0x2f0>
 800107e:	e6c0      	b.n	8000e02 <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001080:	2801      	cmp	r0, #1
 8001082:	f43f aebf 	beq.w	8000e04 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 8001086:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001088:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800108a:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800108e:	4291      	cmp	r1, r2
 8001090:	f47f aea1 	bne.w	8000dd6 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001094:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001096:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800109a:	428a      	cmp	r2, r1
 800109c:	f47f ae9b 	bne.w	8000dd6 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80010a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80010a2:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80010a6:	401a      	ands	r2, r3
 80010a8:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80010ac:	f47f ae93 	bne.w	8000dd6 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80010b0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80010b2:	0852      	lsrs	r2, r2, #1
 80010b4:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80010b8:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80010ba:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80010be:	f47f ae8a 	bne.w	8000dd6 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80010c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80010c4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80010c8:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80010cc:	f43f ae6c 	beq.w	8000da8 <HAL_RCC_OscConfig+0x2c>
 80010d0:	e681      	b.n	8000dd6 <HAL_RCC_OscConfig+0x5a>
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800
 80010d8:	42470000 	.word	0x42470000

080010dc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80010dc:	4913      	ldr	r1, [pc, #76]	; (800112c <HAL_RCC_GetSysClockFreq+0x50>)
{
 80010de:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80010e0:	688b      	ldr	r3, [r1, #8]
 80010e2:	f003 030c 	and.w	r3, r3, #12
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	d01c      	beq.n	8001124 <HAL_RCC_GetSysClockFreq+0x48>
 80010ea:	2b08      	cmp	r3, #8
 80010ec:	d11c      	bne.n	8001128 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80010ee:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80010f0:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010f2:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80010f4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010f8:	bf14      	ite	ne
 80010fa:	480d      	ldrne	r0, [pc, #52]	; (8001130 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010fc:	480d      	ldreq	r0, [pc, #52]	; (8001134 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010fe:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001102:	bf18      	it	ne
 8001104:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001106:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800110a:	fba1 0100 	umull	r0, r1, r1, r0
 800110e:	f7ff f8b7 	bl	8000280 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_RCC_GetSysClockFreq+0x50>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800111a:	3301      	adds	r3, #1
 800111c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800111e:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001122:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001124:	4802      	ldr	r0, [pc, #8]	; (8001130 <HAL_RCC_GetSysClockFreq+0x54>)
 8001126:	e7fc      	b.n	8001122 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8001128:	4802      	ldr	r0, [pc, #8]	; (8001134 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 800112a:	e7fa      	b.n	8001122 <HAL_RCC_GetSysClockFreq+0x46>
 800112c:	40023800 	.word	0x40023800
 8001130:	007a1200 	.word	0x007a1200
 8001134:	00f42400 	.word	0x00f42400

08001138 <HAL_RCC_ClockConfig>:
{
 8001138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800113c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800113e:	4604      	mov	r4, r0
 8001140:	b910      	cbnz	r0, 8001148 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001142:	2001      	movs	r0, #1
}
 8001144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001148:	4b44      	ldr	r3, [pc, #272]	; (800125c <HAL_RCC_ClockConfig+0x124>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	f002 0207 	and.w	r2, r2, #7
 8001150:	428a      	cmp	r2, r1
 8001152:	d328      	bcc.n	80011a6 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001154:	6822      	ldr	r2, [r4, #0]
 8001156:	0797      	lsls	r7, r2, #30
 8001158:	d42d      	bmi.n	80011b6 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800115a:	07d0      	lsls	r0, r2, #31
 800115c:	d441      	bmi.n	80011e2 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800115e:	4b3f      	ldr	r3, [pc, #252]	; (800125c <HAL_RCC_ClockConfig+0x124>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	f002 0207 	and.w	r2, r2, #7
 8001166:	42aa      	cmp	r2, r5
 8001168:	d866      	bhi.n	8001238 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800116a:	6822      	ldr	r2, [r4, #0]
 800116c:	0751      	lsls	r1, r2, #29
 800116e:	d46c      	bmi.n	800124a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001170:	0713      	lsls	r3, r2, #28
 8001172:	d507      	bpl.n	8001184 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001174:	4a3a      	ldr	r2, [pc, #232]	; (8001260 <HAL_RCC_ClockConfig+0x128>)
 8001176:	6921      	ldr	r1, [r4, #16]
 8001178:	6893      	ldr	r3, [r2, #8]
 800117a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800117e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001182:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001184:	f7ff ffaa 	bl	80010dc <HAL_RCC_GetSysClockFreq>
 8001188:	4b35      	ldr	r3, [pc, #212]	; (8001260 <HAL_RCC_ClockConfig+0x128>)
 800118a:	4a36      	ldr	r2, [pc, #216]	; (8001264 <HAL_RCC_ClockConfig+0x12c>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001192:	5cd3      	ldrb	r3, [r2, r3]
 8001194:	40d8      	lsrs	r0, r3
 8001196:	4b34      	ldr	r3, [pc, #208]	; (8001268 <HAL_RCC_ClockConfig+0x130>)
 8001198:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800119a:	4b34      	ldr	r3, [pc, #208]	; (800126c <HAL_RCC_ClockConfig+0x134>)
 800119c:	6818      	ldr	r0, [r3, #0]
 800119e:	f7ff fc4b 	bl	8000a38 <HAL_InitTick>
  return HAL_OK;
 80011a2:	2000      	movs	r0, #0
 80011a4:	e7ce      	b.n	8001144 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011a6:	b2ca      	uxtb	r2, r1
 80011a8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0307 	and.w	r3, r3, #7
 80011b0:	428b      	cmp	r3, r1
 80011b2:	d1c6      	bne.n	8001142 <HAL_RCC_ClockConfig+0xa>
 80011b4:	e7ce      	b.n	8001154 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011b6:	4b2a      	ldr	r3, [pc, #168]	; (8001260 <HAL_RCC_ClockConfig+0x128>)
 80011b8:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011bc:	bf1e      	ittt	ne
 80011be:	6899      	ldrne	r1, [r3, #8]
 80011c0:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 80011c4:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011c6:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011c8:	bf42      	ittt	mi
 80011ca:	6899      	ldrmi	r1, [r3, #8]
 80011cc:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 80011d0:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011d2:	4923      	ldr	r1, [pc, #140]	; (8001260 <HAL_RCC_ClockConfig+0x128>)
 80011d4:	68a0      	ldr	r0, [r4, #8]
 80011d6:	688b      	ldr	r3, [r1, #8]
 80011d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80011dc:	4303      	orrs	r3, r0
 80011de:	608b      	str	r3, [r1, #8]
 80011e0:	e7bb      	b.n	800115a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011e2:	6862      	ldr	r2, [r4, #4]
 80011e4:	4b1e      	ldr	r3, [pc, #120]	; (8001260 <HAL_RCC_ClockConfig+0x128>)
 80011e6:	2a01      	cmp	r2, #1
 80011e8:	d11c      	bne.n	8001224 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f0:	d0a7      	beq.n	8001142 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011f2:	4e1b      	ldr	r6, [pc, #108]	; (8001260 <HAL_RCC_ClockConfig+0x128>)
 80011f4:	68b3      	ldr	r3, [r6, #8]
 80011f6:	f023 0303 	bic.w	r3, r3, #3
 80011fa:	4313      	orrs	r3, r2
 80011fc:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80011fe:	f7ff fc65 	bl	8000acc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001202:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001206:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001208:	68b3      	ldr	r3, [r6, #8]
 800120a:	6862      	ldr	r2, [r4, #4]
 800120c:	f003 030c 	and.w	r3, r3, #12
 8001210:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001214:	d0a3      	beq.n	800115e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001216:	f7ff fc59 	bl	8000acc <HAL_GetTick>
 800121a:	1bc0      	subs	r0, r0, r7
 800121c:	4540      	cmp	r0, r8
 800121e:	d9f3      	bls.n	8001208 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8001220:	2003      	movs	r0, #3
 8001222:	e78f      	b.n	8001144 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001224:	1e91      	subs	r1, r2, #2
 8001226:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001228:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800122a:	d802      	bhi.n	8001232 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800122c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001230:	e7de      	b.n	80011f0 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001232:	f013 0f02 	tst.w	r3, #2
 8001236:	e7db      	b.n	80011f0 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001238:	b2ea      	uxtb	r2, r5
 800123a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	42ab      	cmp	r3, r5
 8001244:	f47f af7d 	bne.w	8001142 <HAL_RCC_ClockConfig+0xa>
 8001248:	e78f      	b.n	800116a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800124a:	4905      	ldr	r1, [pc, #20]	; (8001260 <HAL_RCC_ClockConfig+0x128>)
 800124c:	68e0      	ldr	r0, [r4, #12]
 800124e:	688b      	ldr	r3, [r1, #8]
 8001250:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001254:	4303      	orrs	r3, r0
 8001256:	608b      	str	r3, [r1, #8]
 8001258:	e78a      	b.n	8001170 <HAL_RCC_ClockConfig+0x38>
 800125a:	bf00      	nop
 800125c:	40023c00 	.word	0x40023c00
 8001260:	40023800 	.word	0x40023800
 8001264:	08003ca0 	.word	0x08003ca0
 8001268:	20004000 	.word	0x20004000
 800126c:	20004008 	.word	0x20004008

08001270 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001270:	4b04      	ldr	r3, [pc, #16]	; (8001284 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001272:	4a05      	ldr	r2, [pc, #20]	; (8001288 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800127a:	5cd3      	ldrb	r3, [r2, r3]
 800127c:	4a03      	ldr	r2, [pc, #12]	; (800128c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800127e:	6810      	ldr	r0, [r2, #0]
}
 8001280:	40d8      	lsrs	r0, r3
 8001282:	4770      	bx	lr
 8001284:	40023800 	.word	0x40023800
 8001288:	08003cb0 	.word	0x08003cb0
 800128c:	20004000 	.word	0x20004000

08001290 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001290:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001292:	4a05      	ldr	r2, [pc, #20]	; (80012a8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800129a:	5cd3      	ldrb	r3, [r2, r3]
 800129c:	4a03      	ldr	r2, [pc, #12]	; (80012ac <HAL_RCC_GetPCLK2Freq+0x1c>)
 800129e:	6810      	ldr	r0, [r2, #0]
}
 80012a0:	40d8      	lsrs	r0, r3
 80012a2:	4770      	bx	lr
 80012a4:	40023800 	.word	0x40023800
 80012a8:	08003cb0 	.word	0x08003cb0
 80012ac:	20004000 	.word	0x20004000

080012b0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80012b0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d128      	bne.n	800130a <HAL_TIM_Base_Start_IT+0x5a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80012b8:	2302      	movs	r3, #2
 80012ba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80012be:	6803      	ldr	r3, [r0, #0]
 80012c0:	68da      	ldr	r2, [r3, #12]
 80012c2:	f042 0201 	orr.w	r2, r2, #1
 80012c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80012c8:	4a11      	ldr	r2, [pc, #68]	; (8001310 <HAL_TIM_Base_Start_IT+0x60>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d012      	beq.n	80012f4 <HAL_TIM_Base_Start_IT+0x44>
 80012ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012d2:	d00f      	beq.n	80012f4 <HAL_TIM_Base_Start_IT+0x44>
 80012d4:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80012d8:	4293      	cmp	r3, r2
 80012da:	d00b      	beq.n	80012f4 <HAL_TIM_Base_Start_IT+0x44>
 80012dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d007      	beq.n	80012f4 <HAL_TIM_Base_Start_IT+0x44>
 80012e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d003      	beq.n	80012f4 <HAL_TIM_Base_Start_IT+0x44>
 80012ec:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d104      	bne.n	80012fe <HAL_TIM_Base_Start_IT+0x4e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80012f4:	689a      	ldr	r2, [r3, #8]
 80012f6:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80012fa:	2a06      	cmp	r2, #6
 80012fc:	d003      	beq.n	8001306 <HAL_TIM_Base_Start_IT+0x56>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	f042 0201 	orr.w	r2, r2, #1
 8001304:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001306:	2000      	movs	r0, #0
}
 8001308:	4770      	bx	lr
    return HAL_ERROR;
 800130a:	2001      	movs	r0, #1
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	40010000 	.word	0x40010000

08001314 <HAL_TIM_OC_DelayElapsedCallback>:
 8001314:	4770      	bx	lr

08001316 <HAL_TIM_IC_CaptureCallback>:
 8001316:	4770      	bx	lr

08001318 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001318:	4770      	bx	lr

0800131a <HAL_TIM_TriggerCallback>:
 800131a:	4770      	bx	lr

0800131c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800131c:	6803      	ldr	r3, [r0, #0]
 800131e:	691a      	ldr	r2, [r3, #16]
 8001320:	0791      	lsls	r1, r2, #30
{
 8001322:	b510      	push	{r4, lr}
 8001324:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001326:	d50e      	bpl.n	8001346 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001328:	68da      	ldr	r2, [r3, #12]
 800132a:	0792      	lsls	r2, r2, #30
 800132c:	d50b      	bpl.n	8001346 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800132e:	f06f 0202 	mvn.w	r2, #2
 8001332:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001334:	2201      	movs	r2, #1
 8001336:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	079b      	lsls	r3, r3, #30
 800133c:	d077      	beq.n	800142e <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800133e:	f7ff ffea 	bl	8001316 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001342:	2300      	movs	r3, #0
 8001344:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001346:	6823      	ldr	r3, [r4, #0]
 8001348:	691a      	ldr	r2, [r3, #16]
 800134a:	0750      	lsls	r0, r2, #29
 800134c:	d510      	bpl.n	8001370 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800134e:	68da      	ldr	r2, [r3, #12]
 8001350:	0751      	lsls	r1, r2, #29
 8001352:	d50d      	bpl.n	8001370 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001354:	f06f 0204 	mvn.w	r2, #4
 8001358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800135a:	2202      	movs	r2, #2
 800135c:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001364:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001366:	d068      	beq.n	800143a <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001368:	f7ff ffd5 	bl	8001316 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800136c:	2300      	movs	r3, #0
 800136e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001370:	6823      	ldr	r3, [r4, #0]
 8001372:	691a      	ldr	r2, [r3, #16]
 8001374:	0712      	lsls	r2, r2, #28
 8001376:	d50f      	bpl.n	8001398 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001378:	68da      	ldr	r2, [r3, #12]
 800137a:	0710      	lsls	r0, r2, #28
 800137c:	d50c      	bpl.n	8001398 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800137e:	f06f 0208 	mvn.w	r2, #8
 8001382:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001384:	2204      	movs	r2, #4
 8001386:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800138c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800138e:	d05a      	beq.n	8001446 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001390:	f7ff ffc1 	bl	8001316 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001394:	2300      	movs	r3, #0
 8001396:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001398:	6823      	ldr	r3, [r4, #0]
 800139a:	691a      	ldr	r2, [r3, #16]
 800139c:	06d2      	lsls	r2, r2, #27
 800139e:	d510      	bpl.n	80013c2 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80013a0:	68da      	ldr	r2, [r3, #12]
 80013a2:	06d0      	lsls	r0, r2, #27
 80013a4:	d50d      	bpl.n	80013c2 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80013a6:	f06f 0210 	mvn.w	r2, #16
 80013aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80013ac:	2208      	movs	r2, #8
 80013ae:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80013b6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80013b8:	d04b      	beq.n	8001452 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80013ba:	f7ff ffac 	bl	8001316 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80013be:	2300      	movs	r3, #0
 80013c0:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80013c2:	6823      	ldr	r3, [r4, #0]
 80013c4:	691a      	ldr	r2, [r3, #16]
 80013c6:	07d1      	lsls	r1, r2, #31
 80013c8:	d508      	bpl.n	80013dc <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80013ca:	68da      	ldr	r2, [r3, #12]
 80013cc:	07d2      	lsls	r2, r2, #31
 80013ce:	d505      	bpl.n	80013dc <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80013d0:	f06f 0201 	mvn.w	r2, #1
 80013d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80013d6:	4620      	mov	r0, r4
 80013d8:	f7ff fa26 	bl	8000828 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80013dc:	6823      	ldr	r3, [r4, #0]
 80013de:	691a      	ldr	r2, [r3, #16]
 80013e0:	0610      	lsls	r0, r2, #24
 80013e2:	d508      	bpl.n	80013f6 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80013e4:	68da      	ldr	r2, [r3, #12]
 80013e6:	0611      	lsls	r1, r2, #24
 80013e8:	d505      	bpl.n	80013f6 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80013ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80013ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80013f0:	4620      	mov	r0, r4
 80013f2:	f000 f8b0 	bl	8001556 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80013f6:	6823      	ldr	r3, [r4, #0]
 80013f8:	691a      	ldr	r2, [r3, #16]
 80013fa:	0652      	lsls	r2, r2, #25
 80013fc:	d508      	bpl.n	8001410 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80013fe:	68da      	ldr	r2, [r3, #12]
 8001400:	0650      	lsls	r0, r2, #25
 8001402:	d505      	bpl.n	8001410 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001404:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800140a:	4620      	mov	r0, r4
 800140c:	f7ff ff85 	bl	800131a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001410:	6823      	ldr	r3, [r4, #0]
 8001412:	691a      	ldr	r2, [r3, #16]
 8001414:	0691      	lsls	r1, r2, #26
 8001416:	d522      	bpl.n	800145e <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001418:	68da      	ldr	r2, [r3, #12]
 800141a:	0692      	lsls	r2, r2, #26
 800141c:	d51f      	bpl.n	800145e <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800141e:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001422:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001424:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800142a:	f000 b893 	b.w	8001554 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800142e:	f7ff ff71 	bl	8001314 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001432:	4620      	mov	r0, r4
 8001434:	f7ff ff70 	bl	8001318 <HAL_TIM_PWM_PulseFinishedCallback>
 8001438:	e783      	b.n	8001342 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800143a:	f7ff ff6b 	bl	8001314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800143e:	4620      	mov	r0, r4
 8001440:	f7ff ff6a 	bl	8001318 <HAL_TIM_PWM_PulseFinishedCallback>
 8001444:	e792      	b.n	800136c <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001446:	f7ff ff65 	bl	8001314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800144a:	4620      	mov	r0, r4
 800144c:	f7ff ff64 	bl	8001318 <HAL_TIM_PWM_PulseFinishedCallback>
 8001450:	e7a0      	b.n	8001394 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001452:	f7ff ff5f 	bl	8001314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001456:	4620      	mov	r0, r4
 8001458:	f7ff ff5e 	bl	8001318 <HAL_TIM_PWM_PulseFinishedCallback>
 800145c:	e7af      	b.n	80013be <HAL_TIM_IRQHandler+0xa2>
}
 800145e:	bd10      	pop	{r4, pc}

08001460 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001460:	4a24      	ldr	r2, [pc, #144]	; (80014f4 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 8001462:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001464:	4290      	cmp	r0, r2
 8001466:	d00e      	beq.n	8001486 <TIM_Base_SetConfig+0x26>
 8001468:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800146c:	d00b      	beq.n	8001486 <TIM_Base_SetConfig+0x26>
 800146e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001472:	4290      	cmp	r0, r2
 8001474:	d007      	beq.n	8001486 <TIM_Base_SetConfig+0x26>
 8001476:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800147a:	4290      	cmp	r0, r2
 800147c:	d003      	beq.n	8001486 <TIM_Base_SetConfig+0x26>
 800147e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001482:	4290      	cmp	r0, r2
 8001484:	d115      	bne.n	80014b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001486:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800148c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800148e:	4a19      	ldr	r2, [pc, #100]	; (80014f4 <TIM_Base_SetConfig+0x94>)
 8001490:	4290      	cmp	r0, r2
 8001492:	d019      	beq.n	80014c8 <TIM_Base_SetConfig+0x68>
 8001494:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001498:	d016      	beq.n	80014c8 <TIM_Base_SetConfig+0x68>
 800149a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800149e:	4290      	cmp	r0, r2
 80014a0:	d012      	beq.n	80014c8 <TIM_Base_SetConfig+0x68>
 80014a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014a6:	4290      	cmp	r0, r2
 80014a8:	d00e      	beq.n	80014c8 <TIM_Base_SetConfig+0x68>
 80014aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014ae:	4290      	cmp	r0, r2
 80014b0:	d00a      	beq.n	80014c8 <TIM_Base_SetConfig+0x68>
 80014b2:	4a11      	ldr	r2, [pc, #68]	; (80014f8 <TIM_Base_SetConfig+0x98>)
 80014b4:	4290      	cmp	r0, r2
 80014b6:	d007      	beq.n	80014c8 <TIM_Base_SetConfig+0x68>
 80014b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014bc:	4290      	cmp	r0, r2
 80014be:	d003      	beq.n	80014c8 <TIM_Base_SetConfig+0x68>
 80014c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014c4:	4290      	cmp	r0, r2
 80014c6:	d103      	bne.n	80014d0 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80014c8:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80014ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80014ce:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80014d0:	694a      	ldr	r2, [r1, #20]
 80014d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014d6:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80014d8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80014da:	688b      	ldr	r3, [r1, #8]
 80014dc:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80014de:	680b      	ldr	r3, [r1, #0]
 80014e0:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80014e2:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <TIM_Base_SetConfig+0x94>)
 80014e4:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80014e6:	bf04      	itt	eq
 80014e8:	690b      	ldreq	r3, [r1, #16]
 80014ea:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80014ec:	2301      	movs	r3, #1
 80014ee:	6143      	str	r3, [r0, #20]
}
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40010000 	.word	0x40010000
 80014f8:	40014000 	.word	0x40014000

080014fc <HAL_TIM_Base_Init>:
{
 80014fc:	b510      	push	{r4, lr}
  if (htim == NULL)
 80014fe:	4604      	mov	r4, r0
 8001500:	b330      	cbz	r0, 8001550 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001502:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001506:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800150a:	b91b      	cbnz	r3, 8001514 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800150c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001510:	f7ff f9b0 	bl	8000874 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001514:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001516:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001518:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800151c:	1d21      	adds	r1, r4, #4
 800151e:	f7ff ff9f 	bl	8001460 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001522:	2301      	movs	r3, #1
 8001524:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
 8001528:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800152a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800152e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001532:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001536:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800153a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800153e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001542:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001546:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800154a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800154e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001550:	2001      	movs	r0, #1
 8001552:	e7fc      	b.n	800154e <HAL_TIM_Base_Init+0x52>

08001554 <HAL_TIMEx_CommutCallback>:
 8001554:	4770      	bx	lr

08001556 <HAL_TIMEx_BreakCallback>:
 8001556:	4770      	bx	lr

08001558 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001558:	6802      	ldr	r2, [r0, #0]
 800155a:	68c1      	ldr	r1, [r0, #12]
 800155c:	6913      	ldr	r3, [r2, #16]
 800155e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001562:	430b      	orrs	r3, r1
{
 8001564:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001566:	6113      	str	r3, [r2, #16]
{
 8001568:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800156a:	6883      	ldr	r3, [r0, #8]
 800156c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800156e:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001570:	4303      	orrs	r3, r0
 8001572:	6968      	ldr	r0, [r5, #20]
 8001574:	4303      	orrs	r3, r0
 8001576:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8001578:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 800157c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001580:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8001582:	430b      	orrs	r3, r1
 8001584:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001586:	6953      	ldr	r3, [r2, #20]
 8001588:	69a9      	ldr	r1, [r5, #24]
 800158a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800158e:	430b      	orrs	r3, r1
 8001590:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001592:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <UART_SetConfig+0xb8>)
 8001594:	429a      	cmp	r2, r3
 8001596:	d003      	beq.n	80015a0 <UART_SetConfig+0x48>
 8001598:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800159c:	429a      	cmp	r2, r3
 800159e:	d123      	bne.n	80015e8 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80015a0:	f7ff fe76 	bl	8001290 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015a4:	69eb      	ldr	r3, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80015a6:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80015ac:	e9d5 4600 	ldrd	r4, r6, [r5]
 80015b0:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015b4:	d11b      	bne.n	80015ee <UART_SetConfig+0x96>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80015b6:	19b2      	adds	r2, r6, r6
 80015b8:	f04f 0300 	mov.w	r3, #0
 80015bc:	415b      	adcs	r3, r3
 80015be:	f7fe fe5f 	bl	8000280 <__aeabi_uldivmod>
 80015c2:	2164      	movs	r1, #100	; 0x64
 80015c4:	fbb0 f5f1 	udiv	r5, r0, r1
 80015c8:	fb01 0315 	mls	r3, r1, r5, r0
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	3332      	adds	r3, #50	; 0x32
 80015d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80015d4:	f003 0207 	and.w	r2, r3, #7
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 80015de:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80015e2:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80015e4:	60a3      	str	r3, [r4, #8]
  }
}
 80015e6:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 80015e8:	f7ff fe42 	bl	8001270 <HAL_RCC_GetPCLK1Freq>
 80015ec:	e7da      	b.n	80015a4 <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80015ee:	00b2      	lsls	r2, r6, #2
 80015f0:	0fb3      	lsrs	r3, r6, #30
 80015f2:	f7fe fe45 	bl	8000280 <__aeabi_uldivmod>
 80015f6:	2264      	movs	r2, #100	; 0x64
 80015f8:	fbb0 f1f2 	udiv	r1, r0, r2
 80015fc:	fb02 0311 	mls	r3, r2, r1, r0
 8001600:	011b      	lsls	r3, r3, #4
 8001602:	3332      	adds	r3, #50	; 0x32
 8001604:	fbb3 f3f2 	udiv	r3, r3, r2
 8001608:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800160c:	e7ea      	b.n	80015e4 <UART_SetConfig+0x8c>
 800160e:	bf00      	nop
 8001610:	40011000 	.word	0x40011000

08001614 <HAL_UART_Init>:
{
 8001614:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001616:	4604      	mov	r4, r0
 8001618:	b340      	cbz	r0, 800166c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800161a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800161e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001622:	b91b      	cbnz	r3, 800162c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001624:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8001628:	f7ff f946 	bl	80008b8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800162c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800162e:	2324      	movs	r3, #36	; 0x24
 8001630:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8001634:	68d3      	ldr	r3, [r2, #12]
 8001636:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800163a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800163c:	4620      	mov	r0, r4
 800163e:	f7ff ff8b 	bl	8001558 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001642:	6823      	ldr	r3, [r4, #0]
 8001644:	691a      	ldr	r2, [r3, #16]
 8001646:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800164a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800164c:	695a      	ldr	r2, [r3, #20]
 800164e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001652:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001654:	68da      	ldr	r2, [r3, #12]
 8001656:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800165a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800165c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800165e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001660:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001662:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001666:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800166a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800166c:	2001      	movs	r0, #1
 800166e:	e7fc      	b.n	800166a <HAL_UART_Init+0x56>

08001670 <local_groupconvolve_HWC_q7_nonsquare>:
	const uint16_t dim_im_out_x,                                       // output image dimension x
	const uint16_t dim_im_out_y,                                       // output image dimension y
	q15_t *bufferA,                                                    //buffer space for input
	q7_t *bufferB                                                      //buffer space for output
)
{
 8001670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001674:	b0ad      	sub	sp, #180	; 0xb4

    uint32_t im_in_y_dec = dim_im_in_x * ch_im_in;

    uint32_t im_out_y_dec = dim_im_out_x * ch_im_out;

    for (i = 0, shift_idx = 0; i < ch_im_out; i++, shift_idx += shift_steps)
 8001676:	f04f 0800 	mov.w	r8, #0
{
 800167a:	9226      	str	r2, [sp, #152]	; 0x98
 800167c:	f8bd 20e4 	ldrh.w	r2, [sp, #228]	; 0xe4
 8001680:	920b      	str	r2, [sp, #44]	; 0x2c
 8001682:	f8bd 20e8 	ldrh.w	r2, [sp, #232]	; 0xe8
 8001686:	9212      	str	r2, [sp, #72]	; 0x48
 8001688:	f8bd 20ec 	ldrh.w	r2, [sp, #236]	; 0xec
 800168c:	9213      	str	r2, [sp, #76]	; 0x4c
 800168e:	f8bd 20f0 	ldrh.w	r2, [sp, #240]	; 0xf0
 8001692:	9214      	str	r2, [sp, #80]	; 0x50
 8001694:	f8bd 20f4 	ldrh.w	r2, [sp, #244]	; 0xf4
 8001698:	9227      	str	r2, [sp, #156]	; 0x9c
 800169a:	f8bd 20f8 	ldrh.w	r2, [sp, #248]	; 0xf8
 800169e:	9215      	str	r2, [sp, #84]	; 0x54
 80016a0:	f8bd 2118 	ldrh.w	r2, [sp, #280]	; 0x118
 80016a4:	9216      	str	r2, [sp, #88]	; 0x58
 80016a6:	f8bd 211c 	ldrh.w	r2, [sp, #284]	; 0x11c
 80016aa:	9228      	str	r2, [sp, #160]	; 0xa0
    if(q_type == NNOM_QTYPE_PER_AXIS)
 80016ac:	f89d 2110 	ldrb.w	r2, [sp, #272]	; 0x110
{
 80016b0:	9025      	str	r0, [sp, #148]	; 0x94
    if(q_type == NNOM_QTYPE_PER_AXIS)
 80016b2:	1e50      	subs	r0, r2, #1
 80016b4:	4242      	negs	r2, r0
{
 80016b6:	9302      	str	r3, [sp, #8]
    if(q_type == NNOM_QTYPE_PER_AXIS)
 80016b8:	4142      	adcs	r2, r0
{
 80016ba:	f8bd 30e0 	ldrh.w	r3, [sp, #224]	; 0xe0
 80016be:	f8bd a0dc 	ldrh.w	sl, [sp, #220]	; 0xdc
    if(q_type == NNOM_QTYPE_PER_AXIS)
 80016c2:	9218      	str	r2, [sp, #96]	; 0x60
    uint16_t filter_by_group = ch_im_out/groups;
 80016c4:	fbba f2f3 	udiv	r2, sl, r3
 80016c8:	921c      	str	r2, [sp, #112]	; 0x70
    uint16_t channel_by_group = ch_im_in/groups;
 80016ca:	9a02      	ldr	r2, [sp, #8]
 80016cc:	fbb2 fef3 	udiv	lr, r2, r3
    uint32_t weight_y_dec = dim_kernel_x * channel_by_group;
 80016d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
{
 80016d2:	f8bd 50fc 	ldrh.w	r5, [sp, #252]	; 0xfc
 80016d6:	f8bd 6100 	ldrh.w	r6, [sp, #256]	; 0x100
 80016da:	9111      	str	r1, [sp, #68]	; 0x44
    uint32_t weight_y_dec = dim_kernel_x * channel_by_group;
 80016dc:	fb0e f303 	mul.w	r3, lr, r3
 80016e0:	930c      	str	r3, [sp, #48]	; 0x30
    uint32_t weight_ch_im_out_dec = channel_by_group * dim_kernel_y * dim_kernel_x;
 80016e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80016e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80016e6:	fb03 f30e 	mul.w	r3, r3, lr
 80016ea:	4353      	muls	r3, r2
 80016ec:	931d      	str	r3, [sp, #116]	; 0x74
    uint32_t im_in_y_dec = dim_im_in_x * ch_im_in;
 80016ee:	9b02      	ldr	r3, [sp, #8]
 80016f0:	434b      	muls	r3, r1
 80016f2:	930d      	str	r3, [sp, #52]	; 0x34
    uint32_t im_out_y_dec = dim_im_out_x * ch_im_out;
 80016f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80016f6:	fb0a f303 	mul.w	r3, sl, r3
 80016fa:	931e      	str	r3, [sp, #120]	; 0x78
    for (i = 0, shift_idx = 0; i < ch_im_out; i++, shift_idx += shift_steps)
 80016fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80016fe:	4373      	muls	r3, r6
 8001700:	9322      	str	r3, [sp, #136]	; 0x88
 8001702:	9b02      	ldr	r3, [sp, #8]
 8001704:	436b      	muls	r3, r5
 8001706:	9321      	str	r3, [sp, #132]	; 0x84
 8001708:	1e73      	subs	r3, r6, #1
 800170a:	932b      	str	r3, [sp, #172]	; 0xac
            int32_t ker_y_end = MIN(dim_kernel_y, (dim_im_in_y - base_idx_y + (dilation_y-1))/dilation_y);

            for (k = 0; k < dim_im_out_x; k++)
            {
				int32_t base_idx_x = stride_x * k - padding_x;
                int32_t ker_x_start = MAX(0, -(base_idx_x-(dilation_x-1))/dilation_x);
 800170c:	1e6b      	subs	r3, r5, #1
    for (i = 0, shift_idx = 0; i < ch_im_out; i++, shift_idx += shift_steps)
 800170e:	46c3      	mov	fp, r8
 8001710:	46c1      	mov	r9, r8
                int32_t ker_x_start = MAX(0, -(base_idx_x-(dilation_x-1))/dilation_x);
 8001712:	9317      	str	r3, [sp, #92]	; 0x5c
    for (i = 0, shift_idx = 0; i < ch_im_out; i++, shift_idx += shift_steps)
 8001714:	45ca      	cmp	sl, r9
 8001716:	dc02      	bgt.n	800171e <local_groupconvolve_HWC_q7_nonsquare+0xae>
                }
                Im_out[i + j * im_out_y_dec + k * ch_im_out] = (q7_t)__NNOM_SSAT((conv_out >> out_shift[shift_idx]), 8);
            }
        }
    }
}
 8001718:	b02d      	add	sp, #180	; 0xb4
 800171a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint16_t base_channel = group * channel_by_group;
 800171e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8001720:	9914      	ldr	r1, [sp, #80]	; 0x50
        uint16_t group = i/filter_by_group;
 8001722:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8001724:	fbb9 f3f3 	udiv	r3, r9, r3
 8001728:	440a      	add	r2, r1
 800172a:	9200      	str	r2, [sp, #0]
        for (j = 0; j < dim_im_out_y; j++)
 800172c:	2200      	movs	r2, #0
 800172e:	9201      	str	r2, [sp, #4]
 8001730:	9203      	str	r2, [sp, #12]
 8001732:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8001734:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        uint16_t base_channel = group * channel_by_group;
 8001738:	fb13 f30e 	smulbb	r3, r3, lr
        for (j = 0; j < dim_im_out_y; j++)
 800173c:	fa12 f383 	uxtah	r3, r2, r3
 8001740:	932a      	str	r3, [sp, #168]	; 0xa8
 8001742:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8001744:	9a03      	ldr	r2, [sp, #12]
 8001746:	4293      	cmp	r3, r2
 8001748:	dc06      	bgt.n	8001758 <local_groupconvolve_HWC_q7_nonsquare+0xe8>
    for (i = 0, shift_idx = 0; i < ch_im_out; i++, shift_idx += shift_steps)
 800174a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800174c:	449b      	add	fp, r3
 800174e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8001750:	f109 0901 	add.w	r9, r9, #1
 8001754:	4498      	add	r8, r3
 8001756:	e7dd      	b.n	8001714 <local_groupconvolve_HWC_q7_nonsquare+0xa4>
            int32_t ker_y_start = MAX(0, -(base_idx_y-(dilation_y-1))/dilation_y);
 8001758:	9b00      	ldr	r3, [sp, #0]
            int32_t ker_y_end = MIN(dim_kernel_y, (dim_im_in_y - base_idx_y + (dilation_y-1))/dilation_y);
 800175a:	9a00      	ldr	r2, [sp, #0]
            int32_t ker_y_start = MAX(0, -(base_idx_y-(dilation_y-1))/dilation_y);
 800175c:	fb93 f7f6 	sdiv	r7, r3, r6
            int32_t ker_y_end = MIN(dim_kernel_y, (dim_im_in_y - base_idx_y + (dilation_y-1))/dilation_y);
 8001760:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001762:	4413      	add	r3, r2
 8001764:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001766:	fb93 f3f6 	sdiv	r3, r3, r6
 800176a:	4293      	cmp	r3, r2
 800176c:	bfa8      	it	ge
 800176e:	4613      	movge	r3, r2
 8001770:	931f      	str	r3, [sp, #124]	; 0x7c
 8001772:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8001774:	9b01      	ldr	r3, [sp, #4]
            int32_t ker_y_start = MAX(0, -(base_idx_y-(dilation_y-1))/dilation_y);
 8001776:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
            for (k = 0; k < dim_im_out_x; k++)
 800177a:	1a9b      	subs	r3, r3, r2
 800177c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800177e:	fb07 3306 	mla	r3, r7, r6, r3
 8001782:	4353      	muls	r3, r2
 8001784:	9323      	str	r3, [sp, #140]	; 0x8c
 8001786:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                Im_out[i + j * im_out_y_dec + k * ch_im_out] = (q7_t)__NNOM_SSAT((conv_out >> out_shift[shift_idx]), 8);
 8001788:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800178a:	fb07 8303 	mla	r3, r7, r3, r8
 800178e:	9324      	str	r3, [sp, #144]	; 0x90
 8001790:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8001792:	4413      	add	r3, r2
            for (k = 0; k < dim_im_out_x; k++)
 8001794:	2400      	movs	r4, #0
                Im_out[i + j * im_out_y_dec + k * ch_im_out] = (q7_t)__NNOM_SSAT((conv_out >> out_shift[shift_idx]), 8);
 8001796:	9329      	str	r3, [sp, #164]	; 0xa4
            for (k = 0; k < dim_im_out_x; k++)
 8001798:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800179a:	42a3      	cmp	r3, r4
 800179c:	dc0f      	bgt.n	80017be <local_groupconvolve_HWC_q7_nonsquare+0x14e>
        for (j = 0; j < dim_im_out_y; j++)
 800179e:	9b03      	ldr	r3, [sp, #12]
 80017a0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80017a2:	3301      	adds	r3, #1
 80017a4:	9303      	str	r3, [sp, #12]
 80017a6:	9b00      	ldr	r3, [sp, #0]
 80017a8:	1a9b      	subs	r3, r3, r2
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80017ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80017b0:	4413      	add	r3, r2
 80017b2:	930a      	str	r3, [sp, #40]	; 0x28
 80017b4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80017b6:	9b01      	ldr	r3, [sp, #4]
 80017b8:	4413      	add	r3, r2
 80017ba:	9301      	str	r3, [sp, #4]
 80017bc:	e7c1      	b.n	8001742 <local_groupconvolve_HWC_q7_nonsquare+0xd2>
				int32_t base_idx_x = stride_x * k - padding_x;
 80017be:	9b27      	ldr	r3, [sp, #156]	; 0x9c
                int32_t ker_x_start = MAX(0, -(base_idx_x-(dilation_x-1))/dilation_x);
 80017c0:	9917      	ldr	r1, [sp, #92]	; 0x5c
				int32_t base_idx_x = stride_x * k - padding_x;
 80017c2:	fb04 f203 	mul.w	r2, r4, r3
 80017c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80017c8:	1ad3      	subs	r3, r2, r3
                int32_t ker_x_start = MAX(0, -(base_idx_x-(dilation_x-1))/dilation_x);
 80017ca:	1ac9      	subs	r1, r1, r3
 80017cc:	fb91 fcf5 	sdiv	ip, r1, r5
                int32_t ker_x_end = MIN(dim_kernel_x, (dim_im_in_x - base_idx_x + (dilation_x-1))/dilation_x);
 80017d0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80017d2:	1acb      	subs	r3, r1, r3
 80017d4:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80017d6:	440b      	add	r3, r1
 80017d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80017da:	fb93 f3f5 	sdiv	r3, r3, r5
 80017de:	428b      	cmp	r3, r1
 80017e0:	bfa8      	it	ge
 80017e2:	460b      	movge	r3, r1
 80017e4:	9320      	str	r3, [sp, #128]	; 0x80
                    conv_out = ((q31_t)(bias[i]) << bias_shift[shift_idx]) + NNOM_ROUND(out_shift[shift_idx]);
 80017e6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80017e8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80017ec:	9310      	str	r3, [sp, #64]	; 0x40
 80017ee:	2101      	movs	r1, #1
 80017f0:	fa01 f303 	lsl.w	r3, r1, r3
 80017f4:	410b      	asrs	r3, r1
                if(bias)
 80017f6:	9941      	ldr	r1, [sp, #260]	; 0x104
                int32_t ker_x_start = MAX(0, -(base_idx_x-(dilation_x-1))/dilation_x);
 80017f8:	ea2c 7cec 	bic.w	ip, ip, ip, asr #31
                if(bias)
 80017fc:	b139      	cbz	r1, 800180e <local_groupconvolve_HWC_q7_nonsquare+0x19e>
                    conv_out = ((q31_t)(bias[i]) << bias_shift[shift_idx]) + NNOM_ROUND(out_shift[shift_idx]);
 80017fe:	f911 0009 	ldrsb.w	r0, [r1, r9]
 8001802:	9942      	ldr	r1, [sp, #264]	; 0x108
 8001804:	f851 102b 	ldr.w	r1, [r1, fp, lsl #2]
 8001808:	fa00 f101 	lsl.w	r1, r0, r1
 800180c:	440b      	add	r3, r1
 800180e:	9913      	ldr	r1, [sp, #76]	; 0x4c
                    for (n = ker_x_start; n < ker_x_end; n++)
 8001810:	9705      	str	r7, [sp, #20]
 8001812:	fb0c 2205 	mla	r2, ip, r5, r2
 8001816:	1a52      	subs	r2, r2, r1
 8001818:	9902      	ldr	r1, [sp, #8]
 800181a:	434a      	muls	r2, r1
 800181c:	9219      	str	r2, [sp, #100]	; 0x64
 800181e:	fb0e f20c 	mul.w	r2, lr, ip
 8001822:	921b      	str	r2, [sp, #108]	; 0x6c
 8001824:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8001826:	9209      	str	r2, [sp, #36]	; 0x24
 8001828:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800182a:	9208      	str	r2, [sp, #32]
 800182c:	e022      	b.n	8001874 <local_groupconvolve_HWC_q7_nonsquare+0x204>
                        for (l = 0; l < channel_by_group; l++)
 800182e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8001830:	9907      	ldr	r1, [sp, #28]
 8001832:	440a      	add	r2, r1
 8001834:	920f      	str	r2, [sp, #60]	; 0x3c
 8001836:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8001838:	4402      	add	r2, r0
 800183a:	920e      	str	r2, [sp, #56]	; 0x38
 800183c:	2200      	movs	r2, #0
 800183e:	9204      	str	r2, [sp, #16]
 8001840:	9a04      	ldr	r2, [sp, #16]
 8001842:	4596      	cmp	lr, r2
 8001844:	dc24      	bgt.n	8001890 <local_groupconvolve_HWC_q7_nonsquare+0x220>
                    for (n = ker_x_start; n < ker_x_end; n++)
 8001846:	9a06      	ldr	r2, [sp, #24]
 8001848:	9921      	ldr	r1, [sp, #132]	; 0x84
 800184a:	3201      	adds	r2, #1
 800184c:	9206      	str	r2, [sp, #24]
 800184e:	9a07      	ldr	r2, [sp, #28]
 8001850:	440a      	add	r2, r1
 8001852:	9207      	str	r2, [sp, #28]
 8001854:	4470      	add	r0, lr
 8001856:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8001858:	9906      	ldr	r1, [sp, #24]
 800185a:	4291      	cmp	r1, r2
 800185c:	dbe7      	blt.n	800182e <local_groupconvolve_HWC_q7_nonsquare+0x1be>
                for (m = ker_y_start; m < ker_y_end; m++)
 800185e:	9a05      	ldr	r2, [sp, #20]
 8001860:	9922      	ldr	r1, [sp, #136]	; 0x88
 8001862:	3201      	adds	r2, #1
 8001864:	9205      	str	r2, [sp, #20]
 8001866:	9a08      	ldr	r2, [sp, #32]
 8001868:	440a      	add	r2, r1
 800186a:	9208      	str	r2, [sp, #32]
 800186c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800186e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001870:	4411      	add	r1, r2
 8001872:	9109      	str	r1, [sp, #36]	; 0x24
 8001874:	9a05      	ldr	r2, [sp, #20]
 8001876:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8001878:	428a      	cmp	r2, r1
 800187a:	da18      	bge.n	80018ae <local_groupconvolve_HWC_q7_nonsquare+0x23e>
 800187c:	9908      	ldr	r1, [sp, #32]
 800187e:	9a19      	ldr	r2, [sp, #100]	; 0x64
                    for (n = ker_x_start; n < ker_x_end; n++)
 8001880:	f8cd c018 	str.w	ip, [sp, #24]
 8001884:	440a      	add	r2, r1
 8001886:	9207      	str	r2, [sp, #28]
 8001888:	9909      	ldr	r1, [sp, #36]	; 0x24
 800188a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800188c:	1850      	adds	r0, r2, r1
 800188e:	e7e2      	b.n	8001856 <local_groupconvolve_HWC_q7_nonsquare+0x1e6>
                            conv_out += Im_in[in_pix_loc + base_channel + l] * wt[wt_loc + l];
 8001890:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8001892:	f912 1b01 	ldrsb.w	r1, [r2], #1
 8001896:	920f      	str	r2, [sp, #60]	; 0x3c
 8001898:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800189a:	911a      	str	r1, [sp, #104]	; 0x68
 800189c:	f912 1b01 	ldrsb.w	r1, [r2], #1
 80018a0:	920e      	str	r2, [sp, #56]	; 0x38
 80018a2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80018a4:	fb12 3301 	smlabb	r3, r2, r1, r3
                        for (l = 0; l < channel_by_group; l++)
 80018a8:	9a04      	ldr	r2, [sp, #16]
 80018aa:	3201      	adds	r2, #1
 80018ac:	e7c7      	b.n	800183e <local_groupconvolve_HWC_q7_nonsquare+0x1ce>
                Im_out[i + j * im_out_y_dec + k * ch_im_out] = (q7_t)__NNOM_SSAT((conv_out >> out_shift[shift_idx]), 8);
 80018ae:	9910      	ldr	r1, [sp, #64]	; 0x40
 80018b0:	410b      	asrs	r3, r1
 80018b2:	2b7f      	cmp	r3, #127	; 0x7f
 80018b4:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 80018b8:	bfa8      	it	ge
 80018ba:	237f      	movge	r3, #127	; 0x7f
 80018bc:	428b      	cmp	r3, r1
 80018be:	fb04 f20a 	mul.w	r2, r4, sl
 80018c2:	bfb8      	it	lt
 80018c4:	460b      	movlt	r3, r1
 80018c6:	9929      	ldr	r1, [sp, #164]	; 0xa4
            for (k = 0; k < dim_im_out_x; k++)
 80018c8:	3401      	adds	r4, #1
                Im_out[i + j * im_out_y_dec + k * ch_im_out] = (q7_t)__NNOM_SSAT((conv_out >> out_shift[shift_idx]), 8);
 80018ca:	548b      	strb	r3, [r1, r2]
            for (k = 0; k < dim_im_out_x; k++)
 80018cc:	e764      	b.n	8001798 <local_groupconvolve_HWC_q7_nonsquare+0x128>

080018ce <model_active>:

// This api will merge activation to layer's actail to avoid the extra layer for activation
static nnom_layer_t *model_active(nnom_activation_t *act, nnom_layer_t *target)
{
	// simple and easy
	target->actail = act;
 80018ce:	6148      	str	r0, [r1, #20]
	return target;
}
 80018d0:	4608      	mov	r0, r1
 80018d2:	4770      	bx	lr

080018d4 <allocate_block>:
	return;
}

// find an available memory block.
static nnom_mem_block_t *allocate_block(nnom_mem_block_t *list)
{
 80018d4:	b508      	push	{r3, lr}
 80018d6:	f100 0360 	add.w	r3, r0, #96	; 0x60
	nnom_mem_block_t *free = NULL;
	uint32_t idx;

	for (idx = 0; idx < NNOM_BLOCK_NUM; idx++)
	{
		if (list[idx].owners == 0)
 80018da:	7a02      	ldrb	r2, [r0, #8]
 80018dc:	b132      	cbz	r2, 80018ec <allocate_block+0x18>
	for (idx = 0; idx < NNOM_BLOCK_NUM; idx++)
 80018de:	300c      	adds	r0, #12
 80018e0:	4298      	cmp	r0, r3
 80018e2:	d1fa      	bne.n	80018da <allocate_block+0x6>
			break;
	}
    if(idx == NNOM_BLOCK_NUM)
    {
        NNOM_LOG("\nERROR! No enough memory block for parallel buffers, please increase the 'NNOM_BLOCK_NUM' in 'nnom_port.h'\n");
 80018e4:	4802      	ldr	r0, [pc, #8]	; (80018f0 <allocate_block+0x1c>)
 80018e6:	f001 f899 	bl	8002a1c <puts>
        return NULL;
 80018ea:	2000      	movs	r0, #0
    }

	free = &list[idx];
	return free;
}
 80018ec:	bd08      	pop	{r3, pc}
 80018ee:	bf00      	nop
 80018f0:	08003cb8 	.word	0x08003cb8

080018f4 <print_memory_block_info>:
	// memory 
	NNOM_LOG("(%6d,%6d,%6d)", (uint32_t)in_size, (uint32_t)out_size,(uint32_t) compsize);
}

static void print_memory_block_info(nnom_mem_block_t *block_pool)
{
 80018f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018f6:	4605      	mov	r5, r0
	// show the memory blocks's lifetime (number of owners)
	NNOM_LOG("   ");
 80018f8:	480f      	ldr	r0, [pc, #60]	; (8001938 <print_memory_block_info+0x44>)
		if (i % 4 == 0)
			NNOM_LOG(" ");
		if (block_pool[i].owners)
			NNOM_LOG("%d ", block_pool[i].owners);
		else
			NNOM_LOG("- ");
 80018fa:	4e10      	ldr	r6, [pc, #64]	; (800193c <print_memory_block_info+0x48>)
			NNOM_LOG("%d ", block_pool[i].owners);
 80018fc:	4f10      	ldr	r7, [pc, #64]	; (8001940 <print_memory_block_info+0x4c>)
	NNOM_LOG("   ");
 80018fe:	f000 fff1 	bl	80028e4 <iprintf>
	for (int i = 0; i < NNOM_BLOCK_NUM; i++)
 8001902:	2400      	movs	r4, #0
		if (i % 4 == 0)
 8001904:	07a3      	lsls	r3, r4, #30
 8001906:	d102      	bne.n	800190e <print_memory_block_info+0x1a>
			NNOM_LOG(" ");
 8001908:	2020      	movs	r0, #32
 800190a:	f001 f803 	bl	8002914 <putchar>
		if (block_pool[i].owners)
 800190e:	230c      	movs	r3, #12
 8001910:	f105 0208 	add.w	r2, r5, #8
 8001914:	4363      	muls	r3, r4
 8001916:	5cd1      	ldrb	r1, [r2, r3]
 8001918:	b151      	cbz	r1, 8001930 <print_memory_block_info+0x3c>
			NNOM_LOG("%d ", block_pool[i].owners);
 800191a:	4638      	mov	r0, r7
 800191c:	f000 ffe2 	bl	80028e4 <iprintf>
	for (int i = 0; i < NNOM_BLOCK_NUM; i++)
 8001920:	3401      	adds	r4, #1
 8001922:	2c08      	cmp	r4, #8
 8001924:	d1ee      	bne.n	8001904 <print_memory_block_info+0x10>
	}
	NNOM_LOG("\n");
}
 8001926:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	NNOM_LOG("\n");
 800192a:	200a      	movs	r0, #10
 800192c:	f000 bff2 	b.w	8002914 <putchar>
			NNOM_LOG("- ");
 8001930:	4630      	mov	r0, r6
 8001932:	f000 ffd7 	bl	80028e4 <iprintf>
 8001936:	e7f3      	b.n	8001920 <print_memory_block_info+0x2c>
 8001938:	08003db0 	.word	0x08003db0
 800193c:	08003d9f 	.word	0x08003d9f
 8001940:	08003d23 	.word	0x08003d23

08001944 <find_last>:
	if (layer == NULL)
 8001944:	b908      	cbnz	r0, 800194a <find_last+0x6>
 8001946:	4770      	bx	lr
		layer = layer->out->hook.io->owner;
 8001948:	6958      	ldr	r0, [r3, #20]
	while (layer->out->hook.io != NULL)
 800194a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1fa      	bne.n	8001948 <find_last+0x4>
}
 8001952:	4770      	bx	lr

08001954 <model_add>:
{
 8001954:	b508      	push	{r3, lr}
 8001956:	4602      	mov	r2, r0
	if (layer == NULL)
 8001958:	b929      	cbnz	r1, 8001966 <model_add+0x12>
		NNOM_LOG("Error: added a NULL layer, could be no memory while creating layer.\n");
 800195a:	4809      	ldr	r0, [pc, #36]	; (8001980 <model_add+0x2c>)
 800195c:	f001 f85e 	bl	8002a1c <puts>
		return NN_NO_MEMORY;
 8001960:	f06f 0006 	mvn.w	r0, #6
}
 8001964:	bd08      	pop	{r3, pc}
	last = find_last(model->head);
 8001966:	6800      	ldr	r0, [r0, #0]
 8001968:	f7ff ffec 	bl	8001944 <find_last>
	if (last == NULL)
 800196c:	b908      	cbnz	r0, 8001972 <model_add+0x1e>
		model->head = curr;
 800196e:	6011      	str	r1, [r2, #0]
 8001970:	e7f8      	b.n	8001964 <model_add+0x10>
		last->out->hook.io = curr->in; // hook IO
 8001972:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001974:	6a0b      	ldr	r3, [r1, #32]
 8001976:	6013      	str	r3, [r2, #0]
	return NN_SUCCESS;
 8001978:	2000      	movs	r0, #0
		curr->in->hook.io = last->out;
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	e7f2      	b.n	8001964 <model_add+0x10>
 800197e:	bf00      	nop
 8001980:	08003d27 	.word	0x08003d27

08001984 <io_mem_size>:
{
 8001984:	b538      	push	{r3, r4, r5, lr}
	if (io != NULL)
 8001986:	4604      	mov	r4, r0
 8001988:	b148      	cbz	r0, 800199e <io_mem_size+0x1a>
	size_t size = 0;
 800198a:	2500      	movs	r5, #0
			size += tensor_size(io->tensor);
 800198c:	68e0      	ldr	r0, [r4, #12]
 800198e:	f000 fbc9 	bl	8002124 <tensor_size>
			io = io->aux;
 8001992:	68a4      	ldr	r4, [r4, #8]
			size += tensor_size(io->tensor);
 8001994:	4405      	add	r5, r0
		while (io)
 8001996:	2c00      	cmp	r4, #0
 8001998:	d1f8      	bne.n	800198c <io_mem_size+0x8>
}
 800199a:	4628      	mov	r0, r5
 800199c:	bd38      	pop	{r3, r4, r5, pc}
	size_t size = 0;
 800199e:	4605      	mov	r5, r0
	return size;
 80019a0:	e7fb      	b.n	800199a <io_mem_size+0x16>

080019a2 <release_comp_mem.isra.0>:
	if (layer->comp != NULL)
 80019a2:	b150      	cbz	r0, 80019ba <release_comp_mem.isra.0+0x18>
		release_block(layer->comp->mem);
 80019a4:	6802      	ldr	r2, [r0, #0]
	if (block->owners > 0)
 80019a6:	7a13      	ldrb	r3, [r2, #8]
 80019a8:	b913      	cbnz	r3, 80019b0 <release_comp_mem.isra.0+0xe>
		block->state = NNOM_BUF_EMPTY;
 80019aa:	2300      	movs	r3, #0
 80019ac:	7253      	strb	r3, [r2, #9]
 80019ae:	4770      	bx	lr
		block->owners -= 1;
 80019b0:	3b01      	subs	r3, #1
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	7213      	strb	r3, [r2, #8]
	if (block->owners == 0)
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0f7      	beq.n	80019aa <release_comp_mem.isra.0+0x8>
}
 80019ba:	4770      	bx	lr

080019bc <release_input_mem.isra.0>:
		block->state = NNOM_BUF_EMPTY;
 80019bc:	2100      	movs	r1, #0
	while (in != NULL)
 80019be:	b900      	cbnz	r0, 80019c2 <release_input_mem.isra.0+0x6>
}
 80019c0:	4770      	bx	lr
		release_block(in->mem);
 80019c2:	6902      	ldr	r2, [r0, #16]
	if (block->owners > 0)
 80019c4:	7a13      	ldrb	r3, [r2, #8]
 80019c6:	b913      	cbnz	r3, 80019ce <release_input_mem.isra.0+0x12>
		block->state = NNOM_BUF_EMPTY;
 80019c8:	7251      	strb	r1, [r2, #9]
		in = in->aux;
 80019ca:	6880      	ldr	r0, [r0, #8]
 80019cc:	e7f7      	b.n	80019be <release_input_mem.isra.0+0x2>
		block->owners -= 1;
 80019ce:	3b01      	subs	r3, #1
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	7213      	strb	r3, [r2, #8]
	if (block->owners == 0)
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1f8      	bne.n	80019ca <release_input_mem.isra.0+0xe>
 80019d8:	e7f6      	b.n	80019c8 <release_input_mem.isra.0+0xc>

080019da <nnom_alignto>:
	if (value % alignment == 0)
 80019da:	fbb0 f3f1 	udiv	r3, r0, r1
 80019de:	fb01 0313 	mls	r3, r1, r3, r0
 80019e2:	b10b      	cbz	r3, 80019e8 <nnom_alignto+0xe>
	value += alignment - value % alignment;
 80019e4:	4408      	add	r0, r1
 80019e6:	1ac0      	subs	r0, r0, r3
}
 80019e8:	4770      	bx	lr
	...

080019ec <nnom_mem>:
{
 80019ec:	b538      	push	{r3, r4, r5, lr}
	size = nnom_alignto(size, NNOM_ALIGN);
 80019ee:	2104      	movs	r1, #4
 80019f0:	f7ff fff3 	bl	80019da <nnom_alignto>
 80019f4:	4605      	mov	r5, r0
	void *p = nnom_malloc(size);
 80019f6:	f000 fe77 	bl	80026e8 <malloc>
	if (p)
 80019fa:	4604      	mov	r4, r0
 80019fc:	b138      	cbz	r0, 8001a0e <nnom_mem+0x22>
		nnom_memory_taken += size; //test
 80019fe:	4a05      	ldr	r2, [pc, #20]	; (8001a14 <nnom_mem+0x28>)
 8001a00:	6813      	ldr	r3, [r2, #0]
 8001a02:	442b      	add	r3, r5
 8001a04:	6013      	str	r3, [r2, #0]
		nnom_memset(p, 0, size);
 8001a06:	2100      	movs	r1, #0
 8001a08:	462a      	mov	r2, r5
 8001a0a:	f000 fe83 	bl	8002714 <memset>
}
 8001a0e:	4620      	mov	r0, r4
 8001a10:	bd38      	pop	{r3, r4, r5, pc}
 8001a12:	bf00      	nop
 8001a14:	2000c1a8 	.word	0x2000c1a8

08001a18 <model_hook>:
{
 8001a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a1a:	4606      	mov	r6, r0
	if (last == NULL || curr == NULL)
 8001a1c:	460d      	mov	r5, r1
 8001a1e:	b311      	cbz	r1, 8001a66 <model_hook+0x4e>
 8001a20:	b1f8      	cbz	r0, 8001a62 <model_hook+0x4a>
	last_io_hook = allocate_hook(last->out);
 8001a22:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	if (io == NULL)
 8001a24:	b15c      	cbz	r4, 8001a3e <model_hook+0x26>
	if (hook->io == NULL)
 8001a26:	6822      	ldr	r2, [r4, #0]
	hook = &io->hook;
 8001a28:	4623      	mov	r3, r4
	if (hook->io == NULL)
 8001a2a:	b142      	cbz	r2, 8001a3e <model_hook+0x26>
		while (hook->next != NULL)
 8001a2c:	461f      	mov	r7, r3
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1fb      	bne.n	8001a2c <model_hook+0x14>
		hook->next = nnom_mem(sizeof(nnom_layer_hook_t));
 8001a34:	2008      	movs	r0, #8
 8001a36:	f7ff ffd9 	bl	80019ec <nnom_mem>
 8001a3a:	4604      	mov	r4, r0
 8001a3c:	6078      	str	r0, [r7, #4]
	curr_in_io = allocate_io(curr->in);
 8001a3e:	6a30      	ldr	r0, [r6, #32]
	if (io == NULL)
 8001a40:	b198      	cbz	r0, 8001a6a <model_hook+0x52>
	if (io->hook.io == NULL)
 8001a42:	6802      	ldr	r2, [r0, #0]
 8001a44:	b152      	cbz	r2, 8001a5c <model_hook+0x44>
		while (io->aux != NULL)
 8001a46:	4607      	mov	r7, r0
 8001a48:	6880      	ldr	r0, [r0, #8]
 8001a4a:	2800      	cmp	r0, #0
 8001a4c:	d1fb      	bne.n	8001a46 <model_hook+0x2e>
		io->aux = nnom_mem(sizeof(nnom_layer_io_t));
 8001a4e:	201c      	movs	r0, #28
 8001a50:	f7ff ffcc 	bl	80019ec <nnom_mem>
 8001a54:	60b8      	str	r0, [r7, #8]
		if (io->aux == NULL)
 8001a56:	b140      	cbz	r0, 8001a6a <model_hook+0x52>
		io->aux->owner = io->owner;
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	6142      	str	r2, [r0, #20]
	curr_in_io->hook.io = last->out;
 8001a5c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	last_io_hook->io = curr_in_io;
 8001a5e:	6020      	str	r0, [r4, #0]
	curr_in_io->hook.io = last->out;
 8001a60:	6002      	str	r2, [r0, #0]
}
 8001a62:	4630      	mov	r0, r6
 8001a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
 8001a66:	460e      	mov	r6, r1
 8001a68:	e7fb      	b.n	8001a62 <model_hook+0x4a>
	last_io_hook->io = curr_in_io;
 8001a6a:	2300      	movs	r3, #0
	curr_in_io->hook.io = last->out;
 8001a6c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	last_io_hook->io = curr_in_io;
 8001a6e:	6023      	str	r3, [r4, #0]
	curr_in_io->hook.io = last->out;
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	deff      	udf	#255	; 0xff

08001a74 <model_mergex>:
{
 8001a74:	b40e      	push	{r1, r2, r3}
 8001a76:	b577      	push	{r0, r1, r2, r4, r5, r6, lr}
 8001a78:	9e07      	ldr	r6, [sp, #28]
	if (method == NULL)
 8001a7a:	4604      	mov	r4, r0
 8001a7c:	b120      	cbz	r0, 8001a88 <model_mergex+0x14>
	va_start(valist, num);
 8001a7e:	ab08      	add	r3, sp, #32
 8001a80:	9301      	str	r3, [sp, #4]
	for (int i = 0; i < num; i++)
 8001a82:	2500      	movs	r5, #0
 8001a84:	42b5      	cmp	r5, r6
 8001a86:	db05      	blt.n	8001a94 <model_mergex+0x20>
}
 8001a88:	4620      	mov	r0, r4
 8001a8a:	b003      	add	sp, #12
 8001a8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001a90:	b003      	add	sp, #12
 8001a92:	4770      	bx	lr
		layer_in = va_arg(valist, nnom_layer_t *);
 8001a94:	9b01      	ldr	r3, [sp, #4]
		model_hook(method, layer_in);
 8001a96:	4620      	mov	r0, r4
		layer_in = va_arg(valist, nnom_layer_t *);
 8001a98:	1d1a      	adds	r2, r3, #4
		model_hook(method, layer_in);
 8001a9a:	6819      	ldr	r1, [r3, #0]
		layer_in = va_arg(valist, nnom_layer_t *);
 8001a9c:	9201      	str	r2, [sp, #4]
	for (int i = 0; i < num; i++)
 8001a9e:	3501      	adds	r5, #1
		model_hook(method, layer_in);
 8001aa0:	f7ff ffba 	bl	8001a18 <model_hook>
	for (int i = 0; i < num; i++)
 8001aa4:	e7ee      	b.n	8001a84 <model_mergex+0x10>

08001aa6 <model_merge>:
{
 8001aa6:	4613      	mov	r3, r2
	return model_mergex(method, 2, in1, in2);
 8001aa8:	460a      	mov	r2, r1
 8001aaa:	2102      	movs	r1, #2
 8001aac:	f7ff bfe2 	b.w	8001a74 <model_mergex>

08001ab0 <new_model>:
{
 8001ab0:	b510      	push	{r4, lr}
	if (m == NULL)
 8001ab2:	4604      	mov	r4, r0
 8001ab4:	b990      	cbnz	r0, 8001adc <new_model+0x2c>
		m = nnom_mem(sizeof(nnom_model_t));
 8001ab6:	2088      	movs	r0, #136	; 0x88
 8001ab8:	f7ff ff98 	bl	80019ec <nnom_mem>
		m->is_allocated = true;
 8001abc:	2301      	movs	r3, #1
		m = nnom_mem(sizeof(nnom_model_t));
 8001abe:	4604      	mov	r4, r0
		m->is_allocated = true;
 8001ac0:	f880 3085 	strb.w	r3, [r0, #133]	; 0x85
	m->add = model_add;
 8001ac4:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <new_model+0x38>)
 8001ac6:	60a3      	str	r3, [r4, #8]
	m->hook = model_hook;
 8001ac8:	4b08      	ldr	r3, [pc, #32]	; (8001aec <new_model+0x3c>)
 8001aca:	60e3      	str	r3, [r4, #12]
	m->merge = model_merge;
 8001acc:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <new_model+0x40>)
 8001ace:	6123      	str	r3, [r4, #16]
	m->mergex = model_mergex;
 8001ad0:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <new_model+0x44>)
 8001ad2:	6163      	str	r3, [r4, #20]
	m->active = model_active;
 8001ad4:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <new_model+0x48>)
 8001ad6:	61a3      	str	r3, [r4, #24]
}
 8001ad8:	4620      	mov	r0, r4
 8001ada:	bd10      	pop	{r4, pc}
		nnom_memset(m, 0, sizeof(nnom_model_t));
 8001adc:	2288      	movs	r2, #136	; 0x88
 8001ade:	2100      	movs	r1, #0
 8001ae0:	f000 fe18 	bl	8002714 <memset>
		m->is_allocated = false;
 8001ae4:	e7ee      	b.n	8001ac4 <new_model+0x14>
 8001ae6:	bf00      	nop
 8001ae8:	08001955 	.word	0x08001955
 8001aec:	08001a19 	.word	0x08001a19
 8001af0:	08001aa7 	.word	0x08001aa7
 8001af4:	08001a75 	.word	0x08001a75
 8001af8:	080018cf 	.word	0x080018cf

08001afc <nnom_hook_length>:
	if (hook == NULL)
 8001afc:	b130      	cbz	r0, 8001b0c <nnom_hook_length+0x10>
	size_t num = 0;
 8001afe:	2300      	movs	r3, #0
		hook = hook->next;
 8001b00:	6840      	ldr	r0, [r0, #4]
		num++;
 8001b02:	3301      	adds	r3, #1
	while (hook != NULL)
 8001b04:	2800      	cmp	r0, #0
 8001b06:	d1fb      	bne.n	8001b00 <nnom_hook_length+0x4>
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	4770      	bx	lr
		return 0;
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	e7fb      	b.n	8001b08 <nnom_hook_length+0xc>

08001b10 <compile_layers>:
// This function will return when
// 	1) if the layer has multiple input but not all of them are filled by last layers. returns NN_MORE_TODO
//	2) if all the output hooked are nested called. return NN_SUCCESS
//	3) if the layer is output layer. return NN_SUCCESS
nnom_status_t compile_layers(nnom_layer_t* first, nnom_layer_t *curr, nnom_mem_block_t *block_pool, uint32_t *layer_count)
{
 8001b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b14:	ed2d 8b02 	vpush	{d8}
 8001b18:	b085      	sub	sp, #20
 8001b1a:	4616      	mov	r6, r2
	nnom_layer_hook_t *hook;

	nnom_mem_block_t *in_blk;
	nnom_mem_block_t *out_blk;
	
	uint32_t local_layer_count = 1;
 8001b1c:	2201      	movs	r2, #1
{
 8001b1e:	4680      	mov	r8, r0
 8001b20:	460c      	mov	r4, r1
	uint32_t local_layer_count = 1;
 8001b22:	9203      	str	r2, [sp, #12]
	
	if(layer_count == NULL)
 8001b24:	461f      	mov	r7, r3
 8001b26:	b903      	cbnz	r3, 8001b2a <compile_layers+0x1a>
		layer_count = &local_layer_count;
 8001b28:	af03      	add	r7, sp, #12
		NNOM_LOG("%3d.%02dG ", (uint32_t)(mac/(1000*1000*1000)), (uint32_t)(mac%(1000*1000*1000)/(10*1000*1000))); // xxx.xx G
 8001b2a:	f8df b34c 	ldr.w	fp, [pc, #844]	; 8001e78 <compile_layers+0x368>

	in = layer->in;
	out = layer->out;

	while (layer)
 8001b2e:	2c00      	cmp	r4, #0
 8001b30:	f000 80a9 	beq.w	8001c86 <compile_layers+0x176>
	{
		// check input
		in = layer->in;
 8001b34:	6a25      	ldr	r5, [r4, #32]

		// check if this layer is the input layer
		// the first layer has no input hooked, and the io is not initialized
		if (in->hook.io == NULL)
 8001b36:	682b      	ldr	r3, [r5, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d135      	bne.n	8001ba8 <compile_layers+0x98>
		{
			// if the input is not initalized
			if (in->mem == NULL)
 8001b3c:	692b      	ldr	r3, [r5, #16]
 8001b3e:	b9cb      	cbnz	r3, 8001b74 <compile_layers+0x64>
			{
				in_blk = allocate_block(block_pool);
 8001b40:	4630      	mov	r0, r6
 8001b42:	f7ff fec7 	bl	80018d4 <allocate_block>
				in_blk->owners += 1; // add 1
 8001b46:	7a03      	ldrb	r3, [r0, #8]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	7203      	strb	r3, [r0, #8]
				in_blk = allocate_block(block_pool);
 8001b4c:	4681      	mov	r9, r0
				mem_size = nnom_alignto(tensor_size(in->tensor), NNOM_ALIGN);
 8001b4e:	68e8      	ldr	r0, [r5, #12]
 8001b50:	f000 fae8 	bl	8002124 <tensor_size>
 8001b54:	2104      	movs	r1, #4
 8001b56:	f7ff ff40 	bl	80019da <nnom_alignto>
				in_blk->size = mem_size > in_blk->size ? mem_size : in_blk->size;
 8001b5a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001b5e:	4283      	cmp	r3, r0
 8001b60:	bf2c      	ite	cs
 8001b62:	f8c9 3004 	strcs.w	r3, [r9, #4]
 8001b66:	f8c9 0004 	strcc.w	r0, [r9, #4]
				// set the blk to the layer IO
				in->mem = in_blk;
				in->mem->state = NNOM_BUF_FILLED; //mark input buff filled
 8001b6a:	2301      	movs	r3, #1
				in->mem = in_blk;
 8001b6c:	f8c5 9010 	str.w	r9, [r5, #16]
				in->mem->state = NNOM_BUF_FILLED; //mark input buff filled
 8001b70:	f889 3009 	strb.w	r3, [r9, #9]
				in = in->aux;
			}
		}

		// if there are mutiple inputs, wait utill all blocks filled
		in = layer->in;
 8001b74:	6a23      	ldr	r3, [r4, #32]
		if (in != NULL && in->aux != NULL)
 8001b76:	b163      	cbz	r3, 8001b92 <compile_layers+0x82>
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	b152      	cbz	r2, 8001b92 <compile_layers+0x82>
		{
			while (in != NULL)
			{
				// if the mem (of its hooked output) is not allocated or is not filled. 
				// It not the time to run the layer yet, return and waits for next nested called. 
				if (in->mem == NULL || in->mem->state != NNOM_BUF_FILLED)
 8001b7c:	691a      	ldr	r2, [r3, #16]
 8001b7e:	2a00      	cmp	r2, #0
 8001b80:	f000 814a 	beq.w	8001e18 <compile_layers+0x308>
 8001b84:	7a52      	ldrb	r2, [r2, #9]
 8001b86:	2a01      	cmp	r2, #1
 8001b88:	f040 8146 	bne.w	8001e18 <compile_layers+0x308>
					return NN_MORE_TODO;
				in = in->aux;
 8001b8c:	689b      	ldr	r3, [r3, #8]
			while (in != NULL)
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1f4      	bne.n	8001b7c <compile_layers+0x6c>
		// 4. allocate output buffer for each output module. 
		// 5.1 if there is only one layer hooked to the output. we dont use nested call, but continue in this big while loop. 
		// 5.2 nested call the hooked output layers (if there are > 1 hooked to the output of this layer)

		// 1. calculate output shape while all inputs are filled
		layer->build(layer);
 8001b92:	68a3      	ldr	r3, [r4, #8]
 8001b94:	4620      	mov	r0, r4
 8001b96:	4798      	blx	r3
	if (start == curr)
 8001b98:	4544      	cmp	r4, r8
 8001b9a:	d00e      	beq.n	8001bba <compile_layers+0xaa>
 8001b9c:	4643      	mov	r3, r8
	while (layer->shortcut != NULL)
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	b943      	cbnz	r3, 8001bb6 <compile_layers+0xa6>
	layer->shortcut = curr;
 8001ba4:	6014      	str	r4, [r2, #0]
	return NN_SUCCESS;
 8001ba6:	e008      	b.n	8001bba <compile_layers+0xaa>
				in->mem = in->hook.io->mem;
 8001ba8:	682b      	ldr	r3, [r5, #0]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	612b      	str	r3, [r5, #16]
				in = in->aux;
 8001bae:	68ad      	ldr	r5, [r5, #8]
			while (in != NULL)
 8001bb0:	2d00      	cmp	r5, #0
 8001bb2:	d1f9      	bne.n	8001ba8 <compile_layers+0x98>
 8001bb4:	e7de      	b.n	8001b74 <compile_layers+0x64>
		if (curr == layer)
 8001bb6:	4294      	cmp	r4, r2
 8001bb8:	d1f1      	bne.n	8001b9e <compile_layers+0x8e>

		// 2. add to shortcut list. 
		layer_shortcut_add(first, layer);

		// 3. assign for computational buf
		if (layer->comp != NULL)
 8001bba:	6925      	ldr	r5, [r4, #16]
 8001bbc:	b19d      	cbz	r5, 8001be6 <compile_layers+0xd6>
		{
			layer->comp->mem = allocate_block(block_pool);
 8001bbe:	4630      	mov	r0, r6
 8001bc0:	f7ff fe88 	bl	80018d4 <allocate_block>
 8001bc4:	6028      	str	r0, [r5, #0]
			layer->comp->mem->owners += 1; // add us to buffer users
 8001bc6:	6920      	ldr	r0, [r4, #16]
 8001bc8:	6802      	ldr	r2, [r0, #0]
 8001bca:	7a13      	ldrb	r3, [r2, #8]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	7213      	strb	r3, [r2, #8]
			layer->comp->mem->state = NNOM_BUF_FILLED;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	7253      	strb	r3, [r2, #9]
			// record maximum mem size in this block
			mem_size = nnom_alignto(layer->comp->size, NNOM_ALIGN);
 8001bd4:	6840      	ldr	r0, [r0, #4]
 8001bd6:	2104      	movs	r1, #4
 8001bd8:	f7ff feff 	bl	80019da <nnom_alignto>
			layer->comp->mem->size =
				mem_size > layer->comp->mem->size ? mem_size : layer->comp->mem->size;
 8001bdc:	6853      	ldr	r3, [r2, #4]
			layer->comp->mem->size =
 8001bde:	4283      	cmp	r3, r0
 8001be0:	bf2c      	ite	cs
 8001be2:	6053      	strcs	r3, [r2, #4]
 8001be4:	6050      	strcc	r0, [r2, #4]
		}

		// print current layer's info. 
		// show names, activations, mem block size
		print_layer_info(layer, (*layer_count)++);
 8001be6:	6839      	ldr	r1, [r7, #0]
	size_t in_size = io_mem_size(layer->in);
 8001be8:	6a20      	ldr	r0, [r4, #32]
		print_layer_info(layer, (*layer_count)++);
 8001bea:	9101      	str	r1, [sp, #4]
 8001bec:	1c4b      	adds	r3, r1, #1
 8001bee:	603b      	str	r3, [r7, #0]
	size_t in_size = io_mem_size(layer->in);
 8001bf0:	f7ff fec8 	bl	8001984 <io_mem_size>
 8001bf4:	ee08 0a10 	vmov	s16, r0
	size_t out_size = io_mem_size(layer->out);
 8001bf8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001bfa:	f7ff fec3 	bl	8001984 <io_mem_size>
	if (layer->comp != NULL)
 8001bfe:	6923      	ldr	r3, [r4, #16]
	size_t mac = layer->stat.macc;
 8001c00:	6aa5      	ldr	r5, [r4, #40]	; 0x28
	if (layer->comp != NULL)
 8001c02:	9901      	ldr	r1, [sp, #4]
	size_t out_size = io_mem_size(layer->out);
 8001c04:	ee08 0a90 	vmov	s17, r0
	if (layer->comp != NULL)
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d042      	beq.n	8001c92 <compile_layers+0x182>
		compsize = layer->comp->size;
 8001c0c:	f8d3 9004 	ldr.w	r9, [r3, #4]
	if(layer->type != NNOM_RNN)
 8001c10:	7f23      	ldrb	r3, [r4, #28]
 8001c12:	2b0e      	cmp	r3, #14
 8001c14:	d03f      	beq.n	8001c96 <compile_layers+0x186>
		NNOM_LOG("#%-3d %-10s - ", layer_count, default_layer_names[layer->type]);
 8001c16:	4a82      	ldr	r2, [pc, #520]	; (8001e20 <compile_layers+0x310>)
 8001c18:	200c      	movs	r0, #12
 8001c1a:	fb00 2203 	mla	r2, r0, r3, r2
 8001c1e:	4881      	ldr	r0, [pc, #516]	; (8001e24 <compile_layers+0x314>)
 8001c20:	f000 fe60 	bl	80028e4 <iprintf>
	if (layer->actail != NULL)
 8001c24:	6963      	ldr	r3, [r4, #20]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d042      	beq.n	8001cb0 <compile_layers+0x1a0>
		NNOM_LOG("%-8s - ", default_activation_names[layer->actail->type]);
 8001c2a:	7a19      	ldrb	r1, [r3, #8]
 8001c2c:	4b7e      	ldr	r3, [pc, #504]	; (8001e28 <compile_layers+0x318>)
 8001c2e:	487f      	ldr	r0, [pc, #508]	; (8001e2c <compile_layers+0x31c>)
 8001c30:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8001c34:	f000 fe56 	bl	80028e4 <iprintf>
	NNOM_LOG("(");
 8001c38:	2028      	movs	r0, #40	; 0x28
 8001c3a:	f000 fe6b 	bl	8002914 <putchar>
	for (int i = 0; i < 3; i++)
 8001c3e:	f04f 0a00 	mov.w	sl, #0
		if (layer->out->tensor->num_dim > i)
 8001c42:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c44:	68d2      	ldr	r2, [r2, #12]
 8001c46:	7c51      	ldrb	r1, [r2, #17]
 8001c48:	4551      	cmp	r1, sl
 8001c4a:	dd35      	ble.n	8001cb8 <compile_layers+0x1a8>
			NNOM_LOG("%4d,", layer->out->tensor->dim[i]);
 8001c4c:	6852      	ldr	r2, [r2, #4]
 8001c4e:	4878      	ldr	r0, [pc, #480]	; (8001e30 <compile_layers+0x320>)
 8001c50:	f832 101a 	ldrh.w	r1, [r2, sl, lsl #1]
 8001c54:	f000 fe46 	bl	80028e4 <iprintf>
	for (int i = 0; i < 3; i++)
 8001c58:	f10a 0a01 	add.w	sl, sl, #1
 8001c5c:	f1ba 0f03 	cmp.w	sl, #3
 8001c60:	d1ef      	bne.n	8001c42 <compile_layers+0x132>
	NNOM_LOG(")  ");
 8001c62:	4874      	ldr	r0, [pc, #464]	; (8001e34 <compile_layers+0x324>)
 8001c64:	f000 fe3e 	bl	80028e4 <iprintf>
	if(mac == 0)
 8001c68:	bb55      	cbnz	r5, 8001cc0 <compile_layers+0x1b0>
		NNOM_LOG("        ");
 8001c6a:	4873      	ldr	r0, [pc, #460]	; (8001e38 <compile_layers+0x328>)
 8001c6c:	f000 fe3a 	bl	80028e4 <iprintf>
	NNOM_LOG("(%6d,%6d,%6d)", (uint32_t)in_size, (uint32_t)out_size,(uint32_t) compsize);
 8001c70:	ee18 2a90 	vmov	r2, s17
 8001c74:	ee18 1a10 	vmov	r1, s16
 8001c78:	4870      	ldr	r0, [pc, #448]	; (8001e3c <compile_layers+0x32c>)
 8001c7a:	464b      	mov	r3, r9
 8001c7c:	f000 fe32 	bl	80028e4 <iprintf>

		// 4. allocate output buffer for each output module. 
		// check output
		if (layer->out == NULL)
 8001c80:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001c82:	2d00      	cmp	r5, #0
 8001c84:	d147      	bne.n	8001d16 <compile_layers+0x206>
			return NN_SUCCESS;
 8001c86:	2000      	movs	r0, #0
		layer = layer->out->hook.io->owner;
	}

	// seems to be redundants
	return NN_SUCCESS;
}
 8001c88:	b005      	add	sp, #20
 8001c8a:	ecbd 8b02 	vpop	{d8}
 8001c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		compsize = 0;
 8001c92:	4699      	mov	r9, r3
 8001c94:	e7bc      	b.n	8001c10 <compile_layers+0x100>
		NNOM_LOG("#%-3d %-3s/", layer_count, default_layer_names[layer->type]);
 8001c96:	4a6a      	ldr	r2, [pc, #424]	; (8001e40 <compile_layers+0x330>)
 8001c98:	486a      	ldr	r0, [pc, #424]	; (8001e44 <compile_layers+0x334>)
 8001c9a:	f000 fe23 	bl	80028e4 <iprintf>
		NNOM_LOG("%-6s - ", default_cell_names[((nnom_rnn_layer_t*)layer)->cell->type]);
 8001c9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ca0:	4869      	ldr	r0, [pc, #420]	; (8001e48 <compile_layers+0x338>)
 8001ca2:	7d19      	ldrb	r1, [r3, #20]
 8001ca4:	4b69      	ldr	r3, [pc, #420]	; (8001e4c <compile_layers+0x33c>)
 8001ca6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8001caa:	f000 fe1b 	bl	80028e4 <iprintf>
 8001cae:	e7b9      	b.n	8001c24 <compile_layers+0x114>
		NNOM_LOG("         - ");
 8001cb0:	4867      	ldr	r0, [pc, #412]	; (8001e50 <compile_layers+0x340>)
 8001cb2:	f000 fe17 	bl	80028e4 <iprintf>
 8001cb6:	e7bf      	b.n	8001c38 <compile_layers+0x128>
			NNOM_LOG("     ");
 8001cb8:	4866      	ldr	r0, [pc, #408]	; (8001e54 <compile_layers+0x344>)
 8001cba:	f000 fe13 	bl	80028e4 <iprintf>
 8001cbe:	e7cb      	b.n	8001c58 <compile_layers+0x148>
	else if (mac < 10000)
 8001cc0:	f242 730f 	movw	r3, #9999	; 0x270f
 8001cc4:	429d      	cmp	r5, r3
 8001cc6:	d804      	bhi.n	8001cd2 <compile_layers+0x1c2>
		NNOM_LOG("%7d ", (uint32_t)mac);
 8001cc8:	4863      	ldr	r0, [pc, #396]	; (8001e58 <compile_layers+0x348>)
 8001cca:	4629      	mov	r1, r5
		NNOM_LOG("%6dk ", (uint32_t)(mac/1000));
 8001ccc:	f000 fe0a 	bl	80028e4 <iprintf>
 8001cd0:	e7ce      	b.n	8001c70 <compile_layers+0x160>
	else if (mac < 1000*1000)
 8001cd2:	4b62      	ldr	r3, [pc, #392]	; (8001e5c <compile_layers+0x34c>)
 8001cd4:	429d      	cmp	r5, r3
 8001cd6:	d805      	bhi.n	8001ce4 <compile_layers+0x1d4>
		NNOM_LOG("%6dk ", (uint32_t)(mac/1000));
 8001cd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001cdc:	4860      	ldr	r0, [pc, #384]	; (8001e60 <compile_layers+0x350>)
 8001cde:	fbb5 f1f1 	udiv	r1, r5, r1
 8001ce2:	e7f3      	b.n	8001ccc <compile_layers+0x1bc>
	else if (mac < 1000*1000*1000)
 8001ce4:	4b5f      	ldr	r3, [pc, #380]	; (8001e64 <compile_layers+0x354>)
 8001ce6:	429d      	cmp	r5, r3
 8001ce8:	d80c      	bhi.n	8001d04 <compile_layers+0x1f4>
		NNOM_LOG("%3d.%02dM ", (uint32_t)(mac/(1000*1000)), (uint32_t)(mac%(1000*1000)/(10*1000))); // xxx.xx M
 8001cea:	4a5f      	ldr	r2, [pc, #380]	; (8001e68 <compile_layers+0x358>)
 8001cec:	485f      	ldr	r0, [pc, #380]	; (8001e6c <compile_layers+0x35c>)
 8001cee:	fbb5 f1f2 	udiv	r1, r5, r2
 8001cf2:	f242 7310 	movw	r3, #10000	; 0x2710
 8001cf6:	fb02 5211 	mls	r2, r2, r1, r5
 8001cfa:	fbb2 f2f3 	udiv	r2, r2, r3
		NNOM_LOG("%3d.%02dG ", (uint32_t)(mac/(1000*1000*1000)), (uint32_t)(mac%(1000*1000*1000)/(10*1000*1000))); // xxx.xx G
 8001cfe:	f000 fdf1 	bl	80028e4 <iprintf>
 8001d02:	e7b5      	b.n	8001c70 <compile_layers+0x160>
 8001d04:	4a5a      	ldr	r2, [pc, #360]	; (8001e70 <compile_layers+0x360>)
 8001d06:	fbb5 f1fb 	udiv	r1, r5, fp
 8001d0a:	485a      	ldr	r0, [pc, #360]	; (8001e74 <compile_layers+0x364>)
 8001d0c:	fb0b 5511 	mls	r5, fp, r1, r5
 8001d10:	fbb5 f2f2 	udiv	r2, r5, r2
 8001d14:	e7f3      	b.n	8001cfe <compile_layers+0x1ee>
			if (layer->in->type == NNOM_TENSOR_BUF_NULL || layer->out->type == NNOM_TENSOR_BUF_NULL)
 8001d16:	6a23      	ldr	r3, [r4, #32]
		if (layer->out->aux == NULL && layer->out->hook.next == NULL)
 8001d18:	68a9      	ldr	r1, [r5, #8]
			if (layer->in->type == NNOM_TENSOR_BUF_NULL || layer->out->type == NNOM_TENSOR_BUF_NULL)
 8001d1a:	7e1a      	ldrb	r2, [r3, #24]
		if (layer->out->aux == NULL && layer->out->hook.next == NULL)
 8001d1c:	2900      	cmp	r1, #0
 8001d1e:	d133      	bne.n	8001d88 <compile_layers+0x278>
 8001d20:	6869      	ldr	r1, [r5, #4]
 8001d22:	2900      	cmp	r1, #0
 8001d24:	d130      	bne.n	8001d88 <compile_layers+0x278>
			if (layer->in->type == NNOM_TENSOR_BUF_NULL || layer->out->type == NNOM_TENSOR_BUF_NULL)
 8001d26:	b10a      	cbz	r2, 8001d2c <compile_layers+0x21c>
 8001d28:	7e2a      	ldrb	r2, [r5, #24]
 8001d2a:	b96a      	cbnz	r2, 8001d48 <compile_layers+0x238>
				layer->out->mem = layer->in->mem;
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	612b      	str	r3, [r5, #16]
				print_memory_block_info(block_pool);
 8001d30:	4630      	mov	r0, r6
 8001d32:	f7ff fddf 	bl	80018f4 <print_memory_block_info>
				release_comp_mem(layer);
 8001d36:	6920      	ldr	r0, [r4, #16]
 8001d38:	f7ff fe33 	bl	80019a2 <release_comp_mem.isra.0>
		if (layer->out->hook.io == NULL)
 8001d3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d0a0      	beq.n	8001c86 <compile_layers+0x176>
		layer = layer->out->hook.io->owner;
 8001d44:	695c      	ldr	r4, [r3, #20]
 8001d46:	e6f2      	b.n	8001b2e <compile_layers+0x1e>
				out_blk = allocate_block(block_pool);
 8001d48:	4630      	mov	r0, r6
 8001d4a:	f7ff fdc3 	bl	80018d4 <allocate_block>
				if (out_blk == NULL)
 8001d4e:	4605      	mov	r5, r0
 8001d50:	b910      	cbnz	r0, 8001d58 <compile_layers+0x248>
					return NN_NO_MEMORY;
 8001d52:	f06f 0006 	mvn.w	r0, #6
 8001d56:	e797      	b.n	8001c88 <compile_layers+0x178>
				out_blk->owners = 1;
 8001d58:	f240 1301 	movw	r3, #257	; 0x101
 8001d5c:	8103      	strh	r3, [r0, #8]
				mem_size = nnom_alignto(tensor_size(layer->out->tensor), NNOM_ALIGN);
 8001d5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d60:	68d8      	ldr	r0, [r3, #12]
 8001d62:	f000 f9df 	bl	8002124 <tensor_size>
 8001d66:	2104      	movs	r1, #4
 8001d68:	f7ff fe37 	bl	80019da <nnom_alignto>
				out_blk->size = mem_size > out_blk->size ? mem_size : out_blk->size;
 8001d6c:	686b      	ldr	r3, [r5, #4]
 8001d6e:	4283      	cmp	r3, r0
 8001d70:	bf2c      	ite	cs
 8001d72:	606b      	strcs	r3, [r5, #4]
 8001d74:	6068      	strcc	r0, [r5, #4]
				layer->out->mem = out_blk;
 8001d76:	6a63      	ldr	r3, [r4, #36]	; 0x24
				print_memory_block_info(block_pool);
 8001d78:	4630      	mov	r0, r6
				layer->out->mem = out_blk;
 8001d7a:	611d      	str	r5, [r3, #16]
				print_memory_block_info(block_pool);
 8001d7c:	f7ff fdba 	bl	80018f4 <print_memory_block_info>
				release_input_mem(layer);
 8001d80:	6a20      	ldr	r0, [r4, #32]
 8001d82:	f7ff fe1b 	bl	80019bc <release_input_mem.isra.0>
 8001d86:	e7d6      	b.n	8001d36 <compile_layers+0x226>
			if (layer->in->type == NNOM_TENSOR_BUF_NULL || layer->out->type == NNOM_TENSOR_BUF_NULL)
 8001d88:	b30a      	cbz	r2, 8001dce <compile_layers+0x2be>
 8001d8a:	7e2a      	ldrb	r2, [r5, #24]
 8001d8c:	b1fa      	cbz	r2, 8001dce <compile_layers+0x2be>
					out->mem->state = NNOM_BUF_FILLED;
 8001d8e:	f04f 0901 	mov.w	r9, #1
				while (out != NULL && out->hook.io != NULL) // the output layer have no output IO
 8001d92:	682b      	ldr	r3, [r5, #0]
 8001d94:	b32b      	cbz	r3, 8001de2 <compile_layers+0x2d2>
					out->mem = allocate_block(block_pool);
 8001d96:	4630      	mov	r0, r6
 8001d98:	f7ff fd9c 	bl	80018d4 <allocate_block>
 8001d9c:	6128      	str	r0, [r5, #16]
					if (out->mem == NULL)
 8001d9e:	2800      	cmp	r0, #0
 8001da0:	d0d7      	beq.n	8001d52 <compile_layers+0x242>
					mem_size = nnom_alignto(tensor_size(out->tensor), NNOM_ALIGN);
 8001da2:	68e8      	ldr	r0, [r5, #12]
 8001da4:	f000 f9be 	bl	8002124 <tensor_size>
 8001da8:	2104      	movs	r1, #4
 8001daa:	f7ff fe16 	bl	80019da <nnom_alignto>
					out->mem->size = mem_size > out->mem->size ? mem_size : out->mem->size;
 8001dae:	692a      	ldr	r2, [r5, #16]
 8001db0:	6853      	ldr	r3, [r2, #4]
 8001db2:	4283      	cmp	r3, r0
 8001db4:	bf2c      	ite	cs
 8001db6:	6053      	strcs	r3, [r2, #4]
 8001db8:	6050      	strcc	r0, [r2, #4]
					out->mem->owners = nnom_hook_length(&out->hook); // set lifetime of the buffer = the num of hooked layers
 8001dba:	4628      	mov	r0, r5
 8001dbc:	f7ff fe9e 	bl	8001afc <nnom_hook_length>
					out->mem->state = NNOM_BUF_FILLED;
 8001dc0:	f882 9009 	strb.w	r9, [r2, #9]
					out->mem->owners = nnom_hook_length(&out->hook); // set lifetime of the buffer = the num of hooked layers
 8001dc4:	7210      	strb	r0, [r2, #8]
					out = out->aux;
 8001dc6:	68ad      	ldr	r5, [r5, #8]
				while (out != NULL && out->hook.io != NULL) // the output layer have no output IO
 8001dc8:	2d00      	cmp	r5, #0
 8001dca:	d1e2      	bne.n	8001d92 <compile_layers+0x282>
 8001dcc:	e009      	b.n	8001de2 <compile_layers+0x2d2>
				layer->out->mem = layer->in->mem;
 8001dce:	691a      	ldr	r2, [r3, #16]
 8001dd0:	612a      	str	r2, [r5, #16]
				layer->out->mem->owners += nnom_hook_length(&layer->out->hook); // set the mem lifetime.// test
 8001dd2:	4628      	mov	r0, r5
 8001dd4:	f7ff fe92 	bl	8001afc <nnom_hook_length>
 8001dd8:	7a13      	ldrb	r3, [r2, #8]
 8001dda:	4418      	add	r0, r3
				layer->out->mem->state = NNOM_BUF_FILLED;
 8001ddc:	2301      	movs	r3, #1
				layer->out->mem->owners += nnom_hook_length(&layer->out->hook); // set the mem lifetime.// test
 8001dde:	7210      	strb	r0, [r2, #8]
				layer->out->mem->state = NNOM_BUF_FILLED;
 8001de0:	7253      	strb	r3, [r2, #9]
				print_memory_block_info(block_pool);
 8001de2:	4630      	mov	r0, r6
 8001de4:	f7ff fd86 	bl	80018f4 <print_memory_block_info>
				release_input_mem(layer);
 8001de8:	6a20      	ldr	r0, [r4, #32]
 8001dea:	f7ff fde7 	bl	80019bc <release_input_mem.isra.0>
				release_comp_mem(layer);
 8001dee:	6920      	ldr	r0, [r4, #16]
 8001df0:	f7ff fdd7 	bl	80019a2 <release_comp_mem.isra.0>
			out = layer->out;
 8001df4:	6a64      	ldr	r4, [r4, #36]	; 0x24
			while (out != NULL)
 8001df6:	2c00      	cmp	r4, #0
 8001df8:	f43f af45 	beq.w	8001c86 <compile_layers+0x176>
				hook = &out->hook;
 8001dfc:	4625      	mov	r5, r4
				while (hook != NULL && hook->io != NULL)
 8001dfe:	6829      	ldr	r1, [r5, #0]
 8001e00:	b141      	cbz	r1, 8001e14 <compile_layers+0x304>
					compile_layers(first, hook->io->owner, block_pool, layer_count);
 8001e02:	6949      	ldr	r1, [r1, #20]
 8001e04:	463b      	mov	r3, r7
 8001e06:	4632      	mov	r2, r6
 8001e08:	4640      	mov	r0, r8
 8001e0a:	f7ff fe81 	bl	8001b10 <compile_layers>
					hook = hook->next;
 8001e0e:	686d      	ldr	r5, [r5, #4]
				while (hook != NULL && hook->io != NULL)
 8001e10:	2d00      	cmp	r5, #0
 8001e12:	d1f4      	bne.n	8001dfe <compile_layers+0x2ee>
				out = out->aux;
 8001e14:	68a4      	ldr	r4, [r4, #8]
 8001e16:	e7ee      	b.n	8001df6 <compile_layers+0x2e6>
					return NN_MORE_TODO;
 8001e18:	f06f 0007 	mvn.w	r0, #7
 8001e1c:	e734      	b.n	8001c88 <compile_layers+0x178>
 8001e1e:	bf00      	nop
 8001e20:	08004119 	.word	0x08004119
 8001e24:	08003d6b 	.word	0x08003d6b
 8001e28:	080040b9 	.word	0x080040b9
 8001e2c:	08003d8e 	.word	0x08003d8e
 8001e30:	08003da2 	.word	0x08003da2
 8001e34:	08003da7 	.word	0x08003da7
 8001e38:	08003dab 	.word	0x08003dab
 8001e3c:	08003dd5 	.word	0x08003dd5
 8001e40:	080041c1 	.word	0x080041c1
 8001e44:	08003d7a 	.word	0x08003d7a
 8001e48:	08003d86 	.word	0x08003d86
 8001e4c:	080040f9 	.word	0x080040f9
 8001e50:	08003d96 	.word	0x08003d96
 8001e54:	08003dae 	.word	0x08003dae
 8001e58:	08003db4 	.word	0x08003db4
 8001e5c:	000f423f 	.word	0x000f423f
 8001e60:	08003db9 	.word	0x08003db9
 8001e64:	3b9ac9ff 	.word	0x3b9ac9ff
 8001e68:	000f4240 	.word	0x000f4240
 8001e6c:	08003dbf 	.word	0x08003dbf
 8001e70:	00989680 	.word	0x00989680
 8001e74:	08003dca 	.word	0x08003dca
 8001e78:	3b9aca00 	.word	0x3b9aca00

08001e7c <mem_analysis_result>:

size_t mem_analysis_result(nnom_model_t *m)
{
 8001e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e80:	4606      	mov	r6, r0
	uint32_t index;
	uint32_t total_mem = 0;
	NNOM_LOG("Memory cost by each block:\n ");
 8001e82:	480d      	ldr	r0, [pc, #52]	; (8001eb8 <mem_analysis_result+0x3c>)
	// print size of memory blocks
	for (index = 0; index < NNOM_BLOCK_NUM; index++)
	{
		total_mem += m->blocks[index].size;
		NNOM_LOG("blk_%d:%d  ", index, (uint32_t)(m->blocks[index].size));
 8001e84:	4f0d      	ldr	r7, [pc, #52]	; (8001ebc <mem_analysis_result+0x40>)
	NNOM_LOG("Memory cost by each block:\n ");
 8001e86:	f000 fd2d 	bl	80028e4 <iprintf>
	uint32_t total_mem = 0;
 8001e8a:	2400      	movs	r4, #0
	for (index = 0; index < NNOM_BLOCK_NUM; index++)
 8001e8c:	4625      	mov	r5, r4
		total_mem += m->blocks[index].size;
 8001e8e:	3624      	adds	r6, #36	; 0x24
 8001e90:	f04f 080c 	mov.w	r8, #12
 8001e94:	fb08 f305 	mul.w	r3, r8, r5
		NNOM_LOG("blk_%d:%d  ", index, (uint32_t)(m->blocks[index].size));
 8001e98:	4629      	mov	r1, r5
		total_mem += m->blocks[index].size;
 8001e9a:	58f2      	ldr	r2, [r6, r3]
		NNOM_LOG("blk_%d:%d  ", index, (uint32_t)(m->blocks[index].size));
 8001e9c:	4638      	mov	r0, r7
	for (index = 0; index < NNOM_BLOCK_NUM; index++)
 8001e9e:	3501      	adds	r5, #1
		total_mem += m->blocks[index].size;
 8001ea0:	4414      	add	r4, r2
		NNOM_LOG("blk_%d:%d  ", index, (uint32_t)(m->blocks[index].size));
 8001ea2:	f000 fd1f 	bl	80028e4 <iprintf>
	for (index = 0; index < NNOM_BLOCK_NUM; index++)
 8001ea6:	2d08      	cmp	r5, #8
 8001ea8:	d1f4      	bne.n	8001e94 <mem_analysis_result+0x18>
	}
	// size of total memory cost by networks buffer
	NNOM_LOG("\n Memory cost by network buffers: %d bytes\n", total_mem);
 8001eaa:	4621      	mov	r1, r4
 8001eac:	4804      	ldr	r0, [pc, #16]	; (8001ec0 <mem_analysis_result+0x44>)
 8001eae:	f000 fd19 	bl	80028e4 <iprintf>
	return total_mem;
}
 8001eb2:	4620      	mov	r0, r4
 8001eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001eb8:	08003de3 	.word	0x08003de3
 8001ebc:	08003e00 	.word	0x08003e00
 8001ec0:	08003e0c 	.word	0x08003e0c

08001ec4 <block_mem_set>:

// allocate memory, and set them to each block according to the mem analysis results.
nnom_status_t block_mem_set(nnom_model_t *m, void *buf)
{
 8001ec4:	b530      	push	{r4, r5, lr}
	uint32_t index;
	uint32_t mem_offset = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	f100 0460 	add.w	r4, r0, #96	; 0x60

	for (index = 0; index < NNOM_BLOCK_NUM; index++)
	{
		if (m->blocks[index].size == 0)
 8001ecc:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001ece:	b12a      	cbz	r2, 8001edc <block_mem_set+0x18>
			break;
		m->blocks[index].blk = (void *)((uint8_t*)buf + mem_offset);
 8001ed0:	18cd      	adds	r5, r1, r3
 8001ed2:	6205      	str	r5, [r0, #32]
	for (index = 0; index < NNOM_BLOCK_NUM; index++)
 8001ed4:	300c      	adds	r0, #12
 8001ed6:	4284      	cmp	r4, r0
		mem_offset += m->blocks[index].size;
 8001ed8:	4413      	add	r3, r2
	for (index = 0; index < NNOM_BLOCK_NUM; index++)
 8001eda:	d1f7      	bne.n	8001ecc <block_mem_set+0x8>
	}
	return NN_SUCCESS;
}
 8001edc:	2000      	movs	r0, #0
 8001ede:	bd30      	pop	{r4, r5, pc}

08001ee0 <tensor_mem_set>:
		{
			io->tensor->p_data = io->mem->blk;
			io = io->aux;
		}

		layer = layer->shortcut;
 8001ee0:	6800      	ldr	r0, [r0, #0]
	while (layer)
 8001ee2:	b900      	cbnz	r0, 8001ee6 <tensor_mem_set+0x6>
	}
	
	return NN_SUCCESS;
}
 8001ee4:	4770      	bx	lr
		io = layer->in;
 8001ee6:	6a03      	ldr	r3, [r0, #32]
		while (io)
 8001ee8:	b943      	cbnz	r3, 8001efc <tensor_mem_set+0x1c>
		io = layer->out;
 8001eea:	6a43      	ldr	r3, [r0, #36]	; 0x24
		while (io)
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d0f7      	beq.n	8001ee0 <tensor_mem_set>
			io->tensor->p_data = io->mem->blk;
 8001ef0:	e9d3 2103 	ldrd	r2, r1, [r3, #12]
 8001ef4:	6809      	ldr	r1, [r1, #0]
			io = io->aux;
 8001ef6:	689b      	ldr	r3, [r3, #8]
			io->tensor->p_data = io->mem->blk;
 8001ef8:	6011      	str	r1, [r2, #0]
			io = io->aux;
 8001efa:	e7f7      	b.n	8001eec <tensor_mem_set+0xc>
			io->tensor->p_data = io->mem->blk;
 8001efc:	e9d3 2103 	ldrd	r2, r1, [r3, #12]
 8001f00:	6809      	ldr	r1, [r1, #0]
			io = io->aux;
 8001f02:	689b      	ldr	r3, [r3, #8]
			io->tensor->p_data = io->mem->blk;
 8001f04:	6011      	str	r1, [r2, #0]
			io = io->aux;
 8001f06:	e7ef      	b.n	8001ee8 <tensor_mem_set+0x8>

08001f08 <set_tailed_activation>:

// this function has to be used after memory is assigned to the layers.
// it means it has to be call after compile_model() as well.
// it simply get the output buffer and set the buffer to tailed activation of each layer..
nnom_status_t set_tailed_activation(nnom_model_t *m)
{
 8001f08:	b508      	push	{r3, lr}
	NNOM_NULL_CHECK(m);
 8001f0a:	b928      	cbnz	r0, 8001f18 <set_tailed_activation+0x10>
 8001f0c:	4808      	ldr	r0, [pc, #32]	; (8001f30 <set_tailed_activation+0x28>)
 8001f0e:	f000 fd85 	bl	8002a1c <puts>
 8001f12:	f04f 30ff 	mov.w	r0, #4294967295
			break;
		layer = layer->shortcut;
	}

	return NN_SUCCESS;
}
 8001f16:	bd08      	pop	{r3, pc}
	NNOM_NULL_CHECK(m->head);
 8001f18:	6800      	ldr	r0, [r0, #0]
 8001f1a:	2800      	cmp	r0, #0
 8001f1c:	d0f6      	beq.n	8001f0c <set_tailed_activation+0x4>
		if (layer->actail != NULL)
 8001f1e:	6943      	ldr	r3, [r0, #20]
 8001f20:	b113      	cbz	r3, 8001f28 <set_tailed_activation+0x20>
			layer->actail->tensor = layer->out->tensor;
 8001f22:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001f24:	68d2      	ldr	r2, [r2, #12]
 8001f26:	605a      	str	r2, [r3, #4]
		if (layer->shortcut == NULL)
 8001f28:	6800      	ldr	r0, [r0, #0]
 8001f2a:	2800      	cmp	r0, #0
 8001f2c:	d1f7      	bne.n	8001f1e <set_tailed_activation+0x16>
 8001f2e:	e7f2      	b.n	8001f16 <set_tailed_activation+0xe>
 8001f30:	08003e38 	.word	0x08003e38

08001f34 <model_compile>:

// a compiler can be use for both sequencial / functional model.
// the output layer is optional only when the model is single output model
// in this case, if output = NULL, the compile can find it by its own. 
nnom_status_t model_compile(nnom_model_t *m, nnom_layer_t *input, nnom_layer_t *output)
{
 8001f34:	b530      	push	{r4, r5, lr}
 8001f36:	b085      	sub	sp, #20
	size_t buf_size;
	uint8_t *buf;
	uint32_t layer_num = 1;
 8001f38:	2301      	movs	r3, #1
{
 8001f3a:	4615      	mov	r5, r2
	uint32_t layer_num = 1;
 8001f3c:	9303      	str	r3, [sp, #12]
	uint32_t time = nnom_ms_get();
	
	NNOM_NULL_CHECK(m);
 8001f3e:	4604      	mov	r4, r0
 8001f40:	b930      	cbnz	r0, 8001f50 <model_compile+0x1c>
 8001f42:	4831      	ldr	r0, [pc, #196]	; (8002008 <model_compile+0xd4>)
 8001f44:	f000 fd6a 	bl	8002a1c <puts>
 8001f48:	f04f 30ff 	mov.w	r0, #4294967295
	// print the time. 
	if(nnom_ms_get())
		NNOM_LOG("Compling done in %d ms\n", nnom_ms_get() - time);

	return NN_SUCCESS;
}
 8001f4c:	b005      	add	sp, #20
 8001f4e:	bd30      	pop	{r4, r5, pc}
	NNOM_NULL_CHECK(input);
 8001f50:	2900      	cmp	r1, #0
 8001f52:	d0f6      	beq.n	8001f42 <model_compile+0xe>
	m->tail = output;
 8001f54:	e9c0 1200 	strd	r1, r2, [r0]
	if (output == NULL)
 8001f58:	b91a      	cbnz	r2, 8001f62 <model_compile+0x2e>
		m->tail = find_last(input);
 8001f5a:	4608      	mov	r0, r1
 8001f5c:	f7ff fcf2 	bl	8001944 <find_last>
 8001f60:	6060      	str	r0, [r4, #4]
	NNOM_LOG("NNoM version %d.%d.%d\n", NNOM_MAJORVERSION, NNOM_SUBVERSION, NNOM_REVISION);
 8001f62:	2303      	movs	r3, #3
 8001f64:	2204      	movs	r2, #4
 8001f66:	2100      	movs	r1, #0
 8001f68:	4828      	ldr	r0, [pc, #160]	; (800200c <model_compile+0xd8>)
 8001f6a:	f000 fcbb 	bl	80028e4 <iprintf>
	NNOM_LOG("To disable logs, please void the marco 'NNOM_LOG(...)' in 'nnom_port.h'.\n");
 8001f6e:	4828      	ldr	r0, [pc, #160]	; (8002010 <model_compile+0xdc>)
 8001f70:	f000 fd54 	bl	8002a1c <puts>
	    NNOM_LOG("Data format: Channel last (HWC)\n");
 8001f74:	4827      	ldr	r0, [pc, #156]	; (8002014 <model_compile+0xe0>)
 8001f76:	f000 fd51 	bl	8002a1c <puts>
	NNOM_LOG("Start compiling model...\n");
 8001f7a:	4827      	ldr	r0, [pc, #156]	; (8002018 <model_compile+0xe4>)
 8001f7c:	f000 fd4e 	bl	8002a1c <puts>
	NNOM_LOG("Layer(#)         Activation    output shape    ops(MAC)   mem(in, out, buf)      mem blk lifetime\n");
 8001f80:	4826      	ldr	r0, [pc, #152]	; (800201c <model_compile+0xe8>)
 8001f82:	f000 fd4b 	bl	8002a1c <puts>
	NNOM_LOG("-------------------------------------------------------------------------------------------------\n");
 8001f86:	4826      	ldr	r0, [pc, #152]	; (8002020 <model_compile+0xec>)
 8001f88:	f000 fd48 	bl	8002a1c <puts>
	compile_layers(m->head, m->head, m->blocks, &layer_num);
 8001f8c:	4622      	mov	r2, r4
 8001f8e:	ab03      	add	r3, sp, #12
 8001f90:	f852 1b20 	ldr.w	r1, [r2], #32
 8001f94:	4608      	mov	r0, r1
 8001f96:	f7ff fdbb 	bl	8001b10 <compile_layers>
	NNOM_LOG("-------------------------------------------------------------------------------------------------\n");
 8001f9a:	4821      	ldr	r0, [pc, #132]	; (8002020 <model_compile+0xec>)
 8001f9c:	f000 fd3e 	bl	8002a1c <puts>
	if (output->type != NNOM_OUTPUT)
 8001fa0:	7f2b      	ldrb	r3, [r5, #28]
 8001fa2:	2b03      	cmp	r3, #3
 8001fa4:	d006      	beq.n	8001fb4 <model_compile+0x80>
		NNOM_LOG("WARNING: the last layer '%s' is not the Output Layer, please check carefully.\n",
 8001fa6:	4a1f      	ldr	r2, [pc, #124]	; (8002024 <model_compile+0xf0>)
 8001fa8:	481f      	ldr	r0, [pc, #124]	; (8002028 <model_compile+0xf4>)
 8001faa:	210c      	movs	r1, #12
 8001fac:	fb01 2103 	mla	r1, r1, r3, r2
 8001fb0:	f000 fc98 	bl	80028e4 <iprintf>
	buf_size = mem_analysis_result(m);
 8001fb4:	4620      	mov	r0, r4
 8001fb6:	f7ff ff61 	bl	8001e7c <mem_analysis_result>
 8001fba:	9001      	str	r0, [sp, #4]
	buf = nnom_mem(buf_size);
 8001fbc:	f7ff fd16 	bl	80019ec <nnom_mem>
	if (buf == NULL)
 8001fc0:	9901      	ldr	r1, [sp, #4]
 8001fc2:	4605      	mov	r5, r0
 8001fc4:	b928      	cbnz	r0, 8001fd2 <model_compile+0x9e>
		NNOM_LOG("ERROR: No enough memory for network buffer, required %d bytes\n", (uint32_t)buf_size);
 8001fc6:	4819      	ldr	r0, [pc, #100]	; (800202c <model_compile+0xf8>)
 8001fc8:	f000 fc8c 	bl	80028e4 <iprintf>
		return NN_NO_MEMORY;
 8001fcc:	f06f 0006 	mvn.w	r0, #6
 8001fd0:	e7bc      	b.n	8001f4c <model_compile+0x18>
	NNOM_LOG(" Total memory occupied: %d bytes\n", (uint32_t)nnom_memory_taken);
 8001fd2:	4b17      	ldr	r3, [pc, #92]	; (8002030 <model_compile+0xfc>)
 8001fd4:	4817      	ldr	r0, [pc, #92]	; (8002034 <model_compile+0x100>)
 8001fd6:	6819      	ldr	r1, [r3, #0]
 8001fd8:	f000 fc84 	bl	80028e4 <iprintf>
	block_mem_set(m, buf);
 8001fdc:	4629      	mov	r1, r5
 8001fde:	4620      	mov	r0, r4
 8001fe0:	f7ff ff70 	bl	8001ec4 <block_mem_set>
	tensor_mem_set(m);
 8001fe4:	4620      	mov	r0, r4
 8001fe6:	f7ff ff7b 	bl	8001ee0 <tensor_mem_set>
	set_tailed_activation(m);
 8001fea:	4620      	mov	r0, r4
 8001fec:	f7ff ff8c 	bl	8001f08 <set_tailed_activation>
	layer = m->head;
 8001ff0:	6823      	ldr	r3, [r4, #0]
	uint64_t total_ops = 0;
 8001ff2:	2200      	movs	r2, #0
	while (layer)
 8001ff4:	b123      	cbz	r3, 8002000 <model_compile+0xcc>
		total_ops += layer->stat.macc;
 8001ff6:	6a99      	ldr	r1, [r3, #40]	; 0x28
		if (layer->shortcut == NULL)
 8001ff8:	681b      	ldr	r3, [r3, #0]
		total_ops += layer->stat.macc;
 8001ffa:	188a      	adds	r2, r1, r2
		if (layer->shortcut == NULL)
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1f9      	bne.n	8001ff4 <model_compile+0xc0>
	m->total_ops = total_ops;
 8002000:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	return NN_SUCCESS;
 8002004:	2000      	movs	r0, #0
	return total_ops;
 8002006:	e7a1      	b.n	8001f4c <model_compile+0x18>
 8002008:	08003e38 	.word	0x08003e38
 800200c:	08003e4c 	.word	0x08003e4c
 8002010:	08003e63 	.word	0x08003e63
 8002014:	08003eac 	.word	0x08003eac
 8002018:	08003ecc 	.word	0x08003ecc
 800201c:	08003ee5 	.word	0x08003ee5
 8002020:	08003f47 	.word	0x08003f47
 8002024:	08004119 	.word	0x08004119
 8002028:	08003fa9 	.word	0x08003fa9
 800202c:	08003ff8 	.word	0x08003ff8
 8002030:	2000c1a8 	.word	0x2000c1a8
 8002034:	08004037 	.word	0x08004037

08002038 <layer_run>:
	return model_compile(m, input, output);
}

// run that layer
nnom_status_t layer_run(nnom_layer_t *layer)
{
 8002038:	b538      	push	{r3, r4, r5, lr}
	nnom_status_t result;
	uint32_t start;
	NNOM_NULL_CHECK(layer);
 800203a:	4604      	mov	r4, r0
 800203c:	b930      	cbnz	r0, 800204c <layer_run+0x14>
 800203e:	4808      	ldr	r0, [pc, #32]	; (8002060 <layer_run+0x28>)
 8002040:	f000 fcec 	bl	8002a1c <puts>
 8002044:	f04f 35ff 	mov.w	r5, #4294967295
		layer->actail->run(layer->actail);
	}
	// done
	layer->stat.time = nnom_us_get() - start;
	return result;
}
 8002048:	4628      	mov	r0, r5
 800204a:	bd38      	pop	{r3, r4, r5, pc}
	result = layer->run(layer);
 800204c:	6843      	ldr	r3, [r0, #4]
 800204e:	4798      	blx	r3
 8002050:	4605      	mov	r5, r0
	if (layer->actail != NULL)
 8002052:	6960      	ldr	r0, [r4, #20]
 8002054:	b108      	cbz	r0, 800205a <layer_run+0x22>
		layer->actail->run(layer->actail);
 8002056:	6803      	ldr	r3, [r0, #0]
 8002058:	4798      	blx	r3
	layer->stat.time = nnom_us_get() - start;
 800205a:	2300      	movs	r3, #0
 800205c:	62e3      	str	r3, [r4, #44]	; 0x2c
	return result;
 800205e:	e7f3      	b.n	8002048 <layer_run+0x10>
 8002060:	08003e38 	.word	0x08003e38

08002064 <model_run_to>:

// run the model, until the end_layer. If end_layer == NULL, run all layers.
nnom_status_t model_run_to(nnom_model_t *m, nnom_layer_t *end_layer)
{
 8002064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002068:	4689      	mov	r9, r1
	uint32_t layer_num = 1;
	nnom_status_t result;
	nnom_layer_t *layer;
	NNOM_NULL_CHECK(m);
 800206a:	4606      	mov	r6, r0
 800206c:	b938      	cbnz	r0, 800207e <model_run_to+0x1a>
 800206e:	481c      	ldr	r0, [pc, #112]	; (80020e0 <model_run_to+0x7c>)
 8002070:	f000 fcd4 	bl	8002a1c <puts>
 8002074:	f04f 35ff 	mov.w	r5, #4294967295
		layer = layer->shortcut;
		layer_num++;
	}

	return NN_SUCCESS;
}
 8002078:	4628      	mov	r0, r5
 800207a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	NNOM_NULL_CHECK(m->head);
 800207e:	6804      	ldr	r4, [r0, #0]
 8002080:	2c00      	cmp	r4, #0
 8002082:	d0f4      	beq.n	800206e <model_run_to+0xa>
	uint32_t layer_num = 1;
 8002084:	f04f 0801 	mov.w	r8, #1
		result = layer_run(layer);
 8002088:	4620      	mov	r0, r4
 800208a:	f7ff ffd5 	bl	8002038 <layer_run>
		if (result != NN_SUCCESS)
 800208e:	4605      	mov	r5, r0
 8002090:	b150      	cbz	r0, 80020a8 <model_run_to+0x44>
			NNOM_LOG("Error: #%d %s layer return error code:%d\n", layer_num, default_layer_names[layer->type], result);
 8002092:	7f22      	ldrb	r2, [r4, #28]
 8002094:	4913      	ldr	r1, [pc, #76]	; (80020e4 <model_run_to+0x80>)
 8002096:	4603      	mov	r3, r0
 8002098:	200c      	movs	r0, #12
 800209a:	fb00 1202 	mla	r2, r0, r2, r1
 800209e:	4641      	mov	r1, r8
 80020a0:	4811      	ldr	r0, [pc, #68]	; (80020e8 <model_run_to+0x84>)
 80020a2:	f000 fc1f 	bl	80028e4 <iprintf>
			return result;
 80020a6:	e7e7      	b.n	8002078 <model_run_to+0x14>
		if(m->layer_callback != NULL)
 80020a8:	69f3      	ldr	r3, [r6, #28]
 80020aa:	b183      	cbz	r3, 80020ce <model_run_to+0x6a>
			result = m->layer_callback(m, layer);
 80020ac:	4621      	mov	r1, r4
 80020ae:	4630      	mov	r0, r6
 80020b0:	4798      	blx	r3
			if (result != NN_SUCCESS)
 80020b2:	4607      	mov	r7, r0
 80020b4:	b158      	cbz	r0, 80020ce <model_run_to+0x6a>
				NNOM_LOG("Error: Callback return error code %d at #%d %s layer\n", result, layer_num, default_layer_names[layer->type]);
 80020b6:	7f23      	ldrb	r3, [r4, #28]
 80020b8:	4a0a      	ldr	r2, [pc, #40]	; (80020e4 <model_run_to+0x80>)
 80020ba:	210c      	movs	r1, #12
 80020bc:	fb01 2303 	mla	r3, r1, r3, r2
 80020c0:	4601      	mov	r1, r0
 80020c2:	4642      	mov	r2, r8
 80020c4:	4809      	ldr	r0, [pc, #36]	; (80020ec <model_run_to+0x88>)
 80020c6:	f000 fc0d 	bl	80028e4 <iprintf>
			result = m->layer_callback(m, layer);
 80020ca:	463d      	mov	r5, r7
				return result;
 80020cc:	e7d4      	b.n	8002078 <model_run_to+0x14>
		if (layer == end_layer || layer->shortcut == NULL)
 80020ce:	45a1      	cmp	r9, r4
 80020d0:	d0d2      	beq.n	8002078 <model_run_to+0x14>
 80020d2:	6824      	ldr	r4, [r4, #0]
 80020d4:	2c00      	cmp	r4, #0
 80020d6:	d0cf      	beq.n	8002078 <model_run_to+0x14>
		layer_num++;
 80020d8:	f108 0801 	add.w	r8, r8, #1
	while (layer)
 80020dc:	e7d4      	b.n	8002088 <model_run_to+0x24>
 80020de:	bf00      	nop
 80020e0:	08003e38 	.word	0x08003e38
 80020e4:	08004119 	.word	0x08004119
 80020e8:	08004059 	.word	0x08004059
 80020ec:	08004083 	.word	0x08004083

080020f0 <model_run>:

// run all layers.
nnom_status_t model_run(nnom_model_t *m)
{
	return model_run_to(m, NULL);
 80020f0:	2100      	movs	r1, #0
 80020f2:	f7ff bfb7 	b.w	8002064 <model_run_to>

080020f6 <shape>:
		return 0;
	return s->h * s->w * s->c;
}

nnom_3d_shape_t shape(size_t h, size_t w, size_t c)
{
 80020f6:	b510      	push	{r4, lr}
	nnom_3d_shape_t s;
	s.h = h;
 80020f8:	8001      	strh	r1, [r0, #0]
	s.w = w;
 80020fa:	8042      	strh	r2, [r0, #2]
	s.c = c;
 80020fc:	8083      	strh	r3, [r0, #4]
	return s;
}
 80020fe:	bd10      	pop	{r4, pc}

08002100 <kernel>:
	s.w = w;
 8002100:	8042      	strh	r2, [r0, #2]
	return s;
 8002102:	2201      	movs	r2, #1
	s.h = h;
 8002104:	8001      	strh	r1, [r0, #0]
	return s;
 8002106:	8082      	strh	r2, [r0, #4]
nnom_3d_shape_t kernel(size_t h, size_t w)
{
	return shape(h, w, 1);
}
 8002108:	4770      	bx	lr

0800210a <stride>:
 800210a:	8042      	strh	r2, [r0, #2]
 800210c:	2201      	movs	r2, #1
 800210e:	8001      	strh	r1, [r0, #0]
 8002110:	8082      	strh	r2, [r0, #4]
 8002112:	4770      	bx	lr

08002114 <dilation>:
 8002114:	8042      	strh	r2, [r0, #2]
 8002116:	2201      	movs	r2, #1
 8002118:	8001      	strh	r1, [r0, #0]
 800211a:	8082      	strh	r2, [r0, #4]
 800211c:	4770      	bx	lr

0800211e <io_init>:

// this function has to be used while assign a io for a layer.
// because the io needs to know who is its owner.
nnom_layer_io_t *io_init(void *owner_layer, nnom_layer_io_t *io)
{
	io->owner = (nnom_layer_t *)owner_layer;
 800211e:	6148      	str	r0, [r1, #20]
	return io;
}
 8002120:	4608      	mov	r0, r1
 8002122:	4770      	bx	lr

08002124 <tensor_size>:
#include "nnom.h"
#include "nnom_tensor.h"

 // tensor size
size_t tensor_size(nnom_tensor_t* t)
{
 8002124:	b510      	push	{r4, lr}
	size_t size = 0;
	if (t != NULL)
 8002126:	b160      	cbz	r0, 8002142 <tensor_size+0x1e>
	{
		size = t->dim[0];
 8002128:	6841      	ldr	r1, [r0, #4]
		for (int i = 1; i < t->num_dim; i++)
 800212a:	7c40      	ldrb	r0, [r0, #17]
		size = t->dim[0];
 800212c:	880b      	ldrh	r3, [r1, #0]
		for (int i = 1; i < t->num_dim; i++)
 800212e:	2201      	movs	r2, #1
 8002130:	4290      	cmp	r0, r2
 8002132:	dc01      	bgt.n	8002138 <tensor_size+0x14>
			size *= t->dim[i];
	}
	return size;
}
 8002134:	4618      	mov	r0, r3
 8002136:	bd10      	pop	{r4, pc}
			size *= t->dim[i];
 8002138:	f831 4012 	ldrh.w	r4, [r1, r2, lsl #1]
		for (int i = 1; i < t->num_dim; i++)
 800213c:	3201      	adds	r2, #1
			size *= t->dim[i];
 800213e:	4363      	muls	r3, r4
		for (int i = 1; i < t->num_dim; i++)
 8002140:	e7f6      	b.n	8002130 <tensor_size+0xc>
	size_t size = 0;
 8002142:	4603      	mov	r3, r0
	return size;
 8002144:	e7f6      	b.n	8002134 <tensor_size+0x10>

08002146 <tensor_get_num_channel>:
	// channel first
	//return t->dim[0];
	return t->dim[t->num_dim -1];		// we are always using hwc to describe even our data is in CHW
#else
	// channel last
	return t->dim[t->num_dim -1];
 8002146:	7c43      	ldrb	r3, [r0, #17]
 8002148:	6842      	ldr	r2, [r0, #4]
 800214a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800214e:	3b01      	subs	r3, #1
#endif
}
 8002150:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8002154:	4770      	bx	lr
	...

08002158 <new_tensor>:
// initialise/create new tensor
nnom_tensor_t* new_tensor(nnom_qtype_t type, uint32_t num_dim, uint32_t num_channel)
{
	nnom_tensor_t* t = NULL;
	uint32_t q_len;
	if(type == NNOM_QTYPE_PER_AXIS)
 8002158:	2801      	cmp	r0, #1
{
 800215a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800215c:	4605      	mov	r5, r0
 800215e:	460e      	mov	r6, r1
 8002160:	4614      	mov	r4, r2
	if(type == NNOM_QTYPE_PER_AXIS)
 8002162:	d006      	beq.n	8002172 <new_tensor+0x1a>
	{
		q_len = num_channel;
	}
	else if (type == NNOM_QTYPE_PER_TENSOR)
 8002164:	b120      	cbz	r0, 8002170 <new_tensor+0x18>
	{
		q_len = 1;
	}
	else
	{
		NNOM_LOG("ERROR: tensor type not specified\n");
 8002166:	480f      	ldr	r0, [pc, #60]	; (80021a4 <new_tensor+0x4c>)
 8002168:	f000 fc58 	bl	8002a1c <puts>
		return NULL;
 800216c:	2000      	movs	r0, #0
	t->q_offset = (nnom_qformat_param_t*)((uint8_t*)t->q_dec + q_len*sizeof(nnom_qformat_param_t));
	t->num_dim = num_dim;
	t->qtype = type;

	return t;
}
 800216e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		q_len = 1;
 8002170:	2401      	movs	r4, #1
	t = nnom_mem(nnom_alignto(sizeof(nnom_tensor_t), NNOM_ALIGN) 
 8002172:	2104      	movs	r1, #4
 8002174:	2014      	movs	r0, #20
 8002176:	f7ff fc30 	bl	80019da <nnom_alignto>
							+ q_len*sizeof(nnom_qformat_param_t)*2);
 800217a:	00a7      	lsls	r7, r4, #2
 800217c:	eb06 0484 	add.w	r4, r6, r4, lsl #2
	t = nnom_mem(nnom_alignto(sizeof(nnom_tensor_t), NNOM_ALIGN) 
 8002180:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 8002184:	f7ff fc32 	bl	80019ec <nnom_mem>
	if(t == NULL)
 8002188:	2800      	cmp	r0, #0
 800218a:	d0f0      	beq.n	800216e <new_tensor+0x16>
	t->dim = (nnom_shape_data_t*)((uint8_t*)t + sizeof(nnom_tensor_t));	// should add alignment
 800218c:	f100 0314 	add.w	r3, r0, #20
 8002190:	6043      	str	r3, [r0, #4]
	t->q_dec = (nnom_qformat_param_t*)((uint8_t*)t->dim + num_dim*sizeof(nnom_shape_data_t));
 8002192:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8002196:	6083      	str	r3, [r0, #8]
	t->q_offset = (nnom_qformat_param_t*)((uint8_t*)t->q_dec + q_len*sizeof(nnom_qformat_param_t));
 8002198:	443b      	add	r3, r7
 800219a:	60c3      	str	r3, [r0, #12]
	t->num_dim = num_dim;
 800219c:	7446      	strb	r6, [r0, #17]
	t->qtype = type;
 800219e:	7405      	strb	r5, [r0, #16]
	return t;
 80021a0:	e7e5      	b.n	800216e <new_tensor+0x16>
 80021a2:	bf00      	nop
 80021a4:	080042c9 	.word	0x080042c9

080021a8 <tensor_set_attr_v>:

// set tensor by value
// for tensor with quantized type NNOM_QTYPE_PER_TENSOR
nnom_tensor_t* tensor_set_attr_v(nnom_tensor_t* t, 
		nnom_qformat_param_t dec_bit, nnom_qformat_param_t offset, nnom_shape_data_t* dim, uint32_t num_dim, uint8_t bitwidth)
{
 80021a8:	b570      	push	{r4, r5, r6, lr}
 80021aa:	4615      	mov	r5, r2
 80021ac:	9a04      	ldr	r2, [sp, #16]
	// copy dim
	t->num_dim = num_dim;
 80021ae:	7442      	strb	r2, [r0, #17]
{
 80021b0:	4604      	mov	r4, r0
 80021b2:	460e      	mov	r6, r1
	nnom_memcpy(t->dim, dim, sizeof(nnom_shape_data_t) * num_dim);
 80021b4:	0052      	lsls	r2, r2, #1
 80021b6:	4619      	mov	r1, r3
 80021b8:	6840      	ldr	r0, [r0, #4]
 80021ba:	f000 fa9d 	bl	80026f8 <memcpy>

	// bitwidth
	t->bitwidth = bitwidth;
 80021be:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80021c2:	74a3      	strb	r3, [r4, #18]
	// copy the offset and q format
	*(t->q_dec) = dec_bit;
 80021c4:	68a3      	ldr	r3, [r4, #8]
 80021c6:	601e      	str	r6, [r3, #0]
	*(t->q_offset) = offset;
 80021c8:	68e3      	ldr	r3, [r4, #12]
	return t;
}
 80021ca:	4620      	mov	r0, r4
	*(t->q_offset) = offset;
 80021cc:	601d      	str	r5, [r3, #0]
}
 80021ce:	bd70      	pop	{r4, r5, r6, pc}

080021d0 <tensor_cpy_attr>:

// this method copy the attributes of a tensor to a new tensor
// before that, src and des tensor must already have QTYPE and NUM_OF_DIM set. 
// Note, the tensors must have the same lenght. this method wont cpy the memory pointer data (we will assign memory later after building)
nnom_tensor_t* tensor_cpy_attr(nnom_tensor_t* des, nnom_tensor_t* src)
{
 80021d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	size_t size;
	if(src->qtype != des->qtype || src->num_dim != des->num_dim)
 80021d2:	8a0a      	ldrh	r2, [r1, #16]
 80021d4:	8a03      	ldrh	r3, [r0, #16]
 80021d6:	429a      	cmp	r2, r3
{
 80021d8:	4604      	mov	r4, r0
 80021da:	460d      	mov	r5, r1
	if(src->qtype != des->qtype || src->num_dim != des->num_dim)
 80021dc:	d11e      	bne.n	800221c <tensor_cpy_attr+0x4c>
		return NULL;
	
	if(src->qtype == NNOM_QTYPE_PER_AXIS)
 80021de:	7c0b      	ldrb	r3, [r1, #16]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d119      	bne.n	8002218 <tensor_cpy_attr+0x48>
		size = sizeof(nnom_qformat_param_t) * tensor_get_num_channel(src);
 80021e4:	4608      	mov	r0, r1
 80021e6:	f7ff ffae 	bl	8002146 <tensor_get_num_channel>
 80021ea:	0082      	lsls	r2, r0, #2
	else
		size = sizeof(nnom_qformat_param_t);
		
	// bit
	des->bitwidth = src->bitwidth;
 80021ec:	7cab      	ldrb	r3, [r5, #18]
 80021ee:	74a3      	strb	r3, [r4, #18]
	// copy quantisation parameters
	nnom_memcpy(des->q_dec, src->q_dec, size);
 80021f0:	68a9      	ldr	r1, [r5, #8]
 80021f2:	68a0      	ldr	r0, [r4, #8]
 80021f4:	9201      	str	r2, [sp, #4]
 80021f6:	f000 fa7f 	bl	80026f8 <memcpy>
	nnom_memcpy(des->q_offset, src->q_offset, size);
 80021fa:	9a01      	ldr	r2, [sp, #4]
 80021fc:	68e9      	ldr	r1, [r5, #12]
 80021fe:	68e0      	ldr	r0, [r4, #12]
 8002200:	f000 fa7a 	bl	80026f8 <memcpy>

	// copy number of dimension
	des->num_dim = src->num_dim;
 8002204:	7c6a      	ldrb	r2, [r5, #17]
 8002206:	7462      	strb	r2, [r4, #17]
	nnom_memcpy(des->dim, src->dim, src->num_dim * sizeof(nnom_shape_data_t));
 8002208:	6869      	ldr	r1, [r5, #4]
 800220a:	6860      	ldr	r0, [r4, #4]
 800220c:	0052      	lsls	r2, r2, #1
 800220e:	f000 fa73 	bl	80026f8 <memcpy>
	return des;
}
 8002212:	4620      	mov	r0, r4
 8002214:	b003      	add	sp, #12
 8002216:	bd30      	pop	{r4, r5, pc}
		size = sizeof(nnom_qformat_param_t);
 8002218:	2204      	movs	r2, #4
 800221a:	e7e7      	b.n	80021ec <tensor_cpy_attr+0x1c>
		return NULL;
 800221c:	2400      	movs	r4, #0
 800221e:	e7f8      	b.n	8002212 <tensor_cpy_attr+0x42>

08002220 <act_get_dec_bit>:
}

// return the decimal bit if the activation will change the q format of the layer. 
int32_t act_get_dec_bit(nnom_activation_type_t type, int32_t dec_bit)
{
	switch(type)
 8002220:	3804      	subs	r0, #4
			break;
		case ACT_TANH:
        case ACT_HARD_TANH:
		case ACT_SIGMOID:
        case ACT_HARD_SIGMOID:
			dec_bit = 7;
 8002222:	2803      	cmp	r0, #3
		default:break;
	}
	return dec_bit;
}
 8002224:	bf8c      	ite	hi
 8002226:	4608      	movhi	r0, r1
 8002228:	2007      	movls	r0, #7
 800222a:	4770      	bx	lr

0800222c <default_build>:
// this will set the output shape same as input shape, and it set only the primary IO
// this cannot be used as first layer, of course...
nnom_status_t default_build(nnom_layer_t *layer)
{
	// get the last layer's output as input shape
	layer->in->tensor = layer->in->hook.io->tensor;
 800222c:	6a03      	ldr	r3, [r0, #32]
{
 800222e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	layer->in->tensor = layer->in->hook.io->tensor;
 8002230:	681a      	ldr	r2, [r3, #0]
{
 8002232:	4604      	mov	r4, r0
	layer->in->tensor = layer->in->hook.io->tensor;
 8002234:	68d0      	ldr	r0, [r2, #12]
 8002236:	60d8      	str	r0, [r3, #12]
	// output tensor
	// 1. allocate a new tensor for output
	// 2. set the same dim, qfmt to the new tensor.
	layer->out->tensor = new_tensor(NNOM_QTYPE_PER_TENSOR,layer->in->tensor->num_dim, tensor_get_num_channel(layer->in->tensor));
 8002238:	7c41      	ldrb	r1, [r0, #17]
 800223a:	9101      	str	r1, [sp, #4]
 800223c:	f7ff ff83 	bl	8002146 <tensor_get_num_channel>
 8002240:	9901      	ldr	r1, [sp, #4]
 8002242:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002244:	4602      	mov	r2, r0
 8002246:	2000      	movs	r0, #0
 8002248:	f7ff ff86 	bl	8002158 <new_tensor>
	tensor_cpy_attr(layer->out->tensor, layer->in->tensor);
 800224c:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
	layer->out->tensor = new_tensor(NNOM_QTYPE_PER_TENSOR,layer->in->tensor->num_dim, tensor_get_num_channel(layer->in->tensor));
 8002250:	60e8      	str	r0, [r5, #12]
	tensor_cpy_attr(layer->out->tensor, layer->in->tensor);
 8002252:	68d8      	ldr	r0, [r3, #12]
 8002254:	68d1      	ldr	r1, [r2, #12]
 8002256:	f7ff ffbb 	bl	80021d0 <tensor_cpy_attr>
	
	// see if the activation will change the q format
	if(layer->actail) 
 800225a:	6963      	ldr	r3, [r4, #20]
 800225c:	b13b      	cbz	r3, 800226e <default_build+0x42>
		layer->out->tensor->q_dec[0] = act_get_dec_bit(layer->actail->type, layer->out->tensor->q_dec[0]);
 800225e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002260:	7a18      	ldrb	r0, [r3, #8]
 8002262:	68d2      	ldr	r2, [r2, #12]
 8002264:	6894      	ldr	r4, [r2, #8]
 8002266:	6821      	ldr	r1, [r4, #0]
 8002268:	f7ff ffda 	bl	8002220 <act_get_dec_bit>
 800226c:	6020      	str	r0, [r4, #0]

	// now this build has passed the input tensors (shapes, formats) to the new tensors. 
	return NN_SUCCESS;
}
 800226e:	2000      	movs	r0, #0
 8002270:	b003      	add	sp, #12
 8002272:	bd30      	pop	{r4, r5, pc}

08002274 <conv_output_length>:

// keras's implementation. 
// source: https://github.com/keras-team/keras/blob/7a39b6c62d43c25472b2c2476bd2a8983ae4f682/keras/utils/conv_utils.py#L85
uint32_t conv_output_length(uint32_t input_length, uint32_t filter_size, nnom_padding_t padding, uint32_t stride, uint32_t dilation)
{
    if (input_length == 0)
 8002274:	b150      	cbz	r0, 800228c <conv_output_length+0x18>
        return 0;
    uint32_t dilated_filter_size = (filter_size - 1) * dilation + 1;
	uint32_t output_length;
    if(padding == PADDING_SAME)
 8002276:	2a01      	cmp	r2, #1
        output_length = input_length;
    else
        output_length = input_length - dilated_filter_size + 1;
 8002278:	bf1e      	ittt	ne
 800227a:	9a00      	ldrne	r2, [sp, #0]
    uint32_t dilated_filter_size = (filter_size - 1) * dilation + 1;
 800227c:	f101 31ff 	addne.w	r1, r1, #4294967295
        output_length = input_length - dilated_filter_size + 1;
 8002280:	fb02 0011 	mlsne	r0, r2, r1, r0
    return (output_length + stride - 1) / stride;
 8002284:	1e5a      	subs	r2, r3, #1
 8002286:	4410      	add	r0, r2
 8002288:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800228c:	4770      	bx	lr

0800228e <groupconv2d_build>:
        output_length = input_length - dilated_filter_size + 1;
    return (output_length + stride - 1) / stride;
}

nnom_status_t groupconv2d_build(nnom_layer_t *layer)
{
 800228e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	nnom_groupconv2d_layer_t *cl = (nnom_groupconv2d_layer_t *)layer;

	// get the tensor from last layer's output
	layer->in->tensor = layer->in->hook.io->tensor;
 8002290:	6a02      	ldr	r2, [r0, #32]

	// create new tensor for the output
	layer->out->tensor = new_tensor(NNOM_QTYPE_PER_TENSOR, layer->in->tensor->num_dim, cl->filter_mult);
 8002292:	6a45      	ldr	r5, [r0, #36]	; 0x24
	layer->in->tensor = layer->in->hook.io->tensor;
 8002294:	6813      	ldr	r3, [r2, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	60d3      	str	r3, [r2, #12]
{
 800229a:	4604      	mov	r4, r0
	layer->out->tensor = new_tensor(NNOM_QTYPE_PER_TENSOR, layer->in->tensor->num_dim, cl->filter_mult);
 800229c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800229e:	7c59      	ldrb	r1, [r3, #17]
 80022a0:	2000      	movs	r0, #0
 80022a2:	f7ff ff59 	bl	8002158 <new_tensor>
	// copy then change later. 
	tensor_cpy_attr(layer->out->tensor, layer->in->tensor);
 80022a6:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
	layer->out->tensor = new_tensor(NNOM_QTYPE_PER_TENSOR, layer->in->tensor->num_dim, cl->filter_mult);
 80022aa:	60e8      	str	r0, [r5, #12]
	tensor_cpy_attr(layer->out->tensor, layer->in->tensor);
 80022ac:	68d1      	ldr	r1, [r2, #12]
 80022ae:	68d8      	ldr	r0, [r3, #12]
 80022b0:	f7ff ff8e 	bl	80021d0 <tensor_cpy_attr>
	
	// calculate the output tensor q format, only support per tensor quantise now
	layer->out->tensor->q_dec[0] = layer->in->tensor->q_dec[0] + cl->weight->q_dec[0] - cl->output_rshift[0]; // need some modification for 16bit. 
 80022b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	689d      	ldr	r5, [r3, #8]
 80022ba:	6a23      	ldr	r3, [r4, #32]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80022c2:	6811      	ldr	r1, [r2, #0]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4419      	add	r1, r3
 80022ca:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	1ac9      	subs	r1, r1, r3
	// see if the activation will change the q format
	if(layer->actail) 
 80022d0:	6963      	ldr	r3, [r4, #20]
	layer->out->tensor->q_dec[0] = layer->in->tensor->q_dec[0] + cl->weight->q_dec[0] - cl->output_rshift[0]; // need some modification for 16bit. 
 80022d2:	6029      	str	r1, [r5, #0]
	if(layer->actail) 
 80022d4:	b11b      	cbz	r3, 80022de <groupconv2d_build+0x50>
		layer->out->tensor->q_dec[0] = act_get_dec_bit(layer->actail->type, layer->out->tensor->q_dec[0]);
 80022d6:	7a18      	ldrb	r0, [r3, #8]
 80022d8:	f7ff ffa2 	bl	8002220 <act_get_dec_bit>
 80022dc:	6028      	str	r0, [r5, #0]
	
	// now we set up the tensor shape, always HWC format
	layer->out->tensor->dim[0] = conv_output_length(layer->in->tensor->dim[0], cl->kernel.h, cl->padding_type, cl->stride.h, cl->dilation.h);
 80022de:	6a23      	ldr	r3, [r4, #32]
 80022e0:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	8818      	ldrh	r0, [r3, #0]
 80022ec:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80022f4:	f7ff ffbe 	bl	8002274 <conv_output_length>
 80022f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	8018      	strh	r0, [r3, #0]
	layer->out->tensor->dim[1] = conv_output_length(layer->in->tensor->dim[1], cl->kernel.w, cl->padding_type, cl->stride.w, cl->dilation.w);
 8002300:	6a23      	ldr	r3, [r4, #32]
 8002302:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	8858      	ldrh	r0, [r3, #2]
 800230e:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8002316:	f7ff ffad 	bl	8002274 <conv_output_length>
 800231a:	6a63      	ldr	r3, [r4, #36]	; 0x24
	layer->out->tensor->dim[2] = cl->filter_mult; // channel stays the same
 800231c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
	layer->out->tensor->dim[1] = conv_output_length(layer->in->tensor->dim[1], cl->kernel.w, cl->padding_type, cl->stride.w, cl->dilation.w);
 800231e:	68d9      	ldr	r1, [r3, #12]
 8002320:	684b      	ldr	r3, [r1, #4]
 8002322:	8058      	strh	r0, [r3, #2]
	layer->out->tensor->dim[2] = cl->filter_mult; // channel stays the same
 8002324:	809a      	strh	r2, [r3, #4]
	
	// fill padding
	if (cl->padding_type == PADDING_SAME)
 8002326:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800232a:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 800232c:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 800232e:	2b01      	cmp	r3, #1
 8002330:	d112      	bne.n	8002358 <groupconv2d_build+0xca>
	{
		cl->pad.w = cl->dilation.w * (cl->kernel.w - 1) / 2;
 8002332:	f8b4 5044 	ldrh.w	r5, [r4, #68]	; 0x44
 8002336:	1e53      	subs	r3, r2, #1
 8002338:	436b      	muls	r3, r5
 800233a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800233e:	105b      	asrs	r3, r3, #1
		cl->pad.h = cl->dilation.h * (cl->kernel.h - 1) / 2;
 8002340:	f8b4 5042 	ldrh.w	r5, [r4, #66]	; 0x42
		cl->pad.w = cl->dilation.w * (cl->kernel.w - 1) / 2;
 8002344:	87e3      	strh	r3, [r4, #62]	; 0x3e
		cl->pad.h = cl->dilation.h * (cl->kernel.h - 1) / 2;
 8002346:	1e43      	subs	r3, r0, #1
 8002348:	436b      	muls	r3, r5
 800234a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800234e:	105b      	asrs	r3, r3, #1
 8002350:	87a3      	strh	r3, [r4, #60]	; 0x3c
		cl->pad.c = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
	// bufferA size: (1D shape)
	// 2*ch_im_in*dim_kernel*dim_kernel
	layer->comp->size = 2 * 2 * layer->in->tensor->dim[2] * cl->kernel.w * cl->kernel.h;
	#endif
	// computational cost: K x K x Cin x Hour x Wout x Cout
	layer->stat.macc = cl->kernel.w * cl->kernel.h * layer->in->tensor->dim[2] * tensor_size(layer->out->tensor)/cl->groups;
 8002358:	6a23      	ldr	r3, [r4, #32]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	889d      	ldrh	r5, [r3, #4]
 8002360:	4342      	muls	r2, r0
 8002362:	4608      	mov	r0, r1
 8002364:	4355      	muls	r5, r2
 8002366:	f7ff fedd 	bl	8002124 <tensor_size>
 800236a:	4368      	muls	r0, r5
 800236c:	6d25      	ldr	r5, [r4, #80]	; 0x50
 800236e:	fbb0 f0f5 	udiv	r0, r0, r5
 8002372:	62a0      	str	r0, [r4, #40]	; 0x28
	return NN_SUCCESS;
}
 8002374:	2000      	movs	r0, #0
 8002376:	b003      	add	sp, #12
 8002378:	bd30      	pop	{r4, r5, pc}

0800237a <groupconv2d_run>:
	return NN_SUCCESS;
}


nnom_status_t groupconv2d_run(nnom_layer_t *layer)
{
 800237a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		}
	}
	#endif // End of NNOM_USING_CMSIS_NN

	local_groupconvolve_HWC_q7_nonsquare(
					layer->in->tensor->p_data,
 800237e:	6a03      	ldr	r3, [r0, #32]
					layer->in->tensor->dim[1], layer->in->tensor->dim[0], layer->in->tensor->dim[2],
					cl->weight->p_data, layer->out->tensor->dim[2], cl->groups,
 8002380:	6d47      	ldr	r7, [r0, #84]	; 0x54
					layer->in->tensor->p_data,
 8002382:	68de      	ldr	r6, [r3, #12]
					cl->weight->p_data, layer->out->tensor->dim[2], cl->groups,
 8002384:	6a43      	ldr	r3, [r0, #36]	; 0x24
					layer->in->tensor->dim[1], layer->in->tensor->dim[0], layer->in->tensor->dim[2],
 8002386:	6871      	ldr	r1, [r6, #4]
					cl->weight->p_data, layer->out->tensor->dim[2], cl->groups,
 8002388:	f8d3 c00c 	ldr.w	ip, [r3, #12]
	local_groupconvolve_HWC_q7_nonsquare(
 800238c:	f8b1 8004 	ldrh.w	r8, [r1, #4]
					cl->weight->p_data, layer->out->tensor->dim[2], cl->groups,
 8002390:	f8dc 5004 	ldr.w	r5, [ip, #4]
	local_groupconvolve_HWC_q7_nonsquare(
 8002394:	880a      	ldrh	r2, [r1, #0]
 8002396:	8849      	ldrh	r1, [r1, #2]
{
 8002398:	b094      	sub	sp, #80	; 0x50
	local_groupconvolve_HWC_q7_nonsquare(
 800239a:	2400      	movs	r4, #0
 800239c:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
 80023a0:	f8b5 e000 	ldrh.w	lr, [r5]
 80023a4:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
 80023a8:	f8b5 e002 	ldrh.w	lr, [r5, #2]
 80023ac:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
 80023b0:	f8dc 3000 	ldr.w	r3, [ip]
 80023b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80023b6:	f897 c010 	ldrb.w	ip, [r7, #16]
 80023ba:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 80023be:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80023c0:	930d      	str	r3, [sp, #52]	; 0x34
 80023c2:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80023c4:	930c      	str	r3, [sp, #48]	; 0x30
					cl->kernel.w, cl->kernel.h, cl->pad.w, cl->pad.h, cl->stride.w, cl->stride.h, cl->dilation.w, cl->dilation.h,
					cl->bias->p_data, cl->bias_lshift, cl->output_rshift, cl->weight->qtype,
 80023c6:	f8d0 c058 	ldr.w	ip, [r0, #88]	; 0x58
	local_groupconvolve_HWC_q7_nonsquare(
 80023ca:	f8dc 3000 	ldr.w	r3, [ip]
 80023ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80023d0:	f8b0 c042 	ldrh.w	ip, [r0, #66]	; 0x42
 80023d4:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 80023d8:	f8b0 c044 	ldrh.w	ip, [r0, #68]	; 0x44
 80023dc:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 80023e0:	f8b0 c036 	ldrh.w	ip, [r0, #54]	; 0x36
 80023e4:	f8cd c020 	str.w	ip, [sp, #32]
 80023e8:	f8b0 c038 	ldrh.w	ip, [r0, #56]	; 0x38
 80023ec:	f8cd c01c 	str.w	ip, [sp, #28]
 80023f0:	f8b0 c03c 	ldrh.w	ip, [r0, #60]	; 0x3c
 80023f4:	f8cd c018 	str.w	ip, [sp, #24]
 80023f8:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 80023fc:	f8cd c014 	str.w	ip, [sp, #20]
 8002400:	f8b0 c030 	ldrh.w	ip, [r0, #48]	; 0x30
 8002404:	f8cd c010 	str.w	ip, [sp, #16]
 8002408:	f8b0 c032 	ldrh.w	ip, [r0, #50]	; 0x32
 800240c:	f8cd c00c 	str.w	ip, [sp, #12]
 8002410:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
 8002414:	9002      	str	r0, [sp, #8]
 8002416:	88a8      	ldrh	r0, [r5, #4]
 8002418:	9001      	str	r0, [sp, #4]
 800241a:	6838      	ldr	r0, [r7, #0]
 800241c:	9000      	str	r0, [sp, #0]
 800241e:	6830      	ldr	r0, [r6, #0]
 8002420:	4643      	mov	r3, r8
 8002422:	f7ff f925 	bl	8001670 <local_groupconvolve_HWC_q7_nonsquare>
					layer->out->tensor->p_data,
					layer->out->tensor->dim[1], layer->out->tensor->dim[0], NULL, NULL);

	return NN_SUCCESS;
}
 8002426:	4620      	mov	r0, r4
 8002428:	b014      	add	sp, #80	; 0x50
 800242a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002430 <GroupConv2D>:
{
 8002430:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002434:	b085      	sub	sp, #20
 8002436:	4605      	mov	r5, r0
 8002438:	466f      	mov	r7, sp
	layer = nnom_mem(mem_size);
 800243a:	20a8      	movs	r0, #168	; 0xa8
{
 800243c:	e887 000c 	stmia.w	r7, {r2, r3}
 8002440:	4689      	mov	r9, r1
	layer = nnom_mem(mem_size);
 8002442:	f7ff fad3 	bl	80019ec <nnom_mem>
	if (layer == NULL)
 8002446:	4604      	mov	r4, r0
 8002448:	2800      	cmp	r0, #0
 800244a:	d077      	beq.n	800253c <GroupConv2D+0x10c>
	layer->super.type = NNOM_GROUPCONV_2D;
 800244c:	f04f 0808 	mov.w	r8, #8
	in->type = NNOM_TENSOR_BUF_TEMP;
 8002450:	2601      	movs	r6, #1
 8002452:	f880 607c 	strb.w	r6, [r0, #124]	; 0x7c
	out->type = NNOM_TENSOR_BUF_TEMP;
 8002456:	f880 6098 	strb.w	r6, [r0, #152]	; 0x98
	comp->type = NNOM_TENSOR_BUF_TEMP;
 800245a:	f880 60a4 	strb.w	r6, [r0, #164]	; 0xa4
	layer->super.in = io_init(layer, in);
 800245e:	f100 0164 	add.w	r1, r0, #100	; 0x64
	layer->super.type = NNOM_GROUPCONV_2D;
 8002462:	f880 801c 	strb.w	r8, [r0, #28]
	layer->super.in = io_init(layer, in);
 8002466:	f7ff fe5a 	bl	800211e <io_init>
	layer->super.out = io_init(layer, out);
 800246a:	f104 0180 	add.w	r1, r4, #128	; 0x80
	layer->super.in = io_init(layer, in);
 800246e:	6220      	str	r0, [r4, #32]
	layer->super.out = io_init(layer, out);
 8002470:	4620      	mov	r0, r4
 8002472:	f7ff fe54 	bl	800211e <io_init>
	layer->super.run = groupconv2d_run;
 8002476:	4b33      	ldr	r3, [pc, #204]	; (8002544 <GroupConv2D+0x114>)
	layer->super.out = io_init(layer, out);
 8002478:	6260      	str	r0, [r4, #36]	; 0x24
	layer->kernel = k;
 800247a:	e897 0003 	ldmia.w	r7, {r0, r1}
	layer->super.run = groupconv2d_run;
 800247e:	6063      	str	r3, [r4, #4]
	layer->super.build = groupconv2d_build;
 8002480:	4b31      	ldr	r3, [pc, #196]	; (8002548 <GroupConv2D+0x118>)
 8002482:	60a3      	str	r3, [r4, #8]
	layer->stride = s;
 8002484:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
	layer->kernel = k;
 8002488:	6320      	str	r0, [r4, #48]	; 0x30
	layer->stride = s;
 800248a:	8763      	strh	r3, [r4, #58]	; 0x3a
 800248c:	980c      	ldr	r0, [sp, #48]	; 0x30
	layer->dilation = d; 	
 800248e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
	layer->stride = s;
 8002492:	f8c4 0036 	str.w	r0, [r4, #54]	; 0x36
	layer->dilation = d; 	
 8002496:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800249a:	980e      	ldr	r0, [sp, #56]	; 0x38
	layer->padding_type = pad_type;
 800249c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80024a0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	layer->weight = new_tensor(NNOM_QTYPE_PER_TENSOR, 4, filters);
 80024a4:	462a      	mov	r2, r5
  layer->groups = groups; 		// number of groups
 80024a6:	e9c4 5913 	strd	r5, r9, [r4, #76]	; 0x4c
	layer->kernel = k;
 80024aa:	86a1      	strh	r1, [r4, #52]	; 0x34
	layer->dilation = d; 	
 80024ac:	f8c4 0042 	str.w	r0, [r4, #66]	; 0x42
	layer->weight = new_tensor(NNOM_QTYPE_PER_TENSOR, 4, filters);
 80024b0:	2104      	movs	r1, #4
 80024b2:	2000      	movs	r0, #0
 80024b4:	f7ff fe50 	bl	8002158 <new_tensor>
	layer->bias = new_tensor(NNOM_QTYPE_PER_TENSOR, 1, filters);
 80024b8:	462a      	mov	r2, r5
 80024ba:	4631      	mov	r1, r6
	layer->weight = new_tensor(NNOM_QTYPE_PER_TENSOR, 4, filters);
 80024bc:	6560      	str	r0, [r4, #84]	; 0x54
	layer->bias = new_tensor(NNOM_QTYPE_PER_TENSOR, 1, filters);
 80024be:	2000      	movs	r0, #0
 80024c0:	f7ff fe4a 	bl	8002158 <new_tensor>
		nnom_shape_data_t dim[4] = {k.h, k.w, k.c, filters};
 80024c4:	f8bd 3000 	ldrh.w	r3, [sp]
 80024c8:	f8ad 3008 	strh.w	r3, [sp, #8]
 80024cc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80024d0:	f8ad 300a 	strh.w	r3, [sp, #10]
 80024d4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80024d8:	f8ad 300c 	strh.w	r3, [sp, #12]
		*(layer->weight->q_offset) = 0;			// we have no support of offset here
 80024dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
	layer->bias = new_tensor(NNOM_QTYPE_PER_TENSOR, 1, filters);
 80024de:	65a0      	str	r0, [r4, #88]	; 0x58
		*(layer->weight->q_offset) = 0;			// we have no support of offset here
 80024e0:	68da      	ldr	r2, [r3, #12]
		layer->weight->p_data = (void*)w->p_value;
 80024e2:	9f11      	ldr	r7, [sp, #68]	; 0x44
		nnom_memcpy(layer->weight->dim, dim, layer->weight->num_dim * sizeof(nnom_shape_data_t));
 80024e4:	6858      	ldr	r0, [r3, #4]
		*(layer->weight->q_offset) = 0;			// we have no support of offset here
 80024e6:	2600      	movs	r6, #0
 80024e8:	6016      	str	r6, [r2, #0]
		*(layer->weight->q_dec) = 0;		// not using it
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	6016      	str	r6, [r2, #0]
		layer->weight->p_data = (void*)w->p_value;
 80024ee:	f857 2b04 	ldr.w	r2, [r7], #4
 80024f2:	601a      	str	r2, [r3, #0]
		nnom_memcpy(layer->weight->dim, dim, layer->weight->num_dim * sizeof(nnom_shape_data_t));
 80024f4:	7c5a      	ldrb	r2, [r3, #17]
		layer->weight->bitwidth = 8;
 80024f6:	f883 8012 	strb.w	r8, [r3, #18]
		nnom_shape_data_t dim[4] = {k.h, k.w, k.c, filters};
 80024fa:	b2ad      	uxth	r5, r5
		layer->weight->qtype = NNOM_QTYPE_PER_TENSOR;
 80024fc:	741e      	strb	r6, [r3, #16]
		nnom_memcpy(layer->weight->dim, dim, layer->weight->num_dim * sizeof(nnom_shape_data_t));
 80024fe:	0052      	lsls	r2, r2, #1
 8002500:	eb0d 0108 	add.w	r1, sp, r8
		nnom_shape_data_t dim[4] = {k.h, k.w, k.c, filters};
 8002504:	f8ad 500e 	strh.w	r5, [sp, #14]
		nnom_memcpy(layer->weight->dim, dim, layer->weight->num_dim * sizeof(nnom_shape_data_t));
 8002508:	f000 f8f6 	bl	80026f8 <memcpy>
		*(layer->bias->q_offset) = 0;			// we have no support of offset here
 800250c:	6da3      	ldr	r3, [r4, #88]	; 0x58
		dim[0] = filters;
 800250e:	f8ad 5008 	strh.w	r5, [sp, #8]
		*(layer->bias->q_offset) = 0;			// we have no support of offset here
 8002512:	68da      	ldr	r2, [r3, #12]
		layer->bias->p_data = (void*) b->p_value;
 8002514:	9d12      	ldr	r5, [sp, #72]	; 0x48
		*(layer->bias->q_offset) = 0;			// we have no support of offset here
 8002516:	6016      	str	r6, [r2, #0]
		*(layer->bias->q_dec) = 0;		// not using it
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	6016      	str	r6, [r2, #0]
		layer->bias->p_data = (void*) b->p_value;
 800251c:	f855 2b04 	ldr.w	r2, [r5], #4
		layer->bias->bitwidth = 8;
 8002520:	f883 8012 	strb.w	r8, [r3, #18]
		layer->bias->p_data = (void*) b->p_value;
 8002524:	601a      	str	r2, [r3, #0]
		layer->weight->qtype = NNOM_QTYPE_PER_TENSOR;
 8002526:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002528:	7416      	strb	r6, [r2, #16]
		nnom_memcpy(layer->bias->dim, dim, layer->bias->num_dim * sizeof(nnom_shape_data_t));
 800252a:	7c5a      	ldrb	r2, [r3, #17]
 800252c:	6858      	ldr	r0, [r3, #4]
 800252e:	0052      	lsls	r2, r2, #1
 8002530:	eb0d 0108 	add.w	r1, sp, r8
 8002534:	f000 f8e0 	bl	80026f8 <memcpy>
		layer->bias_lshift = (nnom_qformat_param_t *)&b->shift;
 8002538:	e9c4 7517 	strd	r7, r5, [r4, #92]	; 0x5c
}
 800253c:	4620      	mov	r0, r4
 800253e:	b005      	add	sp, #20
 8002540:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002544:	0800237b 	.word	0x0800237b
 8002548:	0800228f 	.word	0x0800228f

0800254c <input_build>:
	tensor_set_attr_v(layer->super.in->tensor, layer->dec_bit, 0, dim, sizeof(dim)/sizeof(nnom_shape_data_t), 8);
	return (nnom_layer_t *)layer;
}

nnom_status_t input_build(nnom_layer_t* layer)
{
 800254c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	// the input tensor of inputlayer has assigned previously 

	// output tensor
	// 1. allocate a new tensor for output
	// 2. set the same dim, qfmt to the new tensor.
	layer->out->tensor = new_tensor(NNOM_QTYPE_PER_TENSOR, layer->in->tensor->num_dim, tensor_get_num_channel(layer->in->tensor));
 800254e:	6a03      	ldr	r3, [r0, #32]
{
 8002550:	4604      	mov	r4, r0
	layer->out->tensor = new_tensor(NNOM_QTYPE_PER_TENSOR, layer->in->tensor->num_dim, tensor_get_num_channel(layer->in->tensor));
 8002552:	68d8      	ldr	r0, [r3, #12]
 8002554:	7c41      	ldrb	r1, [r0, #17]
 8002556:	9101      	str	r1, [sp, #4]
 8002558:	f7ff fdf5 	bl	8002146 <tensor_get_num_channel>
 800255c:	9901      	ldr	r1, [sp, #4]
 800255e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002560:	4602      	mov	r2, r0
 8002562:	2000      	movs	r0, #0
 8002564:	f7ff fdf8 	bl	8002158 <new_tensor>
	tensor_cpy_attr(layer->out->tensor, layer->in->tensor);
 8002568:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
	layer->out->tensor = new_tensor(NNOM_QTYPE_PER_TENSOR, layer->in->tensor->num_dim, tensor_get_num_channel(layer->in->tensor));
 800256c:	60e8      	str	r0, [r5, #12]
	tensor_cpy_attr(layer->out->tensor, layer->in->tensor);
 800256e:	68d1      	ldr	r1, [r2, #12]
 8002570:	68d8      	ldr	r0, [r3, #12]
 8002572:	f7ff fe2d 	bl	80021d0 <tensor_cpy_attr>

	// now this build has passed the input tensors (shapes, formats) to the new tensors. 
	return NN_SUCCESS;
}
 8002576:	2000      	movs	r0, #0
 8002578:	b003      	add	sp, #12
 800257a:	bd30      	pop	{r4, r5, pc}

0800257c <input_run>:


nnom_status_t input_run(nnom_layer_t *layer)
{
 800257c:	b513      	push	{r0, r1, r4, lr}
        nnom_3d_shape_t shape = {1, layer->in->tensor->dim[0], layer->in->tensor->dim[1]};
        hwc2chw_q7(shape, cl->buf, layer->in->tensor->p_data);
    }
    else
#endif
	nnom_memcpy(layer->in->tensor->p_data, cl->buf, tensor_size(layer->in->tensor));
 800257e:	6a03      	ldr	r3, [r0, #32]
 8002580:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	9101      	str	r1, [sp, #4]
 8002586:	4618      	mov	r0, r3
 8002588:	681c      	ldr	r4, [r3, #0]
 800258a:	f7ff fdcb 	bl	8002124 <tensor_size>
 800258e:	9901      	ldr	r1, [sp, #4]
 8002590:	4602      	mov	r2, r0
 8002592:	4620      	mov	r0, r4
 8002594:	f000 f8b0 	bl	80026f8 <memcpy>

	return NN_SUCCESS;
}
 8002598:	2000      	movs	r0, #0
 800259a:	b002      	add	sp, #8
 800259c:	bd10      	pop	{r4, pc}
	...

080025a0 <Input>:
{
 80025a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025a4:	b086      	sub	sp, #24
 80025a6:	ad02      	add	r5, sp, #8
 80025a8:	e885 0003 	stmia.w	r5, {r0, r1}
	layer = nnom_mem(sizeof(nnom_io_layer_t) + sizeof(nnom_layer_io_t) * 2);
 80025ac:	2078      	movs	r0, #120	; 0x78
 80025ae:	f8bd 800c 	ldrh.w	r8, [sp, #12]
{
 80025b2:	4617      	mov	r7, r2
	layer = nnom_mem(sizeof(nnom_io_layer_t) + sizeof(nnom_layer_io_t) * 2);
 80025b4:	f7ff fa1a 	bl	80019ec <nnom_mem>
	if (layer == NULL)
 80025b8:	4604      	mov	r4, r0
 80025ba:	2800      	cmp	r0, #0
 80025bc:	d039      	beq.n	8002632 <Input+0x92>
	layer->super.type = NNOM_INPUT;
 80025be:	2302      	movs	r3, #2
 80025c0:	7703      	strb	r3, [r0, #28]
	layer->super.run = input_run;
 80025c2:	4b1e      	ldr	r3, [pc, #120]	; (800263c <Input+0x9c>)
 80025c4:	6043      	str	r3, [r0, #4]
	layer->super.build = input_build;
 80025c6:	4b1e      	ldr	r3, [pc, #120]	; (8002640 <Input+0xa0>)
 80025c8:	6083      	str	r3, [r0, #8]
	out->type = NNOM_TENSOR_BUF_NULL;
 80025ca:	2600      	movs	r6, #0
	in->type = NNOM_TENSOR_BUF_TEMP;
 80025cc:	2301      	movs	r3, #1
 80025ce:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
	layer->super.in = io_init(layer, in);
 80025d2:	f100 0140 	add.w	r1, r0, #64	; 0x40
	out->type = NNOM_TENSOR_BUF_NULL;
 80025d6:	f880 6074 	strb.w	r6, [r0, #116]	; 0x74
	layer->super.in = io_init(layer, in);
 80025da:	f7ff fda0 	bl	800211e <io_init>
	layer->super.out = io_init(layer, out);
 80025de:	f104 015c 	add.w	r1, r4, #92	; 0x5c
	layer->super.in = io_init(layer, in);
 80025e2:	6220      	str	r0, [r4, #32]
	layer->super.out = io_init(layer, out);
 80025e4:	4620      	mov	r0, r4
 80025e6:	f7ff fd9a 	bl	800211e <io_init>
 80025ea:	6260      	str	r0, [r4, #36]	; 0x24
	layer->shape = input_shape;
 80025ec:	e895 0003 	ldmia.w	r5, {r0, r1}
	layer->dec_bit = 7;
 80025f0:	2307      	movs	r3, #7
 80025f2:	63a3      	str	r3, [r4, #56]	; 0x38
	nnom_shape_data_t dim[3] = { input_shape.h, input_shape.w, input_shape.c };
 80025f4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	layer->shape = input_shape;
 80025f8:	6320      	str	r0, [r4, #48]	; 0x30
 80025fa:	86a1      	strh	r1, [r4, #52]	; 0x34
	nnom_shape_data_t dim[3] = { input_shape.h, input_shape.w, input_shape.c };
 80025fc:	f8ad 3010 	strh.w	r3, [sp, #16]
	layer->super.in->tensor = new_tensor(NNOM_QTYPE_PER_TENSOR, 3, input_shape.c);
 8002600:	4642      	mov	r2, r8
	nnom_shape_data_t dim[3] = { input_shape.h, input_shape.w, input_shape.c };
 8002602:	f8bd 300a 	ldrh.w	r3, [sp, #10]
	layer->buf = p_buf;
 8002606:	63e7      	str	r7, [r4, #60]	; 0x3c
	layer->super.in->tensor = new_tensor(NNOM_QTYPE_PER_TENSOR, 3, input_shape.c);
 8002608:	2103      	movs	r1, #3
 800260a:	4630      	mov	r0, r6
 800260c:	6a25      	ldr	r5, [r4, #32]
	nnom_shape_data_t dim[3] = { input_shape.h, input_shape.w, input_shape.c };
 800260e:	f8ad 3012 	strh.w	r3, [sp, #18]
 8002612:	f8ad 8014 	strh.w	r8, [sp, #20]
	layer->super.in->tensor = new_tensor(NNOM_QTYPE_PER_TENSOR, 3, input_shape.c);
 8002616:	f7ff fd9f 	bl	8002158 <new_tensor>
	tensor_set_attr_v(layer->super.in->tensor, layer->dec_bit, 0, dim, sizeof(dim)/sizeof(nnom_shape_data_t), 8);
 800261a:	2303      	movs	r3, #3
 800261c:	2208      	movs	r2, #8
	layer->super.in->tensor = new_tensor(NNOM_QTYPE_PER_TENSOR, 3, input_shape.c);
 800261e:	60e8      	str	r0, [r5, #12]
	tensor_set_attr_v(layer->super.in->tensor, layer->dec_bit, 0, dim, sizeof(dim)/sizeof(nnom_shape_data_t), 8);
 8002620:	6a20      	ldr	r0, [r4, #32]
 8002622:	e9cd 3200 	strd	r3, r2, [sp]
 8002626:	ab04      	add	r3, sp, #16
 8002628:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800262a:	68c0      	ldr	r0, [r0, #12]
 800262c:	4632      	mov	r2, r6
 800262e:	f7ff fdbb 	bl	80021a8 <tensor_set_attr_v>
}
 8002632:	4620      	mov	r0, r4
 8002634:	b006      	add	sp, #24
 8002636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800263a:	bf00      	nop
 800263c:	0800257d 	.word	0x0800257d
 8002640:	0800254d 	.word	0x0800254d

08002644 <output_run>:
}

nnom_status_t output_run(nnom_layer_t *layer)
{
	nnom_io_layer_t *cl = (nnom_io_layer_t *)layer;
	nnom_memcpy(cl->buf, layer->in->tensor->p_data, tensor_size(layer->out->tensor)); // in->memory -> user memory
 8002644:	6a03      	ldr	r3, [r0, #32]
{
 8002646:	b513      	push	{r0, r1, r4, lr}
	nnom_memcpy(cl->buf, layer->in->tensor->p_data, tensor_size(layer->out->tensor)); // in->memory -> user memory
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800264c:	6819      	ldr	r1, [r3, #0]
 800264e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002650:	9101      	str	r1, [sp, #4]
 8002652:	68d8      	ldr	r0, [r3, #12]
 8002654:	f7ff fd66 	bl	8002124 <tensor_size>
 8002658:	9901      	ldr	r1, [sp, #4]
 800265a:	4602      	mov	r2, r0
 800265c:	4620      	mov	r0, r4
 800265e:	f000 f84b 	bl	80026f8 <memcpy>
	return NN_SUCCESS;
}
 8002662:	2000      	movs	r0, #0
 8002664:	b002      	add	sp, #8
 8002666:	bd10      	pop	{r4, pc}

08002668 <Output>:
{
 8002668:	b507      	push	{r0, r1, r2, lr}
 800266a:	466b      	mov	r3, sp
 800266c:	e883 0003 	stmia.w	r3, {r0, r1}
	nnom_layer_t *layer = Input(output_shape, p_buf);
 8002670:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002674:	f7ff ff94 	bl	80025a0 <Input>
	if (layer != NULL)
 8002678:	b128      	cbz	r0, 8002686 <Output+0x1e>
		layer->type = NNOM_OUTPUT;
 800267a:	2303      	movs	r3, #3
 800267c:	7703      	strb	r3, [r0, #28]
		layer->run = output_run;
 800267e:	4b03      	ldr	r3, [pc, #12]	; (800268c <Output+0x24>)
 8002680:	6043      	str	r3, [r0, #4]
		layer->build = default_build;
 8002682:	4b03      	ldr	r3, [pc, #12]	; (8002690 <Output+0x28>)
 8002684:	6083      	str	r3, [r0, #8]
}
 8002686:	b003      	add	sp, #12
 8002688:	f85d fb04 	ldr.w	pc, [sp], #4
 800268c:	08002645 	.word	0x08002645
 8002690:	0800222d 	.word	0x0800222d

08002694 <__errno>:
 8002694:	4b01      	ldr	r3, [pc, #4]	; (800269c <__errno+0x8>)
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	2000400c 	.word	0x2000400c

080026a0 <__libc_init_array>:
 80026a0:	b570      	push	{r4, r5, r6, lr}
 80026a2:	4d0d      	ldr	r5, [pc, #52]	; (80026d8 <__libc_init_array+0x38>)
 80026a4:	4c0d      	ldr	r4, [pc, #52]	; (80026dc <__libc_init_array+0x3c>)
 80026a6:	1b64      	subs	r4, r4, r5
 80026a8:	10a4      	asrs	r4, r4, #2
 80026aa:	2600      	movs	r6, #0
 80026ac:	42a6      	cmp	r6, r4
 80026ae:	d109      	bne.n	80026c4 <__libc_init_array+0x24>
 80026b0:	4d0b      	ldr	r5, [pc, #44]	; (80026e0 <__libc_init_array+0x40>)
 80026b2:	4c0c      	ldr	r4, [pc, #48]	; (80026e4 <__libc_init_array+0x44>)
 80026b4:	f001 f898 	bl	80037e8 <_init>
 80026b8:	1b64      	subs	r4, r4, r5
 80026ba:	10a4      	asrs	r4, r4, #2
 80026bc:	2600      	movs	r6, #0
 80026be:	42a6      	cmp	r6, r4
 80026c0:	d105      	bne.n	80026ce <__libc_init_array+0x2e>
 80026c2:	bd70      	pop	{r4, r5, r6, pc}
 80026c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80026c8:	4798      	blx	r3
 80026ca:	3601      	adds	r6, #1
 80026cc:	e7ee      	b.n	80026ac <__libc_init_array+0xc>
 80026ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80026d2:	4798      	blx	r3
 80026d4:	3601      	adds	r6, #1
 80026d6:	e7f2      	b.n	80026be <__libc_init_array+0x1e>
 80026d8:	0800438c 	.word	0x0800438c
 80026dc:	0800438c 	.word	0x0800438c
 80026e0:	0800438c 	.word	0x0800438c
 80026e4:	08004390 	.word	0x08004390

080026e8 <malloc>:
 80026e8:	4b02      	ldr	r3, [pc, #8]	; (80026f4 <malloc+0xc>)
 80026ea:	4601      	mov	r1, r0
 80026ec:	6818      	ldr	r0, [r3, #0]
 80026ee:	f000 b885 	b.w	80027fc <_malloc_r>
 80026f2:	bf00      	nop
 80026f4:	2000400c 	.word	0x2000400c

080026f8 <memcpy>:
 80026f8:	440a      	add	r2, r1
 80026fa:	4291      	cmp	r1, r2
 80026fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8002700:	d100      	bne.n	8002704 <memcpy+0xc>
 8002702:	4770      	bx	lr
 8002704:	b510      	push	{r4, lr}
 8002706:	f811 4b01 	ldrb.w	r4, [r1], #1
 800270a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800270e:	4291      	cmp	r1, r2
 8002710:	d1f9      	bne.n	8002706 <memcpy+0xe>
 8002712:	bd10      	pop	{r4, pc}

08002714 <memset>:
 8002714:	4402      	add	r2, r0
 8002716:	4603      	mov	r3, r0
 8002718:	4293      	cmp	r3, r2
 800271a:	d100      	bne.n	800271e <memset+0xa>
 800271c:	4770      	bx	lr
 800271e:	f803 1b01 	strb.w	r1, [r3], #1
 8002722:	e7f9      	b.n	8002718 <memset+0x4>

08002724 <_free_r>:
 8002724:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002726:	2900      	cmp	r1, #0
 8002728:	d044      	beq.n	80027b4 <_free_r+0x90>
 800272a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800272e:	9001      	str	r0, [sp, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	f1a1 0404 	sub.w	r4, r1, #4
 8002736:	bfb8      	it	lt
 8002738:	18e4      	addlt	r4, r4, r3
 800273a:	f000 fc67 	bl	800300c <__malloc_lock>
 800273e:	4a1e      	ldr	r2, [pc, #120]	; (80027b8 <_free_r+0x94>)
 8002740:	9801      	ldr	r0, [sp, #4]
 8002742:	6813      	ldr	r3, [r2, #0]
 8002744:	b933      	cbnz	r3, 8002754 <_free_r+0x30>
 8002746:	6063      	str	r3, [r4, #4]
 8002748:	6014      	str	r4, [r2, #0]
 800274a:	b003      	add	sp, #12
 800274c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002750:	f000 bc62 	b.w	8003018 <__malloc_unlock>
 8002754:	42a3      	cmp	r3, r4
 8002756:	d908      	bls.n	800276a <_free_r+0x46>
 8002758:	6825      	ldr	r5, [r4, #0]
 800275a:	1961      	adds	r1, r4, r5
 800275c:	428b      	cmp	r3, r1
 800275e:	bf01      	itttt	eq
 8002760:	6819      	ldreq	r1, [r3, #0]
 8002762:	685b      	ldreq	r3, [r3, #4]
 8002764:	1949      	addeq	r1, r1, r5
 8002766:	6021      	streq	r1, [r4, #0]
 8002768:	e7ed      	b.n	8002746 <_free_r+0x22>
 800276a:	461a      	mov	r2, r3
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	b10b      	cbz	r3, 8002774 <_free_r+0x50>
 8002770:	42a3      	cmp	r3, r4
 8002772:	d9fa      	bls.n	800276a <_free_r+0x46>
 8002774:	6811      	ldr	r1, [r2, #0]
 8002776:	1855      	adds	r5, r2, r1
 8002778:	42a5      	cmp	r5, r4
 800277a:	d10b      	bne.n	8002794 <_free_r+0x70>
 800277c:	6824      	ldr	r4, [r4, #0]
 800277e:	4421      	add	r1, r4
 8002780:	1854      	adds	r4, r2, r1
 8002782:	42a3      	cmp	r3, r4
 8002784:	6011      	str	r1, [r2, #0]
 8002786:	d1e0      	bne.n	800274a <_free_r+0x26>
 8002788:	681c      	ldr	r4, [r3, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	6053      	str	r3, [r2, #4]
 800278e:	4421      	add	r1, r4
 8002790:	6011      	str	r1, [r2, #0]
 8002792:	e7da      	b.n	800274a <_free_r+0x26>
 8002794:	d902      	bls.n	800279c <_free_r+0x78>
 8002796:	230c      	movs	r3, #12
 8002798:	6003      	str	r3, [r0, #0]
 800279a:	e7d6      	b.n	800274a <_free_r+0x26>
 800279c:	6825      	ldr	r5, [r4, #0]
 800279e:	1961      	adds	r1, r4, r5
 80027a0:	428b      	cmp	r3, r1
 80027a2:	bf04      	itt	eq
 80027a4:	6819      	ldreq	r1, [r3, #0]
 80027a6:	685b      	ldreq	r3, [r3, #4]
 80027a8:	6063      	str	r3, [r4, #4]
 80027aa:	bf04      	itt	eq
 80027ac:	1949      	addeq	r1, r1, r5
 80027ae:	6021      	streq	r1, [r4, #0]
 80027b0:	6054      	str	r4, [r2, #4]
 80027b2:	e7ca      	b.n	800274a <_free_r+0x26>
 80027b4:	b003      	add	sp, #12
 80027b6:	bd30      	pop	{r4, r5, pc}
 80027b8:	2000c1ac 	.word	0x2000c1ac

080027bc <sbrk_aligned>:
 80027bc:	b570      	push	{r4, r5, r6, lr}
 80027be:	4e0e      	ldr	r6, [pc, #56]	; (80027f8 <sbrk_aligned+0x3c>)
 80027c0:	460c      	mov	r4, r1
 80027c2:	6831      	ldr	r1, [r6, #0]
 80027c4:	4605      	mov	r5, r0
 80027c6:	b911      	cbnz	r1, 80027ce <sbrk_aligned+0x12>
 80027c8:	f000 f930 	bl	8002a2c <_sbrk_r>
 80027cc:	6030      	str	r0, [r6, #0]
 80027ce:	4621      	mov	r1, r4
 80027d0:	4628      	mov	r0, r5
 80027d2:	f000 f92b 	bl	8002a2c <_sbrk_r>
 80027d6:	1c43      	adds	r3, r0, #1
 80027d8:	d00a      	beq.n	80027f0 <sbrk_aligned+0x34>
 80027da:	1cc4      	adds	r4, r0, #3
 80027dc:	f024 0403 	bic.w	r4, r4, #3
 80027e0:	42a0      	cmp	r0, r4
 80027e2:	d007      	beq.n	80027f4 <sbrk_aligned+0x38>
 80027e4:	1a21      	subs	r1, r4, r0
 80027e6:	4628      	mov	r0, r5
 80027e8:	f000 f920 	bl	8002a2c <_sbrk_r>
 80027ec:	3001      	adds	r0, #1
 80027ee:	d101      	bne.n	80027f4 <sbrk_aligned+0x38>
 80027f0:	f04f 34ff 	mov.w	r4, #4294967295
 80027f4:	4620      	mov	r0, r4
 80027f6:	bd70      	pop	{r4, r5, r6, pc}
 80027f8:	2000c1b0 	.word	0x2000c1b0

080027fc <_malloc_r>:
 80027fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002800:	1ccd      	adds	r5, r1, #3
 8002802:	f025 0503 	bic.w	r5, r5, #3
 8002806:	3508      	adds	r5, #8
 8002808:	2d0c      	cmp	r5, #12
 800280a:	bf38      	it	cc
 800280c:	250c      	movcc	r5, #12
 800280e:	2d00      	cmp	r5, #0
 8002810:	4607      	mov	r7, r0
 8002812:	db01      	blt.n	8002818 <_malloc_r+0x1c>
 8002814:	42a9      	cmp	r1, r5
 8002816:	d905      	bls.n	8002824 <_malloc_r+0x28>
 8002818:	230c      	movs	r3, #12
 800281a:	603b      	str	r3, [r7, #0]
 800281c:	2600      	movs	r6, #0
 800281e:	4630      	mov	r0, r6
 8002820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002824:	4e2e      	ldr	r6, [pc, #184]	; (80028e0 <_malloc_r+0xe4>)
 8002826:	f000 fbf1 	bl	800300c <__malloc_lock>
 800282a:	6833      	ldr	r3, [r6, #0]
 800282c:	461c      	mov	r4, r3
 800282e:	bb34      	cbnz	r4, 800287e <_malloc_r+0x82>
 8002830:	4629      	mov	r1, r5
 8002832:	4638      	mov	r0, r7
 8002834:	f7ff ffc2 	bl	80027bc <sbrk_aligned>
 8002838:	1c43      	adds	r3, r0, #1
 800283a:	4604      	mov	r4, r0
 800283c:	d14d      	bne.n	80028da <_malloc_r+0xde>
 800283e:	6834      	ldr	r4, [r6, #0]
 8002840:	4626      	mov	r6, r4
 8002842:	2e00      	cmp	r6, #0
 8002844:	d140      	bne.n	80028c8 <_malloc_r+0xcc>
 8002846:	6823      	ldr	r3, [r4, #0]
 8002848:	4631      	mov	r1, r6
 800284a:	4638      	mov	r0, r7
 800284c:	eb04 0803 	add.w	r8, r4, r3
 8002850:	f000 f8ec 	bl	8002a2c <_sbrk_r>
 8002854:	4580      	cmp	r8, r0
 8002856:	d13a      	bne.n	80028ce <_malloc_r+0xd2>
 8002858:	6821      	ldr	r1, [r4, #0]
 800285a:	3503      	adds	r5, #3
 800285c:	1a6d      	subs	r5, r5, r1
 800285e:	f025 0503 	bic.w	r5, r5, #3
 8002862:	3508      	adds	r5, #8
 8002864:	2d0c      	cmp	r5, #12
 8002866:	bf38      	it	cc
 8002868:	250c      	movcc	r5, #12
 800286a:	4629      	mov	r1, r5
 800286c:	4638      	mov	r0, r7
 800286e:	f7ff ffa5 	bl	80027bc <sbrk_aligned>
 8002872:	3001      	adds	r0, #1
 8002874:	d02b      	beq.n	80028ce <_malloc_r+0xd2>
 8002876:	6823      	ldr	r3, [r4, #0]
 8002878:	442b      	add	r3, r5
 800287a:	6023      	str	r3, [r4, #0]
 800287c:	e00e      	b.n	800289c <_malloc_r+0xa0>
 800287e:	6822      	ldr	r2, [r4, #0]
 8002880:	1b52      	subs	r2, r2, r5
 8002882:	d41e      	bmi.n	80028c2 <_malloc_r+0xc6>
 8002884:	2a0b      	cmp	r2, #11
 8002886:	d916      	bls.n	80028b6 <_malloc_r+0xba>
 8002888:	1961      	adds	r1, r4, r5
 800288a:	42a3      	cmp	r3, r4
 800288c:	6025      	str	r5, [r4, #0]
 800288e:	bf18      	it	ne
 8002890:	6059      	strne	r1, [r3, #4]
 8002892:	6863      	ldr	r3, [r4, #4]
 8002894:	bf08      	it	eq
 8002896:	6031      	streq	r1, [r6, #0]
 8002898:	5162      	str	r2, [r4, r5]
 800289a:	604b      	str	r3, [r1, #4]
 800289c:	4638      	mov	r0, r7
 800289e:	f104 060b 	add.w	r6, r4, #11
 80028a2:	f000 fbb9 	bl	8003018 <__malloc_unlock>
 80028a6:	f026 0607 	bic.w	r6, r6, #7
 80028aa:	1d23      	adds	r3, r4, #4
 80028ac:	1af2      	subs	r2, r6, r3
 80028ae:	d0b6      	beq.n	800281e <_malloc_r+0x22>
 80028b0:	1b9b      	subs	r3, r3, r6
 80028b2:	50a3      	str	r3, [r4, r2]
 80028b4:	e7b3      	b.n	800281e <_malloc_r+0x22>
 80028b6:	6862      	ldr	r2, [r4, #4]
 80028b8:	42a3      	cmp	r3, r4
 80028ba:	bf0c      	ite	eq
 80028bc:	6032      	streq	r2, [r6, #0]
 80028be:	605a      	strne	r2, [r3, #4]
 80028c0:	e7ec      	b.n	800289c <_malloc_r+0xa0>
 80028c2:	4623      	mov	r3, r4
 80028c4:	6864      	ldr	r4, [r4, #4]
 80028c6:	e7b2      	b.n	800282e <_malloc_r+0x32>
 80028c8:	4634      	mov	r4, r6
 80028ca:	6876      	ldr	r6, [r6, #4]
 80028cc:	e7b9      	b.n	8002842 <_malloc_r+0x46>
 80028ce:	230c      	movs	r3, #12
 80028d0:	603b      	str	r3, [r7, #0]
 80028d2:	4638      	mov	r0, r7
 80028d4:	f000 fba0 	bl	8003018 <__malloc_unlock>
 80028d8:	e7a1      	b.n	800281e <_malloc_r+0x22>
 80028da:	6025      	str	r5, [r4, #0]
 80028dc:	e7de      	b.n	800289c <_malloc_r+0xa0>
 80028de:	bf00      	nop
 80028e0:	2000c1ac 	.word	0x2000c1ac

080028e4 <iprintf>:
 80028e4:	b40f      	push	{r0, r1, r2, r3}
 80028e6:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <iprintf+0x2c>)
 80028e8:	b513      	push	{r0, r1, r4, lr}
 80028ea:	681c      	ldr	r4, [r3, #0]
 80028ec:	b124      	cbz	r4, 80028f8 <iprintf+0x14>
 80028ee:	69a3      	ldr	r3, [r4, #24]
 80028f0:	b913      	cbnz	r3, 80028f8 <iprintf+0x14>
 80028f2:	4620      	mov	r0, r4
 80028f4:	f000 fa84 	bl	8002e00 <__sinit>
 80028f8:	ab05      	add	r3, sp, #20
 80028fa:	9a04      	ldr	r2, [sp, #16]
 80028fc:	68a1      	ldr	r1, [r4, #8]
 80028fe:	9301      	str	r3, [sp, #4]
 8002900:	4620      	mov	r0, r4
 8002902:	f000 fbb9 	bl	8003078 <_vfiprintf_r>
 8002906:	b002      	add	sp, #8
 8002908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800290c:	b004      	add	sp, #16
 800290e:	4770      	bx	lr
 8002910:	2000400c 	.word	0x2000400c

08002914 <putchar>:
 8002914:	4b09      	ldr	r3, [pc, #36]	; (800293c <putchar+0x28>)
 8002916:	b513      	push	{r0, r1, r4, lr}
 8002918:	681c      	ldr	r4, [r3, #0]
 800291a:	4601      	mov	r1, r0
 800291c:	b134      	cbz	r4, 800292c <putchar+0x18>
 800291e:	69a3      	ldr	r3, [r4, #24]
 8002920:	b923      	cbnz	r3, 800292c <putchar+0x18>
 8002922:	9001      	str	r0, [sp, #4]
 8002924:	4620      	mov	r0, r4
 8002926:	f000 fa6b 	bl	8002e00 <__sinit>
 800292a:	9901      	ldr	r1, [sp, #4]
 800292c:	68a2      	ldr	r2, [r4, #8]
 800292e:	4620      	mov	r0, r4
 8002930:	b002      	add	sp, #8
 8002932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002936:	f000 be63 	b.w	8003600 <_putc_r>
 800293a:	bf00      	nop
 800293c:	2000400c 	.word	0x2000400c

08002940 <_puts_r>:
 8002940:	b570      	push	{r4, r5, r6, lr}
 8002942:	460e      	mov	r6, r1
 8002944:	4605      	mov	r5, r0
 8002946:	b118      	cbz	r0, 8002950 <_puts_r+0x10>
 8002948:	6983      	ldr	r3, [r0, #24]
 800294a:	b90b      	cbnz	r3, 8002950 <_puts_r+0x10>
 800294c:	f000 fa58 	bl	8002e00 <__sinit>
 8002950:	69ab      	ldr	r3, [r5, #24]
 8002952:	68ac      	ldr	r4, [r5, #8]
 8002954:	b913      	cbnz	r3, 800295c <_puts_r+0x1c>
 8002956:	4628      	mov	r0, r5
 8002958:	f000 fa52 	bl	8002e00 <__sinit>
 800295c:	4b2c      	ldr	r3, [pc, #176]	; (8002a10 <_puts_r+0xd0>)
 800295e:	429c      	cmp	r4, r3
 8002960:	d120      	bne.n	80029a4 <_puts_r+0x64>
 8002962:	686c      	ldr	r4, [r5, #4]
 8002964:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002966:	07db      	lsls	r3, r3, #31
 8002968:	d405      	bmi.n	8002976 <_puts_r+0x36>
 800296a:	89a3      	ldrh	r3, [r4, #12]
 800296c:	0598      	lsls	r0, r3, #22
 800296e:	d402      	bmi.n	8002976 <_puts_r+0x36>
 8002970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002972:	f000 fae3 	bl	8002f3c <__retarget_lock_acquire_recursive>
 8002976:	89a3      	ldrh	r3, [r4, #12]
 8002978:	0719      	lsls	r1, r3, #28
 800297a:	d51d      	bpl.n	80029b8 <_puts_r+0x78>
 800297c:	6923      	ldr	r3, [r4, #16]
 800297e:	b1db      	cbz	r3, 80029b8 <_puts_r+0x78>
 8002980:	3e01      	subs	r6, #1
 8002982:	68a3      	ldr	r3, [r4, #8]
 8002984:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002988:	3b01      	subs	r3, #1
 800298a:	60a3      	str	r3, [r4, #8]
 800298c:	bb39      	cbnz	r1, 80029de <_puts_r+0x9e>
 800298e:	2b00      	cmp	r3, #0
 8002990:	da38      	bge.n	8002a04 <_puts_r+0xc4>
 8002992:	4622      	mov	r2, r4
 8002994:	210a      	movs	r1, #10
 8002996:	4628      	mov	r0, r5
 8002998:	f000 f858 	bl	8002a4c <__swbuf_r>
 800299c:	3001      	adds	r0, #1
 800299e:	d011      	beq.n	80029c4 <_puts_r+0x84>
 80029a0:	250a      	movs	r5, #10
 80029a2:	e011      	b.n	80029c8 <_puts_r+0x88>
 80029a4:	4b1b      	ldr	r3, [pc, #108]	; (8002a14 <_puts_r+0xd4>)
 80029a6:	429c      	cmp	r4, r3
 80029a8:	d101      	bne.n	80029ae <_puts_r+0x6e>
 80029aa:	68ac      	ldr	r4, [r5, #8]
 80029ac:	e7da      	b.n	8002964 <_puts_r+0x24>
 80029ae:	4b1a      	ldr	r3, [pc, #104]	; (8002a18 <_puts_r+0xd8>)
 80029b0:	429c      	cmp	r4, r3
 80029b2:	bf08      	it	eq
 80029b4:	68ec      	ldreq	r4, [r5, #12]
 80029b6:	e7d5      	b.n	8002964 <_puts_r+0x24>
 80029b8:	4621      	mov	r1, r4
 80029ba:	4628      	mov	r0, r5
 80029bc:	f000 f898 	bl	8002af0 <__swsetup_r>
 80029c0:	2800      	cmp	r0, #0
 80029c2:	d0dd      	beq.n	8002980 <_puts_r+0x40>
 80029c4:	f04f 35ff 	mov.w	r5, #4294967295
 80029c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80029ca:	07da      	lsls	r2, r3, #31
 80029cc:	d405      	bmi.n	80029da <_puts_r+0x9a>
 80029ce:	89a3      	ldrh	r3, [r4, #12]
 80029d0:	059b      	lsls	r3, r3, #22
 80029d2:	d402      	bmi.n	80029da <_puts_r+0x9a>
 80029d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029d6:	f000 fab2 	bl	8002f3e <__retarget_lock_release_recursive>
 80029da:	4628      	mov	r0, r5
 80029dc:	bd70      	pop	{r4, r5, r6, pc}
 80029de:	2b00      	cmp	r3, #0
 80029e0:	da04      	bge.n	80029ec <_puts_r+0xac>
 80029e2:	69a2      	ldr	r2, [r4, #24]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	dc06      	bgt.n	80029f6 <_puts_r+0xb6>
 80029e8:	290a      	cmp	r1, #10
 80029ea:	d004      	beq.n	80029f6 <_puts_r+0xb6>
 80029ec:	6823      	ldr	r3, [r4, #0]
 80029ee:	1c5a      	adds	r2, r3, #1
 80029f0:	6022      	str	r2, [r4, #0]
 80029f2:	7019      	strb	r1, [r3, #0]
 80029f4:	e7c5      	b.n	8002982 <_puts_r+0x42>
 80029f6:	4622      	mov	r2, r4
 80029f8:	4628      	mov	r0, r5
 80029fa:	f000 f827 	bl	8002a4c <__swbuf_r>
 80029fe:	3001      	adds	r0, #1
 8002a00:	d1bf      	bne.n	8002982 <_puts_r+0x42>
 8002a02:	e7df      	b.n	80029c4 <_puts_r+0x84>
 8002a04:	6823      	ldr	r3, [r4, #0]
 8002a06:	250a      	movs	r5, #10
 8002a08:	1c5a      	adds	r2, r3, #1
 8002a0a:	6022      	str	r2, [r4, #0]
 8002a0c:	701d      	strb	r5, [r3, #0]
 8002a0e:	e7db      	b.n	80029c8 <_puts_r+0x88>
 8002a10:	08004310 	.word	0x08004310
 8002a14:	08004330 	.word	0x08004330
 8002a18:	080042f0 	.word	0x080042f0

08002a1c <puts>:
 8002a1c:	4b02      	ldr	r3, [pc, #8]	; (8002a28 <puts+0xc>)
 8002a1e:	4601      	mov	r1, r0
 8002a20:	6818      	ldr	r0, [r3, #0]
 8002a22:	f7ff bf8d 	b.w	8002940 <_puts_r>
 8002a26:	bf00      	nop
 8002a28:	2000400c 	.word	0x2000400c

08002a2c <_sbrk_r>:
 8002a2c:	b538      	push	{r3, r4, r5, lr}
 8002a2e:	4d06      	ldr	r5, [pc, #24]	; (8002a48 <_sbrk_r+0x1c>)
 8002a30:	2300      	movs	r3, #0
 8002a32:	4604      	mov	r4, r0
 8002a34:	4608      	mov	r0, r1
 8002a36:	602b      	str	r3, [r5, #0]
 8002a38:	f7fd ffaa 	bl	8000990 <_sbrk>
 8002a3c:	1c43      	adds	r3, r0, #1
 8002a3e:	d102      	bne.n	8002a46 <_sbrk_r+0x1a>
 8002a40:	682b      	ldr	r3, [r5, #0]
 8002a42:	b103      	cbz	r3, 8002a46 <_sbrk_r+0x1a>
 8002a44:	6023      	str	r3, [r4, #0]
 8002a46:	bd38      	pop	{r3, r4, r5, pc}
 8002a48:	2000c1b8 	.word	0x2000c1b8

08002a4c <__swbuf_r>:
 8002a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a4e:	460e      	mov	r6, r1
 8002a50:	4614      	mov	r4, r2
 8002a52:	4605      	mov	r5, r0
 8002a54:	b118      	cbz	r0, 8002a5e <__swbuf_r+0x12>
 8002a56:	6983      	ldr	r3, [r0, #24]
 8002a58:	b90b      	cbnz	r3, 8002a5e <__swbuf_r+0x12>
 8002a5a:	f000 f9d1 	bl	8002e00 <__sinit>
 8002a5e:	4b21      	ldr	r3, [pc, #132]	; (8002ae4 <__swbuf_r+0x98>)
 8002a60:	429c      	cmp	r4, r3
 8002a62:	d12b      	bne.n	8002abc <__swbuf_r+0x70>
 8002a64:	686c      	ldr	r4, [r5, #4]
 8002a66:	69a3      	ldr	r3, [r4, #24]
 8002a68:	60a3      	str	r3, [r4, #8]
 8002a6a:	89a3      	ldrh	r3, [r4, #12]
 8002a6c:	071a      	lsls	r2, r3, #28
 8002a6e:	d52f      	bpl.n	8002ad0 <__swbuf_r+0x84>
 8002a70:	6923      	ldr	r3, [r4, #16]
 8002a72:	b36b      	cbz	r3, 8002ad0 <__swbuf_r+0x84>
 8002a74:	6923      	ldr	r3, [r4, #16]
 8002a76:	6820      	ldr	r0, [r4, #0]
 8002a78:	1ac0      	subs	r0, r0, r3
 8002a7a:	6963      	ldr	r3, [r4, #20]
 8002a7c:	b2f6      	uxtb	r6, r6
 8002a7e:	4283      	cmp	r3, r0
 8002a80:	4637      	mov	r7, r6
 8002a82:	dc04      	bgt.n	8002a8e <__swbuf_r+0x42>
 8002a84:	4621      	mov	r1, r4
 8002a86:	4628      	mov	r0, r5
 8002a88:	f000 f926 	bl	8002cd8 <_fflush_r>
 8002a8c:	bb30      	cbnz	r0, 8002adc <__swbuf_r+0x90>
 8002a8e:	68a3      	ldr	r3, [r4, #8]
 8002a90:	3b01      	subs	r3, #1
 8002a92:	60a3      	str	r3, [r4, #8]
 8002a94:	6823      	ldr	r3, [r4, #0]
 8002a96:	1c5a      	adds	r2, r3, #1
 8002a98:	6022      	str	r2, [r4, #0]
 8002a9a:	701e      	strb	r6, [r3, #0]
 8002a9c:	6963      	ldr	r3, [r4, #20]
 8002a9e:	3001      	adds	r0, #1
 8002aa0:	4283      	cmp	r3, r0
 8002aa2:	d004      	beq.n	8002aae <__swbuf_r+0x62>
 8002aa4:	89a3      	ldrh	r3, [r4, #12]
 8002aa6:	07db      	lsls	r3, r3, #31
 8002aa8:	d506      	bpl.n	8002ab8 <__swbuf_r+0x6c>
 8002aaa:	2e0a      	cmp	r6, #10
 8002aac:	d104      	bne.n	8002ab8 <__swbuf_r+0x6c>
 8002aae:	4621      	mov	r1, r4
 8002ab0:	4628      	mov	r0, r5
 8002ab2:	f000 f911 	bl	8002cd8 <_fflush_r>
 8002ab6:	b988      	cbnz	r0, 8002adc <__swbuf_r+0x90>
 8002ab8:	4638      	mov	r0, r7
 8002aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002abc:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <__swbuf_r+0x9c>)
 8002abe:	429c      	cmp	r4, r3
 8002ac0:	d101      	bne.n	8002ac6 <__swbuf_r+0x7a>
 8002ac2:	68ac      	ldr	r4, [r5, #8]
 8002ac4:	e7cf      	b.n	8002a66 <__swbuf_r+0x1a>
 8002ac6:	4b09      	ldr	r3, [pc, #36]	; (8002aec <__swbuf_r+0xa0>)
 8002ac8:	429c      	cmp	r4, r3
 8002aca:	bf08      	it	eq
 8002acc:	68ec      	ldreq	r4, [r5, #12]
 8002ace:	e7ca      	b.n	8002a66 <__swbuf_r+0x1a>
 8002ad0:	4621      	mov	r1, r4
 8002ad2:	4628      	mov	r0, r5
 8002ad4:	f000 f80c 	bl	8002af0 <__swsetup_r>
 8002ad8:	2800      	cmp	r0, #0
 8002ada:	d0cb      	beq.n	8002a74 <__swbuf_r+0x28>
 8002adc:	f04f 37ff 	mov.w	r7, #4294967295
 8002ae0:	e7ea      	b.n	8002ab8 <__swbuf_r+0x6c>
 8002ae2:	bf00      	nop
 8002ae4:	08004310 	.word	0x08004310
 8002ae8:	08004330 	.word	0x08004330
 8002aec:	080042f0 	.word	0x080042f0

08002af0 <__swsetup_r>:
 8002af0:	4b32      	ldr	r3, [pc, #200]	; (8002bbc <__swsetup_r+0xcc>)
 8002af2:	b570      	push	{r4, r5, r6, lr}
 8002af4:	681d      	ldr	r5, [r3, #0]
 8002af6:	4606      	mov	r6, r0
 8002af8:	460c      	mov	r4, r1
 8002afa:	b125      	cbz	r5, 8002b06 <__swsetup_r+0x16>
 8002afc:	69ab      	ldr	r3, [r5, #24]
 8002afe:	b913      	cbnz	r3, 8002b06 <__swsetup_r+0x16>
 8002b00:	4628      	mov	r0, r5
 8002b02:	f000 f97d 	bl	8002e00 <__sinit>
 8002b06:	4b2e      	ldr	r3, [pc, #184]	; (8002bc0 <__swsetup_r+0xd0>)
 8002b08:	429c      	cmp	r4, r3
 8002b0a:	d10f      	bne.n	8002b2c <__swsetup_r+0x3c>
 8002b0c:	686c      	ldr	r4, [r5, #4]
 8002b0e:	89a3      	ldrh	r3, [r4, #12]
 8002b10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002b14:	0719      	lsls	r1, r3, #28
 8002b16:	d42c      	bmi.n	8002b72 <__swsetup_r+0x82>
 8002b18:	06dd      	lsls	r5, r3, #27
 8002b1a:	d411      	bmi.n	8002b40 <__swsetup_r+0x50>
 8002b1c:	2309      	movs	r3, #9
 8002b1e:	6033      	str	r3, [r6, #0]
 8002b20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002b24:	81a3      	strh	r3, [r4, #12]
 8002b26:	f04f 30ff 	mov.w	r0, #4294967295
 8002b2a:	e03e      	b.n	8002baa <__swsetup_r+0xba>
 8002b2c:	4b25      	ldr	r3, [pc, #148]	; (8002bc4 <__swsetup_r+0xd4>)
 8002b2e:	429c      	cmp	r4, r3
 8002b30:	d101      	bne.n	8002b36 <__swsetup_r+0x46>
 8002b32:	68ac      	ldr	r4, [r5, #8]
 8002b34:	e7eb      	b.n	8002b0e <__swsetup_r+0x1e>
 8002b36:	4b24      	ldr	r3, [pc, #144]	; (8002bc8 <__swsetup_r+0xd8>)
 8002b38:	429c      	cmp	r4, r3
 8002b3a:	bf08      	it	eq
 8002b3c:	68ec      	ldreq	r4, [r5, #12]
 8002b3e:	e7e6      	b.n	8002b0e <__swsetup_r+0x1e>
 8002b40:	0758      	lsls	r0, r3, #29
 8002b42:	d512      	bpl.n	8002b6a <__swsetup_r+0x7a>
 8002b44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b46:	b141      	cbz	r1, 8002b5a <__swsetup_r+0x6a>
 8002b48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b4c:	4299      	cmp	r1, r3
 8002b4e:	d002      	beq.n	8002b56 <__swsetup_r+0x66>
 8002b50:	4630      	mov	r0, r6
 8002b52:	f7ff fde7 	bl	8002724 <_free_r>
 8002b56:	2300      	movs	r3, #0
 8002b58:	6363      	str	r3, [r4, #52]	; 0x34
 8002b5a:	89a3      	ldrh	r3, [r4, #12]
 8002b5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002b60:	81a3      	strh	r3, [r4, #12]
 8002b62:	2300      	movs	r3, #0
 8002b64:	6063      	str	r3, [r4, #4]
 8002b66:	6923      	ldr	r3, [r4, #16]
 8002b68:	6023      	str	r3, [r4, #0]
 8002b6a:	89a3      	ldrh	r3, [r4, #12]
 8002b6c:	f043 0308 	orr.w	r3, r3, #8
 8002b70:	81a3      	strh	r3, [r4, #12]
 8002b72:	6923      	ldr	r3, [r4, #16]
 8002b74:	b94b      	cbnz	r3, 8002b8a <__swsetup_r+0x9a>
 8002b76:	89a3      	ldrh	r3, [r4, #12]
 8002b78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b80:	d003      	beq.n	8002b8a <__swsetup_r+0x9a>
 8002b82:	4621      	mov	r1, r4
 8002b84:	4630      	mov	r0, r6
 8002b86:	f000 fa01 	bl	8002f8c <__smakebuf_r>
 8002b8a:	89a0      	ldrh	r0, [r4, #12]
 8002b8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002b90:	f010 0301 	ands.w	r3, r0, #1
 8002b94:	d00a      	beq.n	8002bac <__swsetup_r+0xbc>
 8002b96:	2300      	movs	r3, #0
 8002b98:	60a3      	str	r3, [r4, #8]
 8002b9a:	6963      	ldr	r3, [r4, #20]
 8002b9c:	425b      	negs	r3, r3
 8002b9e:	61a3      	str	r3, [r4, #24]
 8002ba0:	6923      	ldr	r3, [r4, #16]
 8002ba2:	b943      	cbnz	r3, 8002bb6 <__swsetup_r+0xc6>
 8002ba4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002ba8:	d1ba      	bne.n	8002b20 <__swsetup_r+0x30>
 8002baa:	bd70      	pop	{r4, r5, r6, pc}
 8002bac:	0781      	lsls	r1, r0, #30
 8002bae:	bf58      	it	pl
 8002bb0:	6963      	ldrpl	r3, [r4, #20]
 8002bb2:	60a3      	str	r3, [r4, #8]
 8002bb4:	e7f4      	b.n	8002ba0 <__swsetup_r+0xb0>
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	e7f7      	b.n	8002baa <__swsetup_r+0xba>
 8002bba:	bf00      	nop
 8002bbc:	2000400c 	.word	0x2000400c
 8002bc0:	08004310 	.word	0x08004310
 8002bc4:	08004330 	.word	0x08004330
 8002bc8:	080042f0 	.word	0x080042f0

08002bcc <__sflush_r>:
 8002bcc:	898a      	ldrh	r2, [r1, #12]
 8002bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bd2:	4605      	mov	r5, r0
 8002bd4:	0710      	lsls	r0, r2, #28
 8002bd6:	460c      	mov	r4, r1
 8002bd8:	d458      	bmi.n	8002c8c <__sflush_r+0xc0>
 8002bda:	684b      	ldr	r3, [r1, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	dc05      	bgt.n	8002bec <__sflush_r+0x20>
 8002be0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	dc02      	bgt.n	8002bec <__sflush_r+0x20>
 8002be6:	2000      	movs	r0, #0
 8002be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002bee:	2e00      	cmp	r6, #0
 8002bf0:	d0f9      	beq.n	8002be6 <__sflush_r+0x1a>
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002bf8:	682f      	ldr	r7, [r5, #0]
 8002bfa:	602b      	str	r3, [r5, #0]
 8002bfc:	d032      	beq.n	8002c64 <__sflush_r+0x98>
 8002bfe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002c00:	89a3      	ldrh	r3, [r4, #12]
 8002c02:	075a      	lsls	r2, r3, #29
 8002c04:	d505      	bpl.n	8002c12 <__sflush_r+0x46>
 8002c06:	6863      	ldr	r3, [r4, #4]
 8002c08:	1ac0      	subs	r0, r0, r3
 8002c0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002c0c:	b10b      	cbz	r3, 8002c12 <__sflush_r+0x46>
 8002c0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c10:	1ac0      	subs	r0, r0, r3
 8002c12:	2300      	movs	r3, #0
 8002c14:	4602      	mov	r2, r0
 8002c16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002c18:	6a21      	ldr	r1, [r4, #32]
 8002c1a:	4628      	mov	r0, r5
 8002c1c:	47b0      	blx	r6
 8002c1e:	1c43      	adds	r3, r0, #1
 8002c20:	89a3      	ldrh	r3, [r4, #12]
 8002c22:	d106      	bne.n	8002c32 <__sflush_r+0x66>
 8002c24:	6829      	ldr	r1, [r5, #0]
 8002c26:	291d      	cmp	r1, #29
 8002c28:	d82c      	bhi.n	8002c84 <__sflush_r+0xb8>
 8002c2a:	4a2a      	ldr	r2, [pc, #168]	; (8002cd4 <__sflush_r+0x108>)
 8002c2c:	40ca      	lsrs	r2, r1
 8002c2e:	07d6      	lsls	r6, r2, #31
 8002c30:	d528      	bpl.n	8002c84 <__sflush_r+0xb8>
 8002c32:	2200      	movs	r2, #0
 8002c34:	6062      	str	r2, [r4, #4]
 8002c36:	04d9      	lsls	r1, r3, #19
 8002c38:	6922      	ldr	r2, [r4, #16]
 8002c3a:	6022      	str	r2, [r4, #0]
 8002c3c:	d504      	bpl.n	8002c48 <__sflush_r+0x7c>
 8002c3e:	1c42      	adds	r2, r0, #1
 8002c40:	d101      	bne.n	8002c46 <__sflush_r+0x7a>
 8002c42:	682b      	ldr	r3, [r5, #0]
 8002c44:	b903      	cbnz	r3, 8002c48 <__sflush_r+0x7c>
 8002c46:	6560      	str	r0, [r4, #84]	; 0x54
 8002c48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c4a:	602f      	str	r7, [r5, #0]
 8002c4c:	2900      	cmp	r1, #0
 8002c4e:	d0ca      	beq.n	8002be6 <__sflush_r+0x1a>
 8002c50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c54:	4299      	cmp	r1, r3
 8002c56:	d002      	beq.n	8002c5e <__sflush_r+0x92>
 8002c58:	4628      	mov	r0, r5
 8002c5a:	f7ff fd63 	bl	8002724 <_free_r>
 8002c5e:	2000      	movs	r0, #0
 8002c60:	6360      	str	r0, [r4, #52]	; 0x34
 8002c62:	e7c1      	b.n	8002be8 <__sflush_r+0x1c>
 8002c64:	6a21      	ldr	r1, [r4, #32]
 8002c66:	2301      	movs	r3, #1
 8002c68:	4628      	mov	r0, r5
 8002c6a:	47b0      	blx	r6
 8002c6c:	1c41      	adds	r1, r0, #1
 8002c6e:	d1c7      	bne.n	8002c00 <__sflush_r+0x34>
 8002c70:	682b      	ldr	r3, [r5, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0c4      	beq.n	8002c00 <__sflush_r+0x34>
 8002c76:	2b1d      	cmp	r3, #29
 8002c78:	d001      	beq.n	8002c7e <__sflush_r+0xb2>
 8002c7a:	2b16      	cmp	r3, #22
 8002c7c:	d101      	bne.n	8002c82 <__sflush_r+0xb6>
 8002c7e:	602f      	str	r7, [r5, #0]
 8002c80:	e7b1      	b.n	8002be6 <__sflush_r+0x1a>
 8002c82:	89a3      	ldrh	r3, [r4, #12]
 8002c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c88:	81a3      	strh	r3, [r4, #12]
 8002c8a:	e7ad      	b.n	8002be8 <__sflush_r+0x1c>
 8002c8c:	690f      	ldr	r7, [r1, #16]
 8002c8e:	2f00      	cmp	r7, #0
 8002c90:	d0a9      	beq.n	8002be6 <__sflush_r+0x1a>
 8002c92:	0793      	lsls	r3, r2, #30
 8002c94:	680e      	ldr	r6, [r1, #0]
 8002c96:	bf08      	it	eq
 8002c98:	694b      	ldreq	r3, [r1, #20]
 8002c9a:	600f      	str	r7, [r1, #0]
 8002c9c:	bf18      	it	ne
 8002c9e:	2300      	movne	r3, #0
 8002ca0:	eba6 0807 	sub.w	r8, r6, r7
 8002ca4:	608b      	str	r3, [r1, #8]
 8002ca6:	f1b8 0f00 	cmp.w	r8, #0
 8002caa:	dd9c      	ble.n	8002be6 <__sflush_r+0x1a>
 8002cac:	6a21      	ldr	r1, [r4, #32]
 8002cae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002cb0:	4643      	mov	r3, r8
 8002cb2:	463a      	mov	r2, r7
 8002cb4:	4628      	mov	r0, r5
 8002cb6:	47b0      	blx	r6
 8002cb8:	2800      	cmp	r0, #0
 8002cba:	dc06      	bgt.n	8002cca <__sflush_r+0xfe>
 8002cbc:	89a3      	ldrh	r3, [r4, #12]
 8002cbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cc2:	81a3      	strh	r3, [r4, #12]
 8002cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc8:	e78e      	b.n	8002be8 <__sflush_r+0x1c>
 8002cca:	4407      	add	r7, r0
 8002ccc:	eba8 0800 	sub.w	r8, r8, r0
 8002cd0:	e7e9      	b.n	8002ca6 <__sflush_r+0xda>
 8002cd2:	bf00      	nop
 8002cd4:	20400001 	.word	0x20400001

08002cd8 <_fflush_r>:
 8002cd8:	b538      	push	{r3, r4, r5, lr}
 8002cda:	690b      	ldr	r3, [r1, #16]
 8002cdc:	4605      	mov	r5, r0
 8002cde:	460c      	mov	r4, r1
 8002ce0:	b913      	cbnz	r3, 8002ce8 <_fflush_r+0x10>
 8002ce2:	2500      	movs	r5, #0
 8002ce4:	4628      	mov	r0, r5
 8002ce6:	bd38      	pop	{r3, r4, r5, pc}
 8002ce8:	b118      	cbz	r0, 8002cf2 <_fflush_r+0x1a>
 8002cea:	6983      	ldr	r3, [r0, #24]
 8002cec:	b90b      	cbnz	r3, 8002cf2 <_fflush_r+0x1a>
 8002cee:	f000 f887 	bl	8002e00 <__sinit>
 8002cf2:	4b14      	ldr	r3, [pc, #80]	; (8002d44 <_fflush_r+0x6c>)
 8002cf4:	429c      	cmp	r4, r3
 8002cf6:	d11b      	bne.n	8002d30 <_fflush_r+0x58>
 8002cf8:	686c      	ldr	r4, [r5, #4]
 8002cfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0ef      	beq.n	8002ce2 <_fflush_r+0xa>
 8002d02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002d04:	07d0      	lsls	r0, r2, #31
 8002d06:	d404      	bmi.n	8002d12 <_fflush_r+0x3a>
 8002d08:	0599      	lsls	r1, r3, #22
 8002d0a:	d402      	bmi.n	8002d12 <_fflush_r+0x3a>
 8002d0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d0e:	f000 f915 	bl	8002f3c <__retarget_lock_acquire_recursive>
 8002d12:	4628      	mov	r0, r5
 8002d14:	4621      	mov	r1, r4
 8002d16:	f7ff ff59 	bl	8002bcc <__sflush_r>
 8002d1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d1c:	07da      	lsls	r2, r3, #31
 8002d1e:	4605      	mov	r5, r0
 8002d20:	d4e0      	bmi.n	8002ce4 <_fflush_r+0xc>
 8002d22:	89a3      	ldrh	r3, [r4, #12]
 8002d24:	059b      	lsls	r3, r3, #22
 8002d26:	d4dd      	bmi.n	8002ce4 <_fflush_r+0xc>
 8002d28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d2a:	f000 f908 	bl	8002f3e <__retarget_lock_release_recursive>
 8002d2e:	e7d9      	b.n	8002ce4 <_fflush_r+0xc>
 8002d30:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <_fflush_r+0x70>)
 8002d32:	429c      	cmp	r4, r3
 8002d34:	d101      	bne.n	8002d3a <_fflush_r+0x62>
 8002d36:	68ac      	ldr	r4, [r5, #8]
 8002d38:	e7df      	b.n	8002cfa <_fflush_r+0x22>
 8002d3a:	4b04      	ldr	r3, [pc, #16]	; (8002d4c <_fflush_r+0x74>)
 8002d3c:	429c      	cmp	r4, r3
 8002d3e:	bf08      	it	eq
 8002d40:	68ec      	ldreq	r4, [r5, #12]
 8002d42:	e7da      	b.n	8002cfa <_fflush_r+0x22>
 8002d44:	08004310 	.word	0x08004310
 8002d48:	08004330 	.word	0x08004330
 8002d4c:	080042f0 	.word	0x080042f0

08002d50 <std>:
 8002d50:	2300      	movs	r3, #0
 8002d52:	b510      	push	{r4, lr}
 8002d54:	4604      	mov	r4, r0
 8002d56:	e9c0 3300 	strd	r3, r3, [r0]
 8002d5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002d5e:	6083      	str	r3, [r0, #8]
 8002d60:	8181      	strh	r1, [r0, #12]
 8002d62:	6643      	str	r3, [r0, #100]	; 0x64
 8002d64:	81c2      	strh	r2, [r0, #14]
 8002d66:	6183      	str	r3, [r0, #24]
 8002d68:	4619      	mov	r1, r3
 8002d6a:	2208      	movs	r2, #8
 8002d6c:	305c      	adds	r0, #92	; 0x5c
 8002d6e:	f7ff fcd1 	bl	8002714 <memset>
 8002d72:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <std+0x38>)
 8002d74:	6263      	str	r3, [r4, #36]	; 0x24
 8002d76:	4b05      	ldr	r3, [pc, #20]	; (8002d8c <std+0x3c>)
 8002d78:	62a3      	str	r3, [r4, #40]	; 0x28
 8002d7a:	4b05      	ldr	r3, [pc, #20]	; (8002d90 <std+0x40>)
 8002d7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002d7e:	4b05      	ldr	r3, [pc, #20]	; (8002d94 <std+0x44>)
 8002d80:	6224      	str	r4, [r4, #32]
 8002d82:	6323      	str	r3, [r4, #48]	; 0x30
 8002d84:	bd10      	pop	{r4, pc}
 8002d86:	bf00      	nop
 8002d88:	08003691 	.word	0x08003691
 8002d8c:	080036b3 	.word	0x080036b3
 8002d90:	080036eb 	.word	0x080036eb
 8002d94:	0800370f 	.word	0x0800370f

08002d98 <_cleanup_r>:
 8002d98:	4901      	ldr	r1, [pc, #4]	; (8002da0 <_cleanup_r+0x8>)
 8002d9a:	f000 b8af 	b.w	8002efc <_fwalk_reent>
 8002d9e:	bf00      	nop
 8002da0:	08002cd9 	.word	0x08002cd9

08002da4 <__sfmoreglue>:
 8002da4:	b570      	push	{r4, r5, r6, lr}
 8002da6:	2268      	movs	r2, #104	; 0x68
 8002da8:	1e4d      	subs	r5, r1, #1
 8002daa:	4355      	muls	r5, r2
 8002dac:	460e      	mov	r6, r1
 8002dae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002db2:	f7ff fd23 	bl	80027fc <_malloc_r>
 8002db6:	4604      	mov	r4, r0
 8002db8:	b140      	cbz	r0, 8002dcc <__sfmoreglue+0x28>
 8002dba:	2100      	movs	r1, #0
 8002dbc:	e9c0 1600 	strd	r1, r6, [r0]
 8002dc0:	300c      	adds	r0, #12
 8002dc2:	60a0      	str	r0, [r4, #8]
 8002dc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002dc8:	f7ff fca4 	bl	8002714 <memset>
 8002dcc:	4620      	mov	r0, r4
 8002dce:	bd70      	pop	{r4, r5, r6, pc}

08002dd0 <__sfp_lock_acquire>:
 8002dd0:	4801      	ldr	r0, [pc, #4]	; (8002dd8 <__sfp_lock_acquire+0x8>)
 8002dd2:	f000 b8b3 	b.w	8002f3c <__retarget_lock_acquire_recursive>
 8002dd6:	bf00      	nop
 8002dd8:	2000c1b5 	.word	0x2000c1b5

08002ddc <__sfp_lock_release>:
 8002ddc:	4801      	ldr	r0, [pc, #4]	; (8002de4 <__sfp_lock_release+0x8>)
 8002dde:	f000 b8ae 	b.w	8002f3e <__retarget_lock_release_recursive>
 8002de2:	bf00      	nop
 8002de4:	2000c1b5 	.word	0x2000c1b5

08002de8 <__sinit_lock_acquire>:
 8002de8:	4801      	ldr	r0, [pc, #4]	; (8002df0 <__sinit_lock_acquire+0x8>)
 8002dea:	f000 b8a7 	b.w	8002f3c <__retarget_lock_acquire_recursive>
 8002dee:	bf00      	nop
 8002df0:	2000c1b6 	.word	0x2000c1b6

08002df4 <__sinit_lock_release>:
 8002df4:	4801      	ldr	r0, [pc, #4]	; (8002dfc <__sinit_lock_release+0x8>)
 8002df6:	f000 b8a2 	b.w	8002f3e <__retarget_lock_release_recursive>
 8002dfa:	bf00      	nop
 8002dfc:	2000c1b6 	.word	0x2000c1b6

08002e00 <__sinit>:
 8002e00:	b510      	push	{r4, lr}
 8002e02:	4604      	mov	r4, r0
 8002e04:	f7ff fff0 	bl	8002de8 <__sinit_lock_acquire>
 8002e08:	69a3      	ldr	r3, [r4, #24]
 8002e0a:	b11b      	cbz	r3, 8002e14 <__sinit+0x14>
 8002e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e10:	f7ff bff0 	b.w	8002df4 <__sinit_lock_release>
 8002e14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002e18:	6523      	str	r3, [r4, #80]	; 0x50
 8002e1a:	4b13      	ldr	r3, [pc, #76]	; (8002e68 <__sinit+0x68>)
 8002e1c:	4a13      	ldr	r2, [pc, #76]	; (8002e6c <__sinit+0x6c>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	62a2      	str	r2, [r4, #40]	; 0x28
 8002e22:	42a3      	cmp	r3, r4
 8002e24:	bf04      	itt	eq
 8002e26:	2301      	moveq	r3, #1
 8002e28:	61a3      	streq	r3, [r4, #24]
 8002e2a:	4620      	mov	r0, r4
 8002e2c:	f000 f820 	bl	8002e70 <__sfp>
 8002e30:	6060      	str	r0, [r4, #4]
 8002e32:	4620      	mov	r0, r4
 8002e34:	f000 f81c 	bl	8002e70 <__sfp>
 8002e38:	60a0      	str	r0, [r4, #8]
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	f000 f818 	bl	8002e70 <__sfp>
 8002e40:	2200      	movs	r2, #0
 8002e42:	60e0      	str	r0, [r4, #12]
 8002e44:	2104      	movs	r1, #4
 8002e46:	6860      	ldr	r0, [r4, #4]
 8002e48:	f7ff ff82 	bl	8002d50 <std>
 8002e4c:	68a0      	ldr	r0, [r4, #8]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	2109      	movs	r1, #9
 8002e52:	f7ff ff7d 	bl	8002d50 <std>
 8002e56:	68e0      	ldr	r0, [r4, #12]
 8002e58:	2202      	movs	r2, #2
 8002e5a:	2112      	movs	r1, #18
 8002e5c:	f7ff ff78 	bl	8002d50 <std>
 8002e60:	2301      	movs	r3, #1
 8002e62:	61a3      	str	r3, [r4, #24]
 8002e64:	e7d2      	b.n	8002e0c <__sinit+0xc>
 8002e66:	bf00      	nop
 8002e68:	080042ec 	.word	0x080042ec
 8002e6c:	08002d99 	.word	0x08002d99

08002e70 <__sfp>:
 8002e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e72:	4607      	mov	r7, r0
 8002e74:	f7ff ffac 	bl	8002dd0 <__sfp_lock_acquire>
 8002e78:	4b1e      	ldr	r3, [pc, #120]	; (8002ef4 <__sfp+0x84>)
 8002e7a:	681e      	ldr	r6, [r3, #0]
 8002e7c:	69b3      	ldr	r3, [r6, #24]
 8002e7e:	b913      	cbnz	r3, 8002e86 <__sfp+0x16>
 8002e80:	4630      	mov	r0, r6
 8002e82:	f7ff ffbd 	bl	8002e00 <__sinit>
 8002e86:	3648      	adds	r6, #72	; 0x48
 8002e88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	d503      	bpl.n	8002e98 <__sfp+0x28>
 8002e90:	6833      	ldr	r3, [r6, #0]
 8002e92:	b30b      	cbz	r3, 8002ed8 <__sfp+0x68>
 8002e94:	6836      	ldr	r6, [r6, #0]
 8002e96:	e7f7      	b.n	8002e88 <__sfp+0x18>
 8002e98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002e9c:	b9d5      	cbnz	r5, 8002ed4 <__sfp+0x64>
 8002e9e:	4b16      	ldr	r3, [pc, #88]	; (8002ef8 <__sfp+0x88>)
 8002ea0:	60e3      	str	r3, [r4, #12]
 8002ea2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002ea6:	6665      	str	r5, [r4, #100]	; 0x64
 8002ea8:	f000 f847 	bl	8002f3a <__retarget_lock_init_recursive>
 8002eac:	f7ff ff96 	bl	8002ddc <__sfp_lock_release>
 8002eb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002eb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002eb8:	6025      	str	r5, [r4, #0]
 8002eba:	61a5      	str	r5, [r4, #24]
 8002ebc:	2208      	movs	r2, #8
 8002ebe:	4629      	mov	r1, r5
 8002ec0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002ec4:	f7ff fc26 	bl	8002714 <memset>
 8002ec8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002ecc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002ed0:	4620      	mov	r0, r4
 8002ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ed4:	3468      	adds	r4, #104	; 0x68
 8002ed6:	e7d9      	b.n	8002e8c <__sfp+0x1c>
 8002ed8:	2104      	movs	r1, #4
 8002eda:	4638      	mov	r0, r7
 8002edc:	f7ff ff62 	bl	8002da4 <__sfmoreglue>
 8002ee0:	4604      	mov	r4, r0
 8002ee2:	6030      	str	r0, [r6, #0]
 8002ee4:	2800      	cmp	r0, #0
 8002ee6:	d1d5      	bne.n	8002e94 <__sfp+0x24>
 8002ee8:	f7ff ff78 	bl	8002ddc <__sfp_lock_release>
 8002eec:	230c      	movs	r3, #12
 8002eee:	603b      	str	r3, [r7, #0]
 8002ef0:	e7ee      	b.n	8002ed0 <__sfp+0x60>
 8002ef2:	bf00      	nop
 8002ef4:	080042ec 	.word	0x080042ec
 8002ef8:	ffff0001 	.word	0xffff0001

08002efc <_fwalk_reent>:
 8002efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f00:	4606      	mov	r6, r0
 8002f02:	4688      	mov	r8, r1
 8002f04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002f08:	2700      	movs	r7, #0
 8002f0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002f0e:	f1b9 0901 	subs.w	r9, r9, #1
 8002f12:	d505      	bpl.n	8002f20 <_fwalk_reent+0x24>
 8002f14:	6824      	ldr	r4, [r4, #0]
 8002f16:	2c00      	cmp	r4, #0
 8002f18:	d1f7      	bne.n	8002f0a <_fwalk_reent+0xe>
 8002f1a:	4638      	mov	r0, r7
 8002f1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f20:	89ab      	ldrh	r3, [r5, #12]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d907      	bls.n	8002f36 <_fwalk_reent+0x3a>
 8002f26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	d003      	beq.n	8002f36 <_fwalk_reent+0x3a>
 8002f2e:	4629      	mov	r1, r5
 8002f30:	4630      	mov	r0, r6
 8002f32:	47c0      	blx	r8
 8002f34:	4307      	orrs	r7, r0
 8002f36:	3568      	adds	r5, #104	; 0x68
 8002f38:	e7e9      	b.n	8002f0e <_fwalk_reent+0x12>

08002f3a <__retarget_lock_init_recursive>:
 8002f3a:	4770      	bx	lr

08002f3c <__retarget_lock_acquire_recursive>:
 8002f3c:	4770      	bx	lr

08002f3e <__retarget_lock_release_recursive>:
 8002f3e:	4770      	bx	lr

08002f40 <__swhatbuf_r>:
 8002f40:	b570      	push	{r4, r5, r6, lr}
 8002f42:	460e      	mov	r6, r1
 8002f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f48:	2900      	cmp	r1, #0
 8002f4a:	b096      	sub	sp, #88	; 0x58
 8002f4c:	4614      	mov	r4, r2
 8002f4e:	461d      	mov	r5, r3
 8002f50:	da08      	bge.n	8002f64 <__swhatbuf_r+0x24>
 8002f52:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	602a      	str	r2, [r5, #0]
 8002f5a:	061a      	lsls	r2, r3, #24
 8002f5c:	d410      	bmi.n	8002f80 <__swhatbuf_r+0x40>
 8002f5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f62:	e00e      	b.n	8002f82 <__swhatbuf_r+0x42>
 8002f64:	466a      	mov	r2, sp
 8002f66:	f000 fbf9 	bl	800375c <_fstat_r>
 8002f6a:	2800      	cmp	r0, #0
 8002f6c:	dbf1      	blt.n	8002f52 <__swhatbuf_r+0x12>
 8002f6e:	9a01      	ldr	r2, [sp, #4]
 8002f70:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002f74:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002f78:	425a      	negs	r2, r3
 8002f7a:	415a      	adcs	r2, r3
 8002f7c:	602a      	str	r2, [r5, #0]
 8002f7e:	e7ee      	b.n	8002f5e <__swhatbuf_r+0x1e>
 8002f80:	2340      	movs	r3, #64	; 0x40
 8002f82:	2000      	movs	r0, #0
 8002f84:	6023      	str	r3, [r4, #0]
 8002f86:	b016      	add	sp, #88	; 0x58
 8002f88:	bd70      	pop	{r4, r5, r6, pc}
	...

08002f8c <__smakebuf_r>:
 8002f8c:	898b      	ldrh	r3, [r1, #12]
 8002f8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002f90:	079d      	lsls	r5, r3, #30
 8002f92:	4606      	mov	r6, r0
 8002f94:	460c      	mov	r4, r1
 8002f96:	d507      	bpl.n	8002fa8 <__smakebuf_r+0x1c>
 8002f98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002f9c:	6023      	str	r3, [r4, #0]
 8002f9e:	6123      	str	r3, [r4, #16]
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	6163      	str	r3, [r4, #20]
 8002fa4:	b002      	add	sp, #8
 8002fa6:	bd70      	pop	{r4, r5, r6, pc}
 8002fa8:	ab01      	add	r3, sp, #4
 8002faa:	466a      	mov	r2, sp
 8002fac:	f7ff ffc8 	bl	8002f40 <__swhatbuf_r>
 8002fb0:	9900      	ldr	r1, [sp, #0]
 8002fb2:	4605      	mov	r5, r0
 8002fb4:	4630      	mov	r0, r6
 8002fb6:	f7ff fc21 	bl	80027fc <_malloc_r>
 8002fba:	b948      	cbnz	r0, 8002fd0 <__smakebuf_r+0x44>
 8002fbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fc0:	059a      	lsls	r2, r3, #22
 8002fc2:	d4ef      	bmi.n	8002fa4 <__smakebuf_r+0x18>
 8002fc4:	f023 0303 	bic.w	r3, r3, #3
 8002fc8:	f043 0302 	orr.w	r3, r3, #2
 8002fcc:	81a3      	strh	r3, [r4, #12]
 8002fce:	e7e3      	b.n	8002f98 <__smakebuf_r+0xc>
 8002fd0:	4b0d      	ldr	r3, [pc, #52]	; (8003008 <__smakebuf_r+0x7c>)
 8002fd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8002fd4:	89a3      	ldrh	r3, [r4, #12]
 8002fd6:	6020      	str	r0, [r4, #0]
 8002fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fdc:	81a3      	strh	r3, [r4, #12]
 8002fde:	9b00      	ldr	r3, [sp, #0]
 8002fe0:	6163      	str	r3, [r4, #20]
 8002fe2:	9b01      	ldr	r3, [sp, #4]
 8002fe4:	6120      	str	r0, [r4, #16]
 8002fe6:	b15b      	cbz	r3, 8003000 <__smakebuf_r+0x74>
 8002fe8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002fec:	4630      	mov	r0, r6
 8002fee:	f000 fbc7 	bl	8003780 <_isatty_r>
 8002ff2:	b128      	cbz	r0, 8003000 <__smakebuf_r+0x74>
 8002ff4:	89a3      	ldrh	r3, [r4, #12]
 8002ff6:	f023 0303 	bic.w	r3, r3, #3
 8002ffa:	f043 0301 	orr.w	r3, r3, #1
 8002ffe:	81a3      	strh	r3, [r4, #12]
 8003000:	89a0      	ldrh	r0, [r4, #12]
 8003002:	4305      	orrs	r5, r0
 8003004:	81a5      	strh	r5, [r4, #12]
 8003006:	e7cd      	b.n	8002fa4 <__smakebuf_r+0x18>
 8003008:	08002d99 	.word	0x08002d99

0800300c <__malloc_lock>:
 800300c:	4801      	ldr	r0, [pc, #4]	; (8003014 <__malloc_lock+0x8>)
 800300e:	f7ff bf95 	b.w	8002f3c <__retarget_lock_acquire_recursive>
 8003012:	bf00      	nop
 8003014:	2000c1b4 	.word	0x2000c1b4

08003018 <__malloc_unlock>:
 8003018:	4801      	ldr	r0, [pc, #4]	; (8003020 <__malloc_unlock+0x8>)
 800301a:	f7ff bf90 	b.w	8002f3e <__retarget_lock_release_recursive>
 800301e:	bf00      	nop
 8003020:	2000c1b4 	.word	0x2000c1b4

08003024 <__sfputc_r>:
 8003024:	6893      	ldr	r3, [r2, #8]
 8003026:	3b01      	subs	r3, #1
 8003028:	2b00      	cmp	r3, #0
 800302a:	b410      	push	{r4}
 800302c:	6093      	str	r3, [r2, #8]
 800302e:	da08      	bge.n	8003042 <__sfputc_r+0x1e>
 8003030:	6994      	ldr	r4, [r2, #24]
 8003032:	42a3      	cmp	r3, r4
 8003034:	db01      	blt.n	800303a <__sfputc_r+0x16>
 8003036:	290a      	cmp	r1, #10
 8003038:	d103      	bne.n	8003042 <__sfputc_r+0x1e>
 800303a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800303e:	f7ff bd05 	b.w	8002a4c <__swbuf_r>
 8003042:	6813      	ldr	r3, [r2, #0]
 8003044:	1c58      	adds	r0, r3, #1
 8003046:	6010      	str	r0, [r2, #0]
 8003048:	7019      	strb	r1, [r3, #0]
 800304a:	4608      	mov	r0, r1
 800304c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003050:	4770      	bx	lr

08003052 <__sfputs_r>:
 8003052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003054:	4606      	mov	r6, r0
 8003056:	460f      	mov	r7, r1
 8003058:	4614      	mov	r4, r2
 800305a:	18d5      	adds	r5, r2, r3
 800305c:	42ac      	cmp	r4, r5
 800305e:	d101      	bne.n	8003064 <__sfputs_r+0x12>
 8003060:	2000      	movs	r0, #0
 8003062:	e007      	b.n	8003074 <__sfputs_r+0x22>
 8003064:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003068:	463a      	mov	r2, r7
 800306a:	4630      	mov	r0, r6
 800306c:	f7ff ffda 	bl	8003024 <__sfputc_r>
 8003070:	1c43      	adds	r3, r0, #1
 8003072:	d1f3      	bne.n	800305c <__sfputs_r+0xa>
 8003074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003078 <_vfiprintf_r>:
 8003078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800307c:	460d      	mov	r5, r1
 800307e:	b09d      	sub	sp, #116	; 0x74
 8003080:	4614      	mov	r4, r2
 8003082:	4698      	mov	r8, r3
 8003084:	4606      	mov	r6, r0
 8003086:	b118      	cbz	r0, 8003090 <_vfiprintf_r+0x18>
 8003088:	6983      	ldr	r3, [r0, #24]
 800308a:	b90b      	cbnz	r3, 8003090 <_vfiprintf_r+0x18>
 800308c:	f7ff feb8 	bl	8002e00 <__sinit>
 8003090:	4b89      	ldr	r3, [pc, #548]	; (80032b8 <_vfiprintf_r+0x240>)
 8003092:	429d      	cmp	r5, r3
 8003094:	d11b      	bne.n	80030ce <_vfiprintf_r+0x56>
 8003096:	6875      	ldr	r5, [r6, #4]
 8003098:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800309a:	07d9      	lsls	r1, r3, #31
 800309c:	d405      	bmi.n	80030aa <_vfiprintf_r+0x32>
 800309e:	89ab      	ldrh	r3, [r5, #12]
 80030a0:	059a      	lsls	r2, r3, #22
 80030a2:	d402      	bmi.n	80030aa <_vfiprintf_r+0x32>
 80030a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80030a6:	f7ff ff49 	bl	8002f3c <__retarget_lock_acquire_recursive>
 80030aa:	89ab      	ldrh	r3, [r5, #12]
 80030ac:	071b      	lsls	r3, r3, #28
 80030ae:	d501      	bpl.n	80030b4 <_vfiprintf_r+0x3c>
 80030b0:	692b      	ldr	r3, [r5, #16]
 80030b2:	b9eb      	cbnz	r3, 80030f0 <_vfiprintf_r+0x78>
 80030b4:	4629      	mov	r1, r5
 80030b6:	4630      	mov	r0, r6
 80030b8:	f7ff fd1a 	bl	8002af0 <__swsetup_r>
 80030bc:	b1c0      	cbz	r0, 80030f0 <_vfiprintf_r+0x78>
 80030be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80030c0:	07dc      	lsls	r4, r3, #31
 80030c2:	d50e      	bpl.n	80030e2 <_vfiprintf_r+0x6a>
 80030c4:	f04f 30ff 	mov.w	r0, #4294967295
 80030c8:	b01d      	add	sp, #116	; 0x74
 80030ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030ce:	4b7b      	ldr	r3, [pc, #492]	; (80032bc <_vfiprintf_r+0x244>)
 80030d0:	429d      	cmp	r5, r3
 80030d2:	d101      	bne.n	80030d8 <_vfiprintf_r+0x60>
 80030d4:	68b5      	ldr	r5, [r6, #8]
 80030d6:	e7df      	b.n	8003098 <_vfiprintf_r+0x20>
 80030d8:	4b79      	ldr	r3, [pc, #484]	; (80032c0 <_vfiprintf_r+0x248>)
 80030da:	429d      	cmp	r5, r3
 80030dc:	bf08      	it	eq
 80030de:	68f5      	ldreq	r5, [r6, #12]
 80030e0:	e7da      	b.n	8003098 <_vfiprintf_r+0x20>
 80030e2:	89ab      	ldrh	r3, [r5, #12]
 80030e4:	0598      	lsls	r0, r3, #22
 80030e6:	d4ed      	bmi.n	80030c4 <_vfiprintf_r+0x4c>
 80030e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80030ea:	f7ff ff28 	bl	8002f3e <__retarget_lock_release_recursive>
 80030ee:	e7e9      	b.n	80030c4 <_vfiprintf_r+0x4c>
 80030f0:	2300      	movs	r3, #0
 80030f2:	9309      	str	r3, [sp, #36]	; 0x24
 80030f4:	2320      	movs	r3, #32
 80030f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80030fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80030fe:	2330      	movs	r3, #48	; 0x30
 8003100:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80032c4 <_vfiprintf_r+0x24c>
 8003104:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003108:	f04f 0901 	mov.w	r9, #1
 800310c:	4623      	mov	r3, r4
 800310e:	469a      	mov	sl, r3
 8003110:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003114:	b10a      	cbz	r2, 800311a <_vfiprintf_r+0xa2>
 8003116:	2a25      	cmp	r2, #37	; 0x25
 8003118:	d1f9      	bne.n	800310e <_vfiprintf_r+0x96>
 800311a:	ebba 0b04 	subs.w	fp, sl, r4
 800311e:	d00b      	beq.n	8003138 <_vfiprintf_r+0xc0>
 8003120:	465b      	mov	r3, fp
 8003122:	4622      	mov	r2, r4
 8003124:	4629      	mov	r1, r5
 8003126:	4630      	mov	r0, r6
 8003128:	f7ff ff93 	bl	8003052 <__sfputs_r>
 800312c:	3001      	adds	r0, #1
 800312e:	f000 80aa 	beq.w	8003286 <_vfiprintf_r+0x20e>
 8003132:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003134:	445a      	add	r2, fp
 8003136:	9209      	str	r2, [sp, #36]	; 0x24
 8003138:	f89a 3000 	ldrb.w	r3, [sl]
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 80a2 	beq.w	8003286 <_vfiprintf_r+0x20e>
 8003142:	2300      	movs	r3, #0
 8003144:	f04f 32ff 	mov.w	r2, #4294967295
 8003148:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800314c:	f10a 0a01 	add.w	sl, sl, #1
 8003150:	9304      	str	r3, [sp, #16]
 8003152:	9307      	str	r3, [sp, #28]
 8003154:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003158:	931a      	str	r3, [sp, #104]	; 0x68
 800315a:	4654      	mov	r4, sl
 800315c:	2205      	movs	r2, #5
 800315e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003162:	4858      	ldr	r0, [pc, #352]	; (80032c4 <_vfiprintf_r+0x24c>)
 8003164:	f7fd f83c 	bl	80001e0 <memchr>
 8003168:	9a04      	ldr	r2, [sp, #16]
 800316a:	b9d8      	cbnz	r0, 80031a4 <_vfiprintf_r+0x12c>
 800316c:	06d1      	lsls	r1, r2, #27
 800316e:	bf44      	itt	mi
 8003170:	2320      	movmi	r3, #32
 8003172:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003176:	0713      	lsls	r3, r2, #28
 8003178:	bf44      	itt	mi
 800317a:	232b      	movmi	r3, #43	; 0x2b
 800317c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003180:	f89a 3000 	ldrb.w	r3, [sl]
 8003184:	2b2a      	cmp	r3, #42	; 0x2a
 8003186:	d015      	beq.n	80031b4 <_vfiprintf_r+0x13c>
 8003188:	9a07      	ldr	r2, [sp, #28]
 800318a:	4654      	mov	r4, sl
 800318c:	2000      	movs	r0, #0
 800318e:	f04f 0c0a 	mov.w	ip, #10
 8003192:	4621      	mov	r1, r4
 8003194:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003198:	3b30      	subs	r3, #48	; 0x30
 800319a:	2b09      	cmp	r3, #9
 800319c:	d94e      	bls.n	800323c <_vfiprintf_r+0x1c4>
 800319e:	b1b0      	cbz	r0, 80031ce <_vfiprintf_r+0x156>
 80031a0:	9207      	str	r2, [sp, #28]
 80031a2:	e014      	b.n	80031ce <_vfiprintf_r+0x156>
 80031a4:	eba0 0308 	sub.w	r3, r0, r8
 80031a8:	fa09 f303 	lsl.w	r3, r9, r3
 80031ac:	4313      	orrs	r3, r2
 80031ae:	9304      	str	r3, [sp, #16]
 80031b0:	46a2      	mov	sl, r4
 80031b2:	e7d2      	b.n	800315a <_vfiprintf_r+0xe2>
 80031b4:	9b03      	ldr	r3, [sp, #12]
 80031b6:	1d19      	adds	r1, r3, #4
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	9103      	str	r1, [sp, #12]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	bfbb      	ittet	lt
 80031c0:	425b      	neglt	r3, r3
 80031c2:	f042 0202 	orrlt.w	r2, r2, #2
 80031c6:	9307      	strge	r3, [sp, #28]
 80031c8:	9307      	strlt	r3, [sp, #28]
 80031ca:	bfb8      	it	lt
 80031cc:	9204      	strlt	r2, [sp, #16]
 80031ce:	7823      	ldrb	r3, [r4, #0]
 80031d0:	2b2e      	cmp	r3, #46	; 0x2e
 80031d2:	d10c      	bne.n	80031ee <_vfiprintf_r+0x176>
 80031d4:	7863      	ldrb	r3, [r4, #1]
 80031d6:	2b2a      	cmp	r3, #42	; 0x2a
 80031d8:	d135      	bne.n	8003246 <_vfiprintf_r+0x1ce>
 80031da:	9b03      	ldr	r3, [sp, #12]
 80031dc:	1d1a      	adds	r2, r3, #4
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	9203      	str	r2, [sp, #12]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	bfb8      	it	lt
 80031e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80031ea:	3402      	adds	r4, #2
 80031ec:	9305      	str	r3, [sp, #20]
 80031ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80032d4 <_vfiprintf_r+0x25c>
 80031f2:	7821      	ldrb	r1, [r4, #0]
 80031f4:	2203      	movs	r2, #3
 80031f6:	4650      	mov	r0, sl
 80031f8:	f7fc fff2 	bl	80001e0 <memchr>
 80031fc:	b140      	cbz	r0, 8003210 <_vfiprintf_r+0x198>
 80031fe:	2340      	movs	r3, #64	; 0x40
 8003200:	eba0 000a 	sub.w	r0, r0, sl
 8003204:	fa03 f000 	lsl.w	r0, r3, r0
 8003208:	9b04      	ldr	r3, [sp, #16]
 800320a:	4303      	orrs	r3, r0
 800320c:	3401      	adds	r4, #1
 800320e:	9304      	str	r3, [sp, #16]
 8003210:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003214:	482c      	ldr	r0, [pc, #176]	; (80032c8 <_vfiprintf_r+0x250>)
 8003216:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800321a:	2206      	movs	r2, #6
 800321c:	f7fc ffe0 	bl	80001e0 <memchr>
 8003220:	2800      	cmp	r0, #0
 8003222:	d03f      	beq.n	80032a4 <_vfiprintf_r+0x22c>
 8003224:	4b29      	ldr	r3, [pc, #164]	; (80032cc <_vfiprintf_r+0x254>)
 8003226:	bb1b      	cbnz	r3, 8003270 <_vfiprintf_r+0x1f8>
 8003228:	9b03      	ldr	r3, [sp, #12]
 800322a:	3307      	adds	r3, #7
 800322c:	f023 0307 	bic.w	r3, r3, #7
 8003230:	3308      	adds	r3, #8
 8003232:	9303      	str	r3, [sp, #12]
 8003234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003236:	443b      	add	r3, r7
 8003238:	9309      	str	r3, [sp, #36]	; 0x24
 800323a:	e767      	b.n	800310c <_vfiprintf_r+0x94>
 800323c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003240:	460c      	mov	r4, r1
 8003242:	2001      	movs	r0, #1
 8003244:	e7a5      	b.n	8003192 <_vfiprintf_r+0x11a>
 8003246:	2300      	movs	r3, #0
 8003248:	3401      	adds	r4, #1
 800324a:	9305      	str	r3, [sp, #20]
 800324c:	4619      	mov	r1, r3
 800324e:	f04f 0c0a 	mov.w	ip, #10
 8003252:	4620      	mov	r0, r4
 8003254:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003258:	3a30      	subs	r2, #48	; 0x30
 800325a:	2a09      	cmp	r2, #9
 800325c:	d903      	bls.n	8003266 <_vfiprintf_r+0x1ee>
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0c5      	beq.n	80031ee <_vfiprintf_r+0x176>
 8003262:	9105      	str	r1, [sp, #20]
 8003264:	e7c3      	b.n	80031ee <_vfiprintf_r+0x176>
 8003266:	fb0c 2101 	mla	r1, ip, r1, r2
 800326a:	4604      	mov	r4, r0
 800326c:	2301      	movs	r3, #1
 800326e:	e7f0      	b.n	8003252 <_vfiprintf_r+0x1da>
 8003270:	ab03      	add	r3, sp, #12
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	462a      	mov	r2, r5
 8003276:	4b16      	ldr	r3, [pc, #88]	; (80032d0 <_vfiprintf_r+0x258>)
 8003278:	a904      	add	r1, sp, #16
 800327a:	4630      	mov	r0, r6
 800327c:	f3af 8000 	nop.w
 8003280:	4607      	mov	r7, r0
 8003282:	1c78      	adds	r0, r7, #1
 8003284:	d1d6      	bne.n	8003234 <_vfiprintf_r+0x1bc>
 8003286:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003288:	07d9      	lsls	r1, r3, #31
 800328a:	d405      	bmi.n	8003298 <_vfiprintf_r+0x220>
 800328c:	89ab      	ldrh	r3, [r5, #12]
 800328e:	059a      	lsls	r2, r3, #22
 8003290:	d402      	bmi.n	8003298 <_vfiprintf_r+0x220>
 8003292:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003294:	f7ff fe53 	bl	8002f3e <__retarget_lock_release_recursive>
 8003298:	89ab      	ldrh	r3, [r5, #12]
 800329a:	065b      	lsls	r3, r3, #25
 800329c:	f53f af12 	bmi.w	80030c4 <_vfiprintf_r+0x4c>
 80032a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80032a2:	e711      	b.n	80030c8 <_vfiprintf_r+0x50>
 80032a4:	ab03      	add	r3, sp, #12
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	462a      	mov	r2, r5
 80032aa:	4b09      	ldr	r3, [pc, #36]	; (80032d0 <_vfiprintf_r+0x258>)
 80032ac:	a904      	add	r1, sp, #16
 80032ae:	4630      	mov	r0, r6
 80032b0:	f000 f880 	bl	80033b4 <_printf_i>
 80032b4:	e7e4      	b.n	8003280 <_vfiprintf_r+0x208>
 80032b6:	bf00      	nop
 80032b8:	08004310 	.word	0x08004310
 80032bc:	08004330 	.word	0x08004330
 80032c0:	080042f0 	.word	0x080042f0
 80032c4:	08004350 	.word	0x08004350
 80032c8:	0800435a 	.word	0x0800435a
 80032cc:	00000000 	.word	0x00000000
 80032d0:	08003053 	.word	0x08003053
 80032d4:	08004356 	.word	0x08004356

080032d8 <_printf_common>:
 80032d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032dc:	4616      	mov	r6, r2
 80032de:	4699      	mov	r9, r3
 80032e0:	688a      	ldr	r2, [r1, #8]
 80032e2:	690b      	ldr	r3, [r1, #16]
 80032e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032e8:	4293      	cmp	r3, r2
 80032ea:	bfb8      	it	lt
 80032ec:	4613      	movlt	r3, r2
 80032ee:	6033      	str	r3, [r6, #0]
 80032f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032f4:	4607      	mov	r7, r0
 80032f6:	460c      	mov	r4, r1
 80032f8:	b10a      	cbz	r2, 80032fe <_printf_common+0x26>
 80032fa:	3301      	adds	r3, #1
 80032fc:	6033      	str	r3, [r6, #0]
 80032fe:	6823      	ldr	r3, [r4, #0]
 8003300:	0699      	lsls	r1, r3, #26
 8003302:	bf42      	ittt	mi
 8003304:	6833      	ldrmi	r3, [r6, #0]
 8003306:	3302      	addmi	r3, #2
 8003308:	6033      	strmi	r3, [r6, #0]
 800330a:	6825      	ldr	r5, [r4, #0]
 800330c:	f015 0506 	ands.w	r5, r5, #6
 8003310:	d106      	bne.n	8003320 <_printf_common+0x48>
 8003312:	f104 0a19 	add.w	sl, r4, #25
 8003316:	68e3      	ldr	r3, [r4, #12]
 8003318:	6832      	ldr	r2, [r6, #0]
 800331a:	1a9b      	subs	r3, r3, r2
 800331c:	42ab      	cmp	r3, r5
 800331e:	dc26      	bgt.n	800336e <_printf_common+0x96>
 8003320:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003324:	1e13      	subs	r3, r2, #0
 8003326:	6822      	ldr	r2, [r4, #0]
 8003328:	bf18      	it	ne
 800332a:	2301      	movne	r3, #1
 800332c:	0692      	lsls	r2, r2, #26
 800332e:	d42b      	bmi.n	8003388 <_printf_common+0xb0>
 8003330:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003334:	4649      	mov	r1, r9
 8003336:	4638      	mov	r0, r7
 8003338:	47c0      	blx	r8
 800333a:	3001      	adds	r0, #1
 800333c:	d01e      	beq.n	800337c <_printf_common+0xa4>
 800333e:	6823      	ldr	r3, [r4, #0]
 8003340:	68e5      	ldr	r5, [r4, #12]
 8003342:	6832      	ldr	r2, [r6, #0]
 8003344:	f003 0306 	and.w	r3, r3, #6
 8003348:	2b04      	cmp	r3, #4
 800334a:	bf08      	it	eq
 800334c:	1aad      	subeq	r5, r5, r2
 800334e:	68a3      	ldr	r3, [r4, #8]
 8003350:	6922      	ldr	r2, [r4, #16]
 8003352:	bf0c      	ite	eq
 8003354:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003358:	2500      	movne	r5, #0
 800335a:	4293      	cmp	r3, r2
 800335c:	bfc4      	itt	gt
 800335e:	1a9b      	subgt	r3, r3, r2
 8003360:	18ed      	addgt	r5, r5, r3
 8003362:	2600      	movs	r6, #0
 8003364:	341a      	adds	r4, #26
 8003366:	42b5      	cmp	r5, r6
 8003368:	d11a      	bne.n	80033a0 <_printf_common+0xc8>
 800336a:	2000      	movs	r0, #0
 800336c:	e008      	b.n	8003380 <_printf_common+0xa8>
 800336e:	2301      	movs	r3, #1
 8003370:	4652      	mov	r2, sl
 8003372:	4649      	mov	r1, r9
 8003374:	4638      	mov	r0, r7
 8003376:	47c0      	blx	r8
 8003378:	3001      	adds	r0, #1
 800337a:	d103      	bne.n	8003384 <_printf_common+0xac>
 800337c:	f04f 30ff 	mov.w	r0, #4294967295
 8003380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003384:	3501      	adds	r5, #1
 8003386:	e7c6      	b.n	8003316 <_printf_common+0x3e>
 8003388:	18e1      	adds	r1, r4, r3
 800338a:	1c5a      	adds	r2, r3, #1
 800338c:	2030      	movs	r0, #48	; 0x30
 800338e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003392:	4422      	add	r2, r4
 8003394:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003398:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800339c:	3302      	adds	r3, #2
 800339e:	e7c7      	b.n	8003330 <_printf_common+0x58>
 80033a0:	2301      	movs	r3, #1
 80033a2:	4622      	mov	r2, r4
 80033a4:	4649      	mov	r1, r9
 80033a6:	4638      	mov	r0, r7
 80033a8:	47c0      	blx	r8
 80033aa:	3001      	adds	r0, #1
 80033ac:	d0e6      	beq.n	800337c <_printf_common+0xa4>
 80033ae:	3601      	adds	r6, #1
 80033b0:	e7d9      	b.n	8003366 <_printf_common+0x8e>
	...

080033b4 <_printf_i>:
 80033b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033b8:	7e0f      	ldrb	r7, [r1, #24]
 80033ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80033bc:	2f78      	cmp	r7, #120	; 0x78
 80033be:	4691      	mov	r9, r2
 80033c0:	4680      	mov	r8, r0
 80033c2:	460c      	mov	r4, r1
 80033c4:	469a      	mov	sl, r3
 80033c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80033ca:	d807      	bhi.n	80033dc <_printf_i+0x28>
 80033cc:	2f62      	cmp	r7, #98	; 0x62
 80033ce:	d80a      	bhi.n	80033e6 <_printf_i+0x32>
 80033d0:	2f00      	cmp	r7, #0
 80033d2:	f000 80d8 	beq.w	8003586 <_printf_i+0x1d2>
 80033d6:	2f58      	cmp	r7, #88	; 0x58
 80033d8:	f000 80a3 	beq.w	8003522 <_printf_i+0x16e>
 80033dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80033e4:	e03a      	b.n	800345c <_printf_i+0xa8>
 80033e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80033ea:	2b15      	cmp	r3, #21
 80033ec:	d8f6      	bhi.n	80033dc <_printf_i+0x28>
 80033ee:	a101      	add	r1, pc, #4	; (adr r1, 80033f4 <_printf_i+0x40>)
 80033f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80033f4:	0800344d 	.word	0x0800344d
 80033f8:	08003461 	.word	0x08003461
 80033fc:	080033dd 	.word	0x080033dd
 8003400:	080033dd 	.word	0x080033dd
 8003404:	080033dd 	.word	0x080033dd
 8003408:	080033dd 	.word	0x080033dd
 800340c:	08003461 	.word	0x08003461
 8003410:	080033dd 	.word	0x080033dd
 8003414:	080033dd 	.word	0x080033dd
 8003418:	080033dd 	.word	0x080033dd
 800341c:	080033dd 	.word	0x080033dd
 8003420:	0800356d 	.word	0x0800356d
 8003424:	08003491 	.word	0x08003491
 8003428:	0800354f 	.word	0x0800354f
 800342c:	080033dd 	.word	0x080033dd
 8003430:	080033dd 	.word	0x080033dd
 8003434:	0800358f 	.word	0x0800358f
 8003438:	080033dd 	.word	0x080033dd
 800343c:	08003491 	.word	0x08003491
 8003440:	080033dd 	.word	0x080033dd
 8003444:	080033dd 	.word	0x080033dd
 8003448:	08003557 	.word	0x08003557
 800344c:	682b      	ldr	r3, [r5, #0]
 800344e:	1d1a      	adds	r2, r3, #4
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	602a      	str	r2, [r5, #0]
 8003454:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003458:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800345c:	2301      	movs	r3, #1
 800345e:	e0a3      	b.n	80035a8 <_printf_i+0x1f4>
 8003460:	6820      	ldr	r0, [r4, #0]
 8003462:	6829      	ldr	r1, [r5, #0]
 8003464:	0606      	lsls	r6, r0, #24
 8003466:	f101 0304 	add.w	r3, r1, #4
 800346a:	d50a      	bpl.n	8003482 <_printf_i+0xce>
 800346c:	680e      	ldr	r6, [r1, #0]
 800346e:	602b      	str	r3, [r5, #0]
 8003470:	2e00      	cmp	r6, #0
 8003472:	da03      	bge.n	800347c <_printf_i+0xc8>
 8003474:	232d      	movs	r3, #45	; 0x2d
 8003476:	4276      	negs	r6, r6
 8003478:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800347c:	485e      	ldr	r0, [pc, #376]	; (80035f8 <_printf_i+0x244>)
 800347e:	230a      	movs	r3, #10
 8003480:	e019      	b.n	80034b6 <_printf_i+0x102>
 8003482:	680e      	ldr	r6, [r1, #0]
 8003484:	602b      	str	r3, [r5, #0]
 8003486:	f010 0f40 	tst.w	r0, #64	; 0x40
 800348a:	bf18      	it	ne
 800348c:	b236      	sxthne	r6, r6
 800348e:	e7ef      	b.n	8003470 <_printf_i+0xbc>
 8003490:	682b      	ldr	r3, [r5, #0]
 8003492:	6820      	ldr	r0, [r4, #0]
 8003494:	1d19      	adds	r1, r3, #4
 8003496:	6029      	str	r1, [r5, #0]
 8003498:	0601      	lsls	r1, r0, #24
 800349a:	d501      	bpl.n	80034a0 <_printf_i+0xec>
 800349c:	681e      	ldr	r6, [r3, #0]
 800349e:	e002      	b.n	80034a6 <_printf_i+0xf2>
 80034a0:	0646      	lsls	r6, r0, #25
 80034a2:	d5fb      	bpl.n	800349c <_printf_i+0xe8>
 80034a4:	881e      	ldrh	r6, [r3, #0]
 80034a6:	4854      	ldr	r0, [pc, #336]	; (80035f8 <_printf_i+0x244>)
 80034a8:	2f6f      	cmp	r7, #111	; 0x6f
 80034aa:	bf0c      	ite	eq
 80034ac:	2308      	moveq	r3, #8
 80034ae:	230a      	movne	r3, #10
 80034b0:	2100      	movs	r1, #0
 80034b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80034b6:	6865      	ldr	r5, [r4, #4]
 80034b8:	60a5      	str	r5, [r4, #8]
 80034ba:	2d00      	cmp	r5, #0
 80034bc:	bfa2      	ittt	ge
 80034be:	6821      	ldrge	r1, [r4, #0]
 80034c0:	f021 0104 	bicge.w	r1, r1, #4
 80034c4:	6021      	strge	r1, [r4, #0]
 80034c6:	b90e      	cbnz	r6, 80034cc <_printf_i+0x118>
 80034c8:	2d00      	cmp	r5, #0
 80034ca:	d04d      	beq.n	8003568 <_printf_i+0x1b4>
 80034cc:	4615      	mov	r5, r2
 80034ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80034d2:	fb03 6711 	mls	r7, r3, r1, r6
 80034d6:	5dc7      	ldrb	r7, [r0, r7]
 80034d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80034dc:	4637      	mov	r7, r6
 80034de:	42bb      	cmp	r3, r7
 80034e0:	460e      	mov	r6, r1
 80034e2:	d9f4      	bls.n	80034ce <_printf_i+0x11a>
 80034e4:	2b08      	cmp	r3, #8
 80034e6:	d10b      	bne.n	8003500 <_printf_i+0x14c>
 80034e8:	6823      	ldr	r3, [r4, #0]
 80034ea:	07de      	lsls	r6, r3, #31
 80034ec:	d508      	bpl.n	8003500 <_printf_i+0x14c>
 80034ee:	6923      	ldr	r3, [r4, #16]
 80034f0:	6861      	ldr	r1, [r4, #4]
 80034f2:	4299      	cmp	r1, r3
 80034f4:	bfde      	ittt	le
 80034f6:	2330      	movle	r3, #48	; 0x30
 80034f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80034fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003500:	1b52      	subs	r2, r2, r5
 8003502:	6122      	str	r2, [r4, #16]
 8003504:	f8cd a000 	str.w	sl, [sp]
 8003508:	464b      	mov	r3, r9
 800350a:	aa03      	add	r2, sp, #12
 800350c:	4621      	mov	r1, r4
 800350e:	4640      	mov	r0, r8
 8003510:	f7ff fee2 	bl	80032d8 <_printf_common>
 8003514:	3001      	adds	r0, #1
 8003516:	d14c      	bne.n	80035b2 <_printf_i+0x1fe>
 8003518:	f04f 30ff 	mov.w	r0, #4294967295
 800351c:	b004      	add	sp, #16
 800351e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003522:	4835      	ldr	r0, [pc, #212]	; (80035f8 <_printf_i+0x244>)
 8003524:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003528:	6829      	ldr	r1, [r5, #0]
 800352a:	6823      	ldr	r3, [r4, #0]
 800352c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003530:	6029      	str	r1, [r5, #0]
 8003532:	061d      	lsls	r5, r3, #24
 8003534:	d514      	bpl.n	8003560 <_printf_i+0x1ac>
 8003536:	07df      	lsls	r7, r3, #31
 8003538:	bf44      	itt	mi
 800353a:	f043 0320 	orrmi.w	r3, r3, #32
 800353e:	6023      	strmi	r3, [r4, #0]
 8003540:	b91e      	cbnz	r6, 800354a <_printf_i+0x196>
 8003542:	6823      	ldr	r3, [r4, #0]
 8003544:	f023 0320 	bic.w	r3, r3, #32
 8003548:	6023      	str	r3, [r4, #0]
 800354a:	2310      	movs	r3, #16
 800354c:	e7b0      	b.n	80034b0 <_printf_i+0xfc>
 800354e:	6823      	ldr	r3, [r4, #0]
 8003550:	f043 0320 	orr.w	r3, r3, #32
 8003554:	6023      	str	r3, [r4, #0]
 8003556:	2378      	movs	r3, #120	; 0x78
 8003558:	4828      	ldr	r0, [pc, #160]	; (80035fc <_printf_i+0x248>)
 800355a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800355e:	e7e3      	b.n	8003528 <_printf_i+0x174>
 8003560:	0659      	lsls	r1, r3, #25
 8003562:	bf48      	it	mi
 8003564:	b2b6      	uxthmi	r6, r6
 8003566:	e7e6      	b.n	8003536 <_printf_i+0x182>
 8003568:	4615      	mov	r5, r2
 800356a:	e7bb      	b.n	80034e4 <_printf_i+0x130>
 800356c:	682b      	ldr	r3, [r5, #0]
 800356e:	6826      	ldr	r6, [r4, #0]
 8003570:	6961      	ldr	r1, [r4, #20]
 8003572:	1d18      	adds	r0, r3, #4
 8003574:	6028      	str	r0, [r5, #0]
 8003576:	0635      	lsls	r5, r6, #24
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	d501      	bpl.n	8003580 <_printf_i+0x1cc>
 800357c:	6019      	str	r1, [r3, #0]
 800357e:	e002      	b.n	8003586 <_printf_i+0x1d2>
 8003580:	0670      	lsls	r0, r6, #25
 8003582:	d5fb      	bpl.n	800357c <_printf_i+0x1c8>
 8003584:	8019      	strh	r1, [r3, #0]
 8003586:	2300      	movs	r3, #0
 8003588:	6123      	str	r3, [r4, #16]
 800358a:	4615      	mov	r5, r2
 800358c:	e7ba      	b.n	8003504 <_printf_i+0x150>
 800358e:	682b      	ldr	r3, [r5, #0]
 8003590:	1d1a      	adds	r2, r3, #4
 8003592:	602a      	str	r2, [r5, #0]
 8003594:	681d      	ldr	r5, [r3, #0]
 8003596:	6862      	ldr	r2, [r4, #4]
 8003598:	2100      	movs	r1, #0
 800359a:	4628      	mov	r0, r5
 800359c:	f7fc fe20 	bl	80001e0 <memchr>
 80035a0:	b108      	cbz	r0, 80035a6 <_printf_i+0x1f2>
 80035a2:	1b40      	subs	r0, r0, r5
 80035a4:	6060      	str	r0, [r4, #4]
 80035a6:	6863      	ldr	r3, [r4, #4]
 80035a8:	6123      	str	r3, [r4, #16]
 80035aa:	2300      	movs	r3, #0
 80035ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035b0:	e7a8      	b.n	8003504 <_printf_i+0x150>
 80035b2:	6923      	ldr	r3, [r4, #16]
 80035b4:	462a      	mov	r2, r5
 80035b6:	4649      	mov	r1, r9
 80035b8:	4640      	mov	r0, r8
 80035ba:	47d0      	blx	sl
 80035bc:	3001      	adds	r0, #1
 80035be:	d0ab      	beq.n	8003518 <_printf_i+0x164>
 80035c0:	6823      	ldr	r3, [r4, #0]
 80035c2:	079b      	lsls	r3, r3, #30
 80035c4:	d413      	bmi.n	80035ee <_printf_i+0x23a>
 80035c6:	68e0      	ldr	r0, [r4, #12]
 80035c8:	9b03      	ldr	r3, [sp, #12]
 80035ca:	4298      	cmp	r0, r3
 80035cc:	bfb8      	it	lt
 80035ce:	4618      	movlt	r0, r3
 80035d0:	e7a4      	b.n	800351c <_printf_i+0x168>
 80035d2:	2301      	movs	r3, #1
 80035d4:	4632      	mov	r2, r6
 80035d6:	4649      	mov	r1, r9
 80035d8:	4640      	mov	r0, r8
 80035da:	47d0      	blx	sl
 80035dc:	3001      	adds	r0, #1
 80035de:	d09b      	beq.n	8003518 <_printf_i+0x164>
 80035e0:	3501      	adds	r5, #1
 80035e2:	68e3      	ldr	r3, [r4, #12]
 80035e4:	9903      	ldr	r1, [sp, #12]
 80035e6:	1a5b      	subs	r3, r3, r1
 80035e8:	42ab      	cmp	r3, r5
 80035ea:	dcf2      	bgt.n	80035d2 <_printf_i+0x21e>
 80035ec:	e7eb      	b.n	80035c6 <_printf_i+0x212>
 80035ee:	2500      	movs	r5, #0
 80035f0:	f104 0619 	add.w	r6, r4, #25
 80035f4:	e7f5      	b.n	80035e2 <_printf_i+0x22e>
 80035f6:	bf00      	nop
 80035f8:	08004361 	.word	0x08004361
 80035fc:	08004372 	.word	0x08004372

08003600 <_putc_r>:
 8003600:	b570      	push	{r4, r5, r6, lr}
 8003602:	460d      	mov	r5, r1
 8003604:	4614      	mov	r4, r2
 8003606:	4606      	mov	r6, r0
 8003608:	b118      	cbz	r0, 8003612 <_putc_r+0x12>
 800360a:	6983      	ldr	r3, [r0, #24]
 800360c:	b90b      	cbnz	r3, 8003612 <_putc_r+0x12>
 800360e:	f7ff fbf7 	bl	8002e00 <__sinit>
 8003612:	4b1c      	ldr	r3, [pc, #112]	; (8003684 <_putc_r+0x84>)
 8003614:	429c      	cmp	r4, r3
 8003616:	d124      	bne.n	8003662 <_putc_r+0x62>
 8003618:	6874      	ldr	r4, [r6, #4]
 800361a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800361c:	07d8      	lsls	r0, r3, #31
 800361e:	d405      	bmi.n	800362c <_putc_r+0x2c>
 8003620:	89a3      	ldrh	r3, [r4, #12]
 8003622:	0599      	lsls	r1, r3, #22
 8003624:	d402      	bmi.n	800362c <_putc_r+0x2c>
 8003626:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003628:	f7ff fc88 	bl	8002f3c <__retarget_lock_acquire_recursive>
 800362c:	68a3      	ldr	r3, [r4, #8]
 800362e:	3b01      	subs	r3, #1
 8003630:	2b00      	cmp	r3, #0
 8003632:	60a3      	str	r3, [r4, #8]
 8003634:	da05      	bge.n	8003642 <_putc_r+0x42>
 8003636:	69a2      	ldr	r2, [r4, #24]
 8003638:	4293      	cmp	r3, r2
 800363a:	db1c      	blt.n	8003676 <_putc_r+0x76>
 800363c:	b2eb      	uxtb	r3, r5
 800363e:	2b0a      	cmp	r3, #10
 8003640:	d019      	beq.n	8003676 <_putc_r+0x76>
 8003642:	6823      	ldr	r3, [r4, #0]
 8003644:	1c5a      	adds	r2, r3, #1
 8003646:	6022      	str	r2, [r4, #0]
 8003648:	701d      	strb	r5, [r3, #0]
 800364a:	b2ed      	uxtb	r5, r5
 800364c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800364e:	07da      	lsls	r2, r3, #31
 8003650:	d405      	bmi.n	800365e <_putc_r+0x5e>
 8003652:	89a3      	ldrh	r3, [r4, #12]
 8003654:	059b      	lsls	r3, r3, #22
 8003656:	d402      	bmi.n	800365e <_putc_r+0x5e>
 8003658:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800365a:	f7ff fc70 	bl	8002f3e <__retarget_lock_release_recursive>
 800365e:	4628      	mov	r0, r5
 8003660:	bd70      	pop	{r4, r5, r6, pc}
 8003662:	4b09      	ldr	r3, [pc, #36]	; (8003688 <_putc_r+0x88>)
 8003664:	429c      	cmp	r4, r3
 8003666:	d101      	bne.n	800366c <_putc_r+0x6c>
 8003668:	68b4      	ldr	r4, [r6, #8]
 800366a:	e7d6      	b.n	800361a <_putc_r+0x1a>
 800366c:	4b07      	ldr	r3, [pc, #28]	; (800368c <_putc_r+0x8c>)
 800366e:	429c      	cmp	r4, r3
 8003670:	bf08      	it	eq
 8003672:	68f4      	ldreq	r4, [r6, #12]
 8003674:	e7d1      	b.n	800361a <_putc_r+0x1a>
 8003676:	4629      	mov	r1, r5
 8003678:	4622      	mov	r2, r4
 800367a:	4630      	mov	r0, r6
 800367c:	f7ff f9e6 	bl	8002a4c <__swbuf_r>
 8003680:	4605      	mov	r5, r0
 8003682:	e7e3      	b.n	800364c <_putc_r+0x4c>
 8003684:	08004310 	.word	0x08004310
 8003688:	08004330 	.word	0x08004330
 800368c:	080042f0 	.word	0x080042f0

08003690 <__sread>:
 8003690:	b510      	push	{r4, lr}
 8003692:	460c      	mov	r4, r1
 8003694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003698:	f000 f894 	bl	80037c4 <_read_r>
 800369c:	2800      	cmp	r0, #0
 800369e:	bfab      	itete	ge
 80036a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80036a2:	89a3      	ldrhlt	r3, [r4, #12]
 80036a4:	181b      	addge	r3, r3, r0
 80036a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80036aa:	bfac      	ite	ge
 80036ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80036ae:	81a3      	strhlt	r3, [r4, #12]
 80036b0:	bd10      	pop	{r4, pc}

080036b2 <__swrite>:
 80036b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036b6:	461f      	mov	r7, r3
 80036b8:	898b      	ldrh	r3, [r1, #12]
 80036ba:	05db      	lsls	r3, r3, #23
 80036bc:	4605      	mov	r5, r0
 80036be:	460c      	mov	r4, r1
 80036c0:	4616      	mov	r6, r2
 80036c2:	d505      	bpl.n	80036d0 <__swrite+0x1e>
 80036c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036c8:	2302      	movs	r3, #2
 80036ca:	2200      	movs	r2, #0
 80036cc:	f000 f868 	bl	80037a0 <_lseek_r>
 80036d0:	89a3      	ldrh	r3, [r4, #12]
 80036d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036da:	81a3      	strh	r3, [r4, #12]
 80036dc:	4632      	mov	r2, r6
 80036de:	463b      	mov	r3, r7
 80036e0:	4628      	mov	r0, r5
 80036e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036e6:	f000 b817 	b.w	8003718 <_write_r>

080036ea <__sseek>:
 80036ea:	b510      	push	{r4, lr}
 80036ec:	460c      	mov	r4, r1
 80036ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036f2:	f000 f855 	bl	80037a0 <_lseek_r>
 80036f6:	1c43      	adds	r3, r0, #1
 80036f8:	89a3      	ldrh	r3, [r4, #12]
 80036fa:	bf15      	itete	ne
 80036fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80036fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003702:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003706:	81a3      	strheq	r3, [r4, #12]
 8003708:	bf18      	it	ne
 800370a:	81a3      	strhne	r3, [r4, #12]
 800370c:	bd10      	pop	{r4, pc}

0800370e <__sclose>:
 800370e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003712:	f000 b813 	b.w	800373c <_close_r>
	...

08003718 <_write_r>:
 8003718:	b538      	push	{r3, r4, r5, lr}
 800371a:	4d07      	ldr	r5, [pc, #28]	; (8003738 <_write_r+0x20>)
 800371c:	4604      	mov	r4, r0
 800371e:	4608      	mov	r0, r1
 8003720:	4611      	mov	r1, r2
 8003722:	2200      	movs	r2, #0
 8003724:	602a      	str	r2, [r5, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	f7fd f918 	bl	800095c <_write>
 800372c:	1c43      	adds	r3, r0, #1
 800372e:	d102      	bne.n	8003736 <_write_r+0x1e>
 8003730:	682b      	ldr	r3, [r5, #0]
 8003732:	b103      	cbz	r3, 8003736 <_write_r+0x1e>
 8003734:	6023      	str	r3, [r4, #0]
 8003736:	bd38      	pop	{r3, r4, r5, pc}
 8003738:	2000c1b8 	.word	0x2000c1b8

0800373c <_close_r>:
 800373c:	b538      	push	{r3, r4, r5, lr}
 800373e:	4d06      	ldr	r5, [pc, #24]	; (8003758 <_close_r+0x1c>)
 8003740:	2300      	movs	r3, #0
 8003742:	4604      	mov	r4, r0
 8003744:	4608      	mov	r0, r1
 8003746:	602b      	str	r3, [r5, #0]
 8003748:	f7fd f916 	bl	8000978 <_close>
 800374c:	1c43      	adds	r3, r0, #1
 800374e:	d102      	bne.n	8003756 <_close_r+0x1a>
 8003750:	682b      	ldr	r3, [r5, #0]
 8003752:	b103      	cbz	r3, 8003756 <_close_r+0x1a>
 8003754:	6023      	str	r3, [r4, #0]
 8003756:	bd38      	pop	{r3, r4, r5, pc}
 8003758:	2000c1b8 	.word	0x2000c1b8

0800375c <_fstat_r>:
 800375c:	b538      	push	{r3, r4, r5, lr}
 800375e:	4d07      	ldr	r5, [pc, #28]	; (800377c <_fstat_r+0x20>)
 8003760:	2300      	movs	r3, #0
 8003762:	4604      	mov	r4, r0
 8003764:	4608      	mov	r0, r1
 8003766:	4611      	mov	r1, r2
 8003768:	602b      	str	r3, [r5, #0]
 800376a:	f7fd f908 	bl	800097e <_fstat>
 800376e:	1c43      	adds	r3, r0, #1
 8003770:	d102      	bne.n	8003778 <_fstat_r+0x1c>
 8003772:	682b      	ldr	r3, [r5, #0]
 8003774:	b103      	cbz	r3, 8003778 <_fstat_r+0x1c>
 8003776:	6023      	str	r3, [r4, #0]
 8003778:	bd38      	pop	{r3, r4, r5, pc}
 800377a:	bf00      	nop
 800377c:	2000c1b8 	.word	0x2000c1b8

08003780 <_isatty_r>:
 8003780:	b538      	push	{r3, r4, r5, lr}
 8003782:	4d06      	ldr	r5, [pc, #24]	; (800379c <_isatty_r+0x1c>)
 8003784:	2300      	movs	r3, #0
 8003786:	4604      	mov	r4, r0
 8003788:	4608      	mov	r0, r1
 800378a:	602b      	str	r3, [r5, #0]
 800378c:	f7fd f8fc 	bl	8000988 <_isatty>
 8003790:	1c43      	adds	r3, r0, #1
 8003792:	d102      	bne.n	800379a <_isatty_r+0x1a>
 8003794:	682b      	ldr	r3, [r5, #0]
 8003796:	b103      	cbz	r3, 800379a <_isatty_r+0x1a>
 8003798:	6023      	str	r3, [r4, #0]
 800379a:	bd38      	pop	{r3, r4, r5, pc}
 800379c:	2000c1b8 	.word	0x2000c1b8

080037a0 <_lseek_r>:
 80037a0:	b538      	push	{r3, r4, r5, lr}
 80037a2:	4d07      	ldr	r5, [pc, #28]	; (80037c0 <_lseek_r+0x20>)
 80037a4:	4604      	mov	r4, r0
 80037a6:	4608      	mov	r0, r1
 80037a8:	4611      	mov	r1, r2
 80037aa:	2200      	movs	r2, #0
 80037ac:	602a      	str	r2, [r5, #0]
 80037ae:	461a      	mov	r2, r3
 80037b0:	f7fd f8ec 	bl	800098c <_lseek>
 80037b4:	1c43      	adds	r3, r0, #1
 80037b6:	d102      	bne.n	80037be <_lseek_r+0x1e>
 80037b8:	682b      	ldr	r3, [r5, #0]
 80037ba:	b103      	cbz	r3, 80037be <_lseek_r+0x1e>
 80037bc:	6023      	str	r3, [r4, #0]
 80037be:	bd38      	pop	{r3, r4, r5, pc}
 80037c0:	2000c1b8 	.word	0x2000c1b8

080037c4 <_read_r>:
 80037c4:	b538      	push	{r3, r4, r5, lr}
 80037c6:	4d07      	ldr	r5, [pc, #28]	; (80037e4 <_read_r+0x20>)
 80037c8:	4604      	mov	r4, r0
 80037ca:	4608      	mov	r0, r1
 80037cc:	4611      	mov	r1, r2
 80037ce:	2200      	movs	r2, #0
 80037d0:	602a      	str	r2, [r5, #0]
 80037d2:	461a      	mov	r2, r3
 80037d4:	f7fd f8b4 	bl	8000940 <_read>
 80037d8:	1c43      	adds	r3, r0, #1
 80037da:	d102      	bne.n	80037e2 <_read_r+0x1e>
 80037dc:	682b      	ldr	r3, [r5, #0]
 80037de:	b103      	cbz	r3, 80037e2 <_read_r+0x1e>
 80037e0:	6023      	str	r3, [r4, #0]
 80037e2:	bd38      	pop	{r3, r4, r5, pc}
 80037e4:	2000c1b8 	.word	0x2000c1b8

080037e8 <_init>:
 80037e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ea:	bf00      	nop
 80037ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ee:	bc08      	pop	{r3}
 80037f0:	469e      	mov	lr, r3
 80037f2:	4770      	bx	lr

080037f4 <_fini>:
 80037f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037f6:	bf00      	nop
 80037f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037fa:	bc08      	pop	{r3}
 80037fc:	469e      	mov	lr, r3
 80037fe:	4770      	bx	lr
