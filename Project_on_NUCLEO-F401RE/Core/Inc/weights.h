#include "nnom.h"

#define GROUP_CONV2D_KERNEL_0 {-69, 44, 80, 22, -25, -67, -41, 75, 4, 39, -81, -42, -81, 73, -82, 70, 63, -2, 25, 43, 2, -23, -31, 61, -38, -57, 25, -76, 76, 17, 38, 69, -78, 20, -4, 60, 22, -69, -21, 54, -64, 71, -15, -27, -26, -52, 70, 16, -55, 57, 13, -55, -62, -70, 68, -28, 66, 55, -44, 22, 21, 74, -67, 18, -72, 41, -46, -55, 6, -67, 73, -47, 37, -34, 32, -72, 33, -17, -44, 32, 27, 47, 19, -40, -12, 39, -32, -57, 78, 72, -69, 48, 26, 51, 33, -68, 29, 39, -49, 0, -31, -70, -14, 76, -77, -64, -31, -41, -9, -1, 32, 67, -44, -53, 51, 85, -10, -82, -28, -79, 42, -49, -77, 17, -59, 38, -67, -16, -17, 3, -58, 32, -73, -43, -7, -25, 12, -77, -64, 3, -57, 11, 82, 80, 17, -61, 2, -28, 71, 61, -2, -22, -46, -38, -67, -16, -1, -40, -41, -77, -76, 31, -43, 27, 58, -65, -44, 26, -41, -35, -2, 76, -80, -59, 48, 16, -23, 38, -18, 61, -60, 50, 35, 14, -83, 28, 28, 5, 74, 72, -51, 71, -3, 53, 40, 0, -32, -76, 43, 68, 65, 53, -21, -77, 45, -69, -44, -51, 76, -33, 42, 2, -79, 34, -65, -57, -61, -3, -60, -72, -14, 36, 28, 25, -25, -66, 13, 77, 2, 78, 30, -85, 41, 31, 85, -14, 30, 43, 18, 65, -66, -5, 1, -56, -18, 15, 54, -9, 78, 71, -43, 24, -70, 42, 37, 15, 65, 44, -77, 14, -41, 19, -2, -51, -69, -49, 16, 39, 85, 59, 79, -78, 43, -74, -4, 11, -19, -8, -15, -71, 70, 31, 65, 50, 23, -34, 62, -23, -39, -32, 54, 51, 56, -76, -13, -68, 68, -44, -41, 65, -22, -52, 25, 83, 59, 36, 50, -1, 44, 76, 9, -15, -38, 83, -33, -9, 14, 27, 39, 68, -77, 11, -47, -58, -9, -35, -35, 46, 66, 17, -46, 47, 48, 38, 69, -14, -3, -32, 17, 51, -52, 10, 41, -69, 71, 8, 41, -50, -64, 70, -4, -22, -82, 5, 65, 17, 53, -55, 81, 56, -79, 0, -18, 42, -42, 14, 76, -60, -7, -47, -46, 52, 84, -79, 53, 35, -18, 71, 20, 77, 72, -27, -18, 60, -53, -20, 62, 75, 2, 71, -17, -42, -41, -79, -61, 4, 84, -9, -59, -10, -82, 43, 61, 31, -29, 32, -38, 64, 45, 84, 62, 59, -52, -49, 63, -46, -72, -79, 52, 49, 9, 4, -51, -67, 10, 51, -54, -2, 56, -8, 83, -83, 51, -48, 34, 30, -79, 34, 78, 59, -30, -63, 7, -42, -25, -52, -18, -80, 28, 27, 62, 31, 51, 62, -57, -6, 42, 39, -40, 54, 69, -4, 35, 54, -30, -43, -36, -16, 68, -33, -37, -24, 55, 43, -27, 42, -26, 47, -81, 34, 67, -7, 29, -76, 82, -26, 28, 64, -62, -35, -13, 44, 0, -44, -33, 84, 61, -7, 36, -72, 74, -69, 70, 77, -23, 83, 39, 15, -2, 25, 46, 38, 0, -44, 30, 38, 21, 15, -12, -81, 27, -49, -73, -46, -11, 67, -59, 31, -32, -59, -22, 69, 57, 38, -31, -24, 1, 44, 35, 29, 23, 0, -57, -64, 21, 7, 78, 5, -25, -15, 54, -82, -36, 69, -44, -49, 18, 2, -23, -60, 60, -67, 78, 59, 38, 77, 79, 60, -12, -66, -44, 68, 35, 30, -5, 68, 73, -9, -51, 54, -22, -65, -37, -10, -80, -24, -23, -29, 32, -67, -18, 36, -82, -37, -61, 30, -12, -70, -5, 6, 24, -60, 34, -74, -13, -22, 46, -26, -42, 75, -14, 8, 36, -21, 62, -1, -65, 57, 6, -10, -17, -75, 8, 77, -36, 77, 17, -79, -26, 37, 69, -14, 8, 44, -50, -6, -23, 58, -27, 83, 49, -53, 28, 40, -77, 38, 0, 77, -43, 38, 78, -70, 58, -45, 27, -32, -19, -20, -16, 44, 33, 42, -3, -30, -65, -85, -16, -2, 34, -85, 62, 5, 68, -8, -52, -71, 62, -28, -69, 48, -56, -35, -56, 38, -13, -3, -6, 35, 84, 73, 33, -44, -64, 48, 38, 13, 61, -44, -17, -42, -64, 46, -30, 78, -54, -73, -1, 2, 37, -13, -18, 47, 37, -83, 82, -78, 50, 27, 82, 33, -56, 84, 19, -59, 79, 0, -48, 20, 1, 57, -63, -51, -28, -37, 23, 60, -5, -18, -72, 56, 35, -49, -35, 31, -34, -13, -30, 71, 5, 85, -30, -53, -21, -49, -30, -12, -21, -11, -82, -23, 17, 83, -72, -21, 12, -58, -61, 43, 51, -51, -68, -66, 12, -12, -51, 53, -35, 83, 84, 65, 57, 80, 7, -63, -16, -23, 9, 24, -56, -49, -54, -77, 5, -74, -26, 34, 58, -48, 27, 47, -59, -15, -21, 7, 70, -78, -48, 36, 4, -23, 24, -80, 47, 52, 33, 53, -53, 70, 73, -76, 79, -28, -7, 17, -50, 2, 60, -1, -74, -68, -70, -2, 85, 31, -8, 16, -76, -44, -38, 75, -69, -20, -56, 14, 6, 67, 12, 63, 55, 31, 25, -24, 59, -4, 70, 37, 26, -77, 62, -79, -13, -78, 46, -16, 75, 32, -16, 17, 63, -54, -16, -17, -49, -7, -71, -72, -83, 36, 56, 27, 19, -25, 2, -3, 27, 65, 67, 3, 62, -61, -54, 61, -19, -67, -71, 44, -72, 42, -43, -66, 12, -63, -23, -81, -4, -52, -41, 77, 71, 82, -10, 43, -25, 80, -73, 44, -35, 15, -13, 55, -80, 34, -72, -50, -10, -49, -38, -36, -80, -66, -50, -7, 74, -69, 71, -57, 8, 64, 9, 6, -42, -36, 27, 82, -22, -50, 26, -41, 55, 59, 84, 19, -73, -83, 16, 6, -31, -67, 19, -17, -62, 68, -49, -22, -28, 66, 84, -54, -39, -12, 60, 64, -80, -28, 61, -24, 60, -56, 22, 51, 22, -48, 80, 47, 62, -83, 37, 54, 67, 64, -72, 8, -63, 64, -24, 42, 45, -57, 17, 45, 1, 84, 8, -24, 29, 74, 0, 66, 42, 26, -81, 15, 68, 56, -35, 67, -47, 51, 15, -78, -23, 54, -33, -18, 16, -35, 65, 21, 63, -80, -26, -46, 53, 75, 27, 1, 24, -76, 76, 52, 11, 10, 28, -73, -14, 1, 1, -66, 24, -51, 10, 52, 25, 6, 69, 34, -26, -42, -56, 80, 69, 67, -4, 50, 2, -26, 40, 39, 32, -19, -8, -61, -79, -38, 58, 81, 65, -58, -35, 64, 27, 81, -28, 15, -85, -9, 17, -39, 5, 79, 79, -56, 3, 60, 4, 0, 42, -15, 63, -14, 53, 68, 63, -19, 1, 11, 58, -35, -82, 27, -39, 60, -42, 51, -29, -57, 79, 14, 63, 6, 56, -28, -7, -69, 76, 3, 23, 59, -64, 50, -3, 65, 30, -30, 42, -26, -75, 34, -81, -83, -23, -58, 47, -2, -28, 58, -56, 62, 1, -7, 43, -48}

#define GROUP_CONV2D_KERNEL_0_SHIFT (9)

#define GROUP_CONV2D_BIAS_0 {42, 97, 19, 6, -97, 21, 33, -95, -48, -3, 81, 44, -103, 110, 45, -64}

#define GROUP_CONV2D_BIAS_0_SHIFT (8)


/* output enconding for each layer */
#define INPUT_1_OUTPUT_SHIFT 7
#define GROUP_CONV2D_OUTPUT_SHIFT 5

/* bias shift and output shift for each layer */
#define GROUP_CONV2D_OUTPUT_RSHIFT (INPUT_1_OUTPUT_SHIFT+GROUP_CONV2D_KERNEL_0_SHIFT-GROUP_CONV2D_OUTPUT_SHIFT)
#define GROUP_CONV2D_BIAS_LSHIFT   (INPUT_1_OUTPUT_SHIFT+GROUP_CONV2D_KERNEL_0_SHIFT-GROUP_CONV2D_BIAS_0_SHIFT)
#if GROUP_CONV2D_OUTPUT_RSHIFT < 0
#error GROUP_CONV2D_OUTPUT_RSHIFT must be bigger than 0
#endif
#if GROUP_CONV2D_BIAS_LSHIFT < 0
#error GROUP_CONV2D_BIAS_LSHIFT must be bigger than 0
#endif

/* weights for each layer */
static const int8_t group_conv2d_weights[] = GROUP_CONV2D_KERNEL_0;
static const nnom_weight_t group_conv2d_w = { (const void*)group_conv2d_weights, GROUP_CONV2D_OUTPUT_RSHIFT};
static const int8_t group_conv2d_bias[] = GROUP_CONV2D_BIAS_0;
static const nnom_bias_t group_conv2d_b = { (const void*)group_conv2d_bias, GROUP_CONV2D_BIAS_LSHIFT};

/* nnom model */
static int8_t nnom_input_data[16384];
static int8_t nnom_output_data[16384];
static nnom_model_t* nnom_model_create(void)
{
	static nnom_model_t model;
	nnom_layer_t* layer[3];

	new_model(&model);

	layer[0] = Input(shape(32, 32, 16), nnom_input_data);
	layer[1] = model.hook(GroupConv2D(16, 2, kernel(3, 3), stride(1, 1), dilation(1, 1), PADDING_SAME, &group_conv2d_w, &group_conv2d_b), layer[0]);
	layer[2] = model.hook(Output(shape(32, 32, 16), nnom_output_data), layer[1]);
	model_compile(&model, layer[0], layer[2]);
	return &model;
}
