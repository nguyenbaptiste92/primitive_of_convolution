#include "nnom.h"

#define DEPTHWISE_CONV2D_DEPTHWISE_KERNEL_0 {-20, 41, 9, 3, -64, -97, -43, 62, 17, -14, 66, -102, -91, -110, -53, 83, 43, -95, -70, 5, -54, -92, -58, 69, -4, -66, 3, 14, 79, 107, -52, 15, 46, -7, 90, 72, 49, -89, -21, 86, 17, -2, 109, 50, 53, -106, -74, 97, -93, -38, -24, 0, 95, -22, -35, -88, -67, 79, 47, -39, 63, 11, 9, -42, -97, 78, 92, 80, 78, -92, -20, -75, 104, -59, -44, 10, 96, -17, 109, -102, 1, 78, -108, 71, 40, -36, -1, -11, 40, 68, 83, -46, 53, 12, -108, -46, 44, -69, 106, 0, 91, -86, 108, -109, -105, 62, 56, -19, -98, 100, 5, -51, 92, -73, 65, 23, 100, 99, -91, -87, -104, 97, 30, -74, -15, -36, -54, 31, 90, -4, -25, 66, 29, 30, 60, -84, -89, 32, -52, 2, -90, -23, -92, 89, 96, -52, 104, 52, -12, -49, 62, 20, -26, 74, 49, 40, -4, -31, 102, 68, -70, 5, -66, 35, 78, 75, 45, -100, -73, -80, 16, 37, 99, -9, -58, 29, -12, -63, -60, -92, -4, 101, -82, 98, -88, 22, -47, 11, 64, -75, -31, -90, 109, 38, 10, 29, -21, -40, 28, -92, 46, 30, -47, -30, -68, -79, 0, 72, -30, -63, 71, 54, -92, 97, -54, -83, -80, -104, -82, 89, 55, 61, -107, 55, -110, 63, 98, 4, -19, 104, -49, 86, 71, -54, -7, -91, 97, 58, 98, -30, -110, 16, -110, -4, -4, 13, 36, -53, -96, 17, -28, 91, 0, -86, 73, 40, 1, 96, 34, 100, 3, 87, 88, -50, -65, -8, 17, -110, 57, -61, -60, 82, 14, 109, -107, -29, -86, -39, -6, -60, 33, -53, 49, -50, -109, 41, 77, 40, 76, -81, -77, 50, -14, 56, 53, 61, 63, 83, 8, -41, -60, 51, 73, -104, -86, 77, -7, 4, 99, 20, -107, 53, -77, -26, -48, -19, -31, -51, -45, 36, 31, -19, 27, -109, -17, 52, 98, -94, -83, -52, -98, -75, -9, -73, 78, 14, -75, 53, 42, -53, -48, -85, -49, 80, 62, -82, 39, -1, 109, 85, 27, -34, -63, -102, 3, 75, 28, 109, 89, 75, -66, 45, 56, -20, 65, -65, -24, 64, -81, -1, -69, 93, 34, 39, 34, -7, -106, -93, -79, -36, 49, -19, 90, 91, 33, -45, 92, 56, 54, 75, -81, -12, -86, -30, 102, -27, -72, -86, -78, -30, -108, -59, 66, -54, -16, 57, 57, -16, -18, -62, -107, 94, 22, -65, 80, 69, 74, -69, -75, 14, 38, 63, -103, -28, -13, -110, -80, -104, 12, 84, 36, -90, -106, -24, -84, 73, 96, -14, 71, -6, -57, 76, 85, 15, -28, -49, -111, 28, -101, 96, 42, -87, -84, -72, -67, -108, -13, -106, 52, 19, -102, -23, -9, 87, 3, -39, 75, -28, 6, -8, -70, -31, 81, 110, -3, -48, -106, 102, 16, -4, -77, -40, -34, 88, 23, -41, 46, -95, 103, 62, 46, -30, -75, 43, 13, -6, 56, 100, 32, -53, -51, -24, -106, -30, 74, 80, -40, 30, 62, -7, 13, 53, 50, 16, 28, 31, 104, 37, -65, -35, 95, -27, -18, -109, 99, -60, -109, -88, -45, -19, 18, -54, -28, 68, 102, -87, 81, -45, 58, 63, -49, 76, 34, 78, 78, 4, 4, 82, 78, 0, 56, -93, -67, 72, -102, 86, -72, -84, 106, 4, -73, 69, 6, 8, 16, -51, -60, 110, 7, -6, 45, 99, 15, 84, 63, 93, -97, -49, -87, 81, 95, 93, 92, 66, 37, 1, 3, -50, 27, 48, 59, 81, 35, -53, -37, 5, 10, -42, 82, -28, 55, -77, -28, 79, 86, -11, 108, 25, 80, -26, 88, -94, 60, -58, 59, 26, 40, -79, -14, -31, 25, -28, 66, 56, 16, 95, 41, 7, -2, 21, 69, -108, -68, -11, -109, 71, -70, -74, 92, 89, 60, -111, -69, 52, -90, 83, 102, -84, 80, -66, 90, 54, 90, -56, 94, -40, 96, 100, -94, 32, -68, -50, -32, -24, 29, -102, -67, -38, 110, -37, -28, -68, 20, 38, -100, 62, -85, 39, 67, 28, 37, -71, -56, 40, 24, -33, 111, 92, 24, 80, 37, 39, -64, 58, -106, 82, -73, 48, -7, -97, -42, 83, 61, 34, 108, -43, -54, -6, 92, -92, 31, -89, 9, -3, 49, -81, 51, -46, 9, -61, 64, 24, -15, -52, -61, -27, 34, -47, -21, 104, 22, 61, 41, 77, 68, 104, -14, 7, -104, -35, -103, 33, 108, -91, 53, 93, -94, -41, -5, 102, -39, 110, -17, -72, 54, 10, 16, -104, 48, 65, -105, -83, -33, 20, -52, -11, -39, -8, 81, -1, -79, -85, -65, 13, 18, 104, 102, -39, 15, -108, 61, 91, -26, 65, -49, 22, 11, -55, -2, 15, 53, -60, 21, -95, -102, -92, 48, -62, -2, -25, -82, 69, -37, 20, 22, 50, 67, -96, -37, -95, -15, -76, -96, -104, -45, -26, 97, 58, -11, 49, 109, -7, -81, 23, -6, -24, 64, -29, -90, -37, -4, 9, -98, -3, -88, -87, -90, 58, 102, 66, 16, 23, 21, -48, -32, -72, -40, -41, -87, -43, -21, 85, -77, 2, -40, 77, -71, -65, 103, -6, 41, -88, -49, 96, 105, 47, -92, -9, 93, 6, 89, 5, -104, -28, -43, 59, -50, -77, 69, -45, -98, -51, 61, -30, -70, 105, 104, -46, -46, -81, -94, -110, 27, -93, -83, 104, -9, 66, 94, -89, -30, 13, -56, -26, -83, 91, 107, -38, 77, -13, 36, -31, -92, -78, -68, -81, 41, 76, -25, 2, 60, 92, -36, -25, 2, -57, -77, 29, -90, 14, 88, -53, -42, 23, -65, -45, 51, -6, 76, -73, -102, 80, -73, -71, -27, -98, -80, 7, -93, 17, 8, -25, 71, -73, 82, 22, -103, 34, -83, -64, -109, -101, 15, 34, 78, -67, -3, -52, -89, 80, 22, -50, -38, -38, -103, 66, -62, 17, -2, -57, 59, 2, -24, -42, 104, -89, 49, 108, 100, 56, 4, 19, 73, -85, 101, -21, -38, 49, -78, -11, 19, 15, 101, -5, -72, 80, 1, 1, -99, -70, 41, 107, 79, -31, 4, 38, -37, 68, 106, 34, -110, -5, -65, 90, -60, -94, 14, -38, 4, -52, 3, 53, 110, 3, -64, -107, 101, 31, -35, -105, -84, 21, 29, 62, -59, 94, -94, -4, 34, 93, -22, -23, 88, -60, -57, 33, 96, -28, 38, -107, 81, -58, 45, 64, 5, -81, 31, -78, 48, 65, -110, 6, -73, 107, 14, -15, -17, 82, -79, 32, -74, 2, -84, -13, 16, 85, 67, 29, 109, 50, 34, 33, 3, -98, -39, 61, -3, 55, 15, 62, -6, 68, 18, 63, -15, 67, 14, -64, -30, 37, -29, 8, 30, -92, 104, -86, -71, 31, 89, -104, 99, 72, -77, 37, 12, -104, -108, -103, -110, -35, 87, -52, -11, -99, -102, 15, 98, 14, 67, 59, -82, 32, 99, -33, -15, -74, 102, -60, -86, 103, 40, -97, -47, -103, -63, -47, 65, 74, 5, 47, -100, -48, -101, 99, -33, 90, 22, 40, -7, -38, 13, 73, -89, -35, 94, -54, -35, -87, 0, -37, -36, -15, -48, -1, -48, -33, -31, -21, 83, 97, -34, 83, -92, -93, 84, 21, 90, 39, -7, -54, -22, -94, -106, 104, 67, -96, 62, -106, -91, -76, 79, 10, 59, -61, -28, -22, 21, 31, -40, -30, 44, 85, 72, 70, -6, -51, -34, -7, 61, 51, 6, 102, 16, -103, 44, -60, 101, -80, -97, -37, -53, 97, 104, -87, 97, -36, 58, 101, 6, 93, 13, -78, -50, 106, -13, -107, -66, -77, 10, -100, -71, 99, -85, 91, 53, -24, -43, 32, 21, -63, -42, 91, 70, -58, 13, -51, 61, 90, 78, 106, 83, 98, 36, 86, 6, -94, -66, 15, 109, 85, -29, 5, -89, -41, -9, 34, -5, -27, 56, -38, 47, 20, -83, -28, -49, -18, -12, 75, 92, 87, 50, 66, 48, 72, 38, 30, 9, -69, -103, -18, -9, 19, 94, -68, -98, -89, 34, 3, -78, -9, -85, -104, -6, -97, -58, 43, 58, 59, 24, 26, 5, -40, 56, -4, 8, -67, 106, -9, 87, -56, 97, 90, -42, 96, 103, 29, 92, -108, -96, 5, -43, -13, 60, -78, -51, -3, -59, 9, -73, -10, -47, 25, -105, -47, -41, -95, 15, 4, 38, 16, -14, -23, 96, -109, 43, 105, -81, -35, 53, 12, -4, -34, -87, 44, 39, 87, 23, -74, -100, -47, 86, -66, -74, -71, 42, 2, 81, -10, -11, 21, -35, -90, -11, -46, 91, 77, -49, 9, 18, -34, -12, -84, 105, 5, 37, 90, -110, 92, -71, -52, 18, 74, 26, -105, 21, 69, 94, 70, -61, -100, 9, -6, -96, -10, -24, -24, 23, 4, -62, -72, -99, -84, -69, -105, 95, 59, -55, -36, -29, 78, -6, 80, -50, 36, -4, 10, -41, -92, -27, 47, -6, 35, 107, 37, -101, 9, -77, 15, -106, -57, -110, -63, 36, -19, 82, -7, 7, -89, 90, 11, -106, 63, -51, -86, 46, 85, 78, -4, 40, -63, -108, -7, 44, -40, -94, 47, -88, -76, -22, -6, -75, 100, 108, -84, 23, 52, -37, -12, 81, -13, -98, 0, 64, -51, 42, -29, -48, 30, -47, -69, -18, -13, 1, -36, 95, 86, -17, -48, 78, -28, 58, -66, 19, -19, -80, 106, -91, 82, 13, 104, -45, 62, 60, -57, 3, 91, 41, -13, -22, -46, 9, -67, -45, 13, -61, 67, 14, -15, 100, -23, 102, 11, -110, -81, -48, -61, -50, 41, -3, -91, 71, 108, -93, 48, -46, 8, 17, 109, -74, 102, -75, 97, -88, 17, -84, 85, 71, -107, 61, -82, -63, -108, 59, 23, 86, 77, 17, 7, -13, 41, 35, -33, 27, -45, -35, 97, -78, 77, 63, -84, -107, 18, -87, -91, 20, 99, -81, 104, -47, -37, 36, 56, 1, 43, 18, 57, -7, -83, -34, -70, 13, 3, 71, 20, 83, 107, 28, 43, -68, 12, -19, 38, 58, 63, -100, 108, 65, -69, 84, -22, -70, 72, -22, 67, -25, -90, 47, 34, 35, -109, -45, -77, -44, -2, -43, -16, 70, 3, -83, 63, 101, -65, -77, -85, 38, -33, -101, -104, -95, 8, -66, 52, 80, -65, 27, -65, 53, -13, -8, 53, 110, 14, -11, 18, -68, -65, -73, -5, 66, 51, 9, 62, -32, 72, 54, 32, 68, 65, -16, 10, 71, 47, -108, 25, -29, -39, -34, 29, 49, -58, -33, -104, -44, 84, 46, -93, 85, -51, -81, 54, -77, -11, 16, 2, -87, -78, 68, 36, -4, 76, 11, -87, 87, 72, 44, -12, 29, -8, 48, -71, 0, -32, -19, -108, -26, -75, 41, -92, 100, 8, -71, -67, -109, -43, 91, 27, 15, -2, -92, 49, -11, 27, -79, 105, 74, -83, 103, -70, -94, -63, -15, -4, 26, -56, -102, 65, -74, 109, -59, 84, -66, -17, 80, 108, -106, -18, 55, -89, 55, -27, 48, -4, 54, 73, -97, 83, -101, 52, 58, -37, 22, 49, 1, -27, -41, -4, 82, -63, -88, -62, -72, 41, -49, 3, 69, -42, 64, 6, -51, -102, -74, -36, 93, -17, -40, -63, -63, 69, -26, 33, -72, 19, 72, 86, -96, -17, 1, -44, 92, -64, -53, 79, 55, 33, 61, -18, -52, 101, 29, 106, 88, -108, -88, -17, 20, -43, 10, 88, -100, -61, -53, 43, 13, 14, -109, -56, 28, 32, -39, -96, -68, -41, 81, 39, -44, 40, 33, -74, 67, 75, -108, 24, 41, 72, -45, 59, -61, -41, 71, -8, -85, 108, -93, 40, -29, 21, 4, 60, 70, 16, -71, 83, -44, -108, -43, -43, -27, 34, -91, 65, 58, -106, -5, 31, -5, -38}

#define DEPTHWISE_CONV2D_DEPTHWISE_KERNEL_0_SHIFT (11)

#define DEPTHWISE_CONV2D_BIAS_0 {91, -85, -67, 51, -33, 61, 109, 36, 41, -12, 14, 108, 78, 108, -8, -105}

#define DEPTHWISE_CONV2D_BIAS_0_SHIFT (8)

#define CONV2D_KERNEL_0 {-101, 100, -1, 17, 80, -71, -94, -30, 84, -88, -24, -98, -5, -33, -84, -28, 54, 60, -23, -65, -100, -31, 38, 33, 66, -47, 59, -57, 57, -63, -19, 57, 22, -29, -43, -19, -37, -54, 88, 24, 70, -40, 84, -18, 19, -24, -27, 39, -58, 63, -46, -108, 42, 51, 24, -78, 66, 83, -66, 101, -88, -22, 87, -74, 105, -55, 89, -6, -97, 66, 49, -95, 0, 104, -57, 19, -79, 91, 110, 47, 21, -81, -92, 51, 76, 11, 97, 73, -61, 93, -23, -41, -74, -79, -83, 94, 37, 54, 37, 15, -22, -30, 37, 101, -23, -76, 93, -37, -85, 35, 83, -34, 21, 47, 109, -107, -78, 103, -15, 58, 21, -11, 73, 64, 62, -5, 26, -110, -39, 80, -32, -4, 56, -110, -40, -93, -28, 44, 58, -3, -23, 76, -44, 71, -43, -88, -33, 50, 85, -27, -28, 71, -104, 86, 53, 79, 32, 52, -34, -34, 38, -84, -99, -48, 54, 52, -33, -46, -50, 14, 93, 0, -89, -64, 86, 79, 21, -27, -105, 92, -25, 109, -17, -79, 7, 72, -89, -24, -55, 0, 49, 105, -64, -83, -18, -63, 93, 71, 18, 71, 54, 107, 63, -105, 15, 85, 108, -56, 53, 9, 46, -11, -53, -93, -61, 7, 48, -26, 109, 29, 71, -32, -109, 85, 69, 42, 38, -39, 57, 13, 76, -68, -9, -104, 75, 62, -82, -51, 58, 74, -49, 35, 39, -59, -76, 108, 56, 69, 53, 104, 84, 97, -8, 51, -100, -51}

#define CONV2D_KERNEL_0_SHIFT (8)

#define CONV2D_BIAS_0 {-109, 66, 47, 7, 43, 98, -53, 48, 66, -87, 98, 18, -94, -83, 25, 31}

#define CONV2D_BIAS_0_SHIFT (8)


/* output enconding for each layer */
#define INPUT_1_OUTPUT_SHIFT 7
#define DEPTHWISE_CONV2D_OUTPUT_SHIFT 7
#define CONV2D_OUTPUT_SHIFT 6

/* bias shift and output shift for each layer */
#define DEPTHWISE_CONV2D_OUTPUT_RSHIFT (INPUT_1_OUTPUT_SHIFT+DEPTHWISE_CONV2D_DEPTHWISE_KERNEL_0_SHIFT-DEPTHWISE_CONV2D_OUTPUT_SHIFT)
#define DEPTHWISE_CONV2D_BIAS_LSHIFT   (INPUT_1_OUTPUT_SHIFT+DEPTHWISE_CONV2D_DEPTHWISE_KERNEL_0_SHIFT-DEPTHWISE_CONV2D_BIAS_0_SHIFT)
#if DEPTHWISE_CONV2D_OUTPUT_RSHIFT < 0
#error DEPTHWISE_CONV2D_OUTPUT_RSHIFT must be bigger than 0
#endif
#if DEPTHWISE_CONV2D_BIAS_LSHIFT < 0
#error DEPTHWISE_CONV2D_BIAS_LSHIFT must be bigger than 0
#endif
#define CONV2D_OUTPUT_RSHIFT (DEPTHWISE_CONV2D_OUTPUT_SHIFT+CONV2D_KERNEL_0_SHIFT-CONV2D_OUTPUT_SHIFT)
#define CONV2D_BIAS_LSHIFT   (DEPTHWISE_CONV2D_OUTPUT_SHIFT+CONV2D_KERNEL_0_SHIFT-CONV2D_BIAS_0_SHIFT)
#if CONV2D_OUTPUT_RSHIFT < 0
#error CONV2D_OUTPUT_RSHIFT must be bigger than 0
#endif
#if CONV2D_BIAS_LSHIFT < 0
#error CONV2D_BIAS_LSHIFT must be bigger than 0
#endif

/* weights for each layer */
static const int8_t depthwise_conv2d_weights[] = DEPTHWISE_CONV2D_DEPTHWISE_KERNEL_0;
static const nnom_weight_t depthwise_conv2d_w = { (const void*)depthwise_conv2d_weights, DEPTHWISE_CONV2D_OUTPUT_RSHIFT};
static const int8_t depthwise_conv2d_bias[] = DEPTHWISE_CONV2D_BIAS_0;
static const nnom_bias_t depthwise_conv2d_b = { (const void*)depthwise_conv2d_bias, DEPTHWISE_CONV2D_BIAS_LSHIFT};
static const int8_t conv2d_weights[] = CONV2D_KERNEL_0;
static const nnom_weight_t conv2d_w = { (const void*)conv2d_weights, CONV2D_OUTPUT_RSHIFT};
static const int8_t conv2d_bias[] = CONV2D_BIAS_0;
static const nnom_bias_t conv2d_b = { (const void*)conv2d_bias, CONV2D_BIAS_LSHIFT};

/* nnom model */
static int8_t nnom_input_data[16384];
static int8_t nnom_output_data[16384];
static nnom_model_t* nnom_model_create(void)
{
	static nnom_model_t model;
	nnom_layer_t* layer[4];

	new_model(&model);

	layer[0] = Input(shape(32, 32, 16), nnom_input_data);
	layer[1] = model.hook(DW_Conv2D(1, kernel(11, 11), stride(1, 1), dilation(1, 1), PADDING_SAME, &depthwise_conv2d_w, &depthwise_conv2d_b), layer[0]);
	layer[2] = model.hook(Conv2D(16, kernel(1, 1), stride(1, 1), dilation(1, 1), PADDING_SAME, &conv2d_w, &conv2d_b), layer[1]);
	layer[3] = model.hook(Output(shape(32, 32, 16), nnom_output_data), layer[2]);
	model_compile(&model, layer[0], layer[3]);
	return &model;
}
