#include "nnom.h"

#define CONV2D_KERNEL_0 {-72, 41, 19, 4, -77, -10, -43, 31, 80, -24, -55, -44, -78, -59, 48, -32, -48, -42, -31, 14, -36, -84, -73, 16, -25, 46, -40, -9, 46, 35, -36, 43, 48, 29, 26, 3, 64, 82, -10, 83, 68, 6, -81, 5, -46, 19, -36, 69, -39, -32, 53, 20, 74, 36, -3, -23, -71, -64, -54, -76, 76, -5, 29, -69, -12, -59, -48, -77, 0, -55, 16, 47, -62, -8, -23, -44, -39, -36, -12, 8, 49, -85, 45, -9, -37, -58, -29, -44, 9, -67, 16, -25, 57, 71, 71, 34, 52, -52, 25, 82, -52, 26, -10, -14, 6, -36, -39, -60, -58, 46, -74, -81, 61, -3, 2, 29, 35, -57, 60, -30, 59, -22, -58, -30, 54, 56, -69, -51, 19, 40, -84, 64, -52, -73, 43, 35, 46, 12, 38, -59, -12, -44, 6, -56, 83, -77, -44, 23, -12, -57, -58, -31, -8, 54, -48, -49, 8, -33, -53, -61, -52, 7, -27, -82, -22, 84, 57, 0, 60, -50, -35, -62, -16, -19, -66, -24, 49, 73, 34, 57, -47, 53, -22, -45, -57, -78, -53, 7, 19, -65, 35, -57, -67, -58, -61, -37, -66, -55, -34, 68, 38, -50, -55, 5, -21, 36, 43, 42, 73, -33, 62, 60, -81, -11, 75, 75, -43, -2, -64, -37, -29, -20, -9, -16, 85, -19, 64, -28, 16, 54, -10, 62, -10, 42, 59, 10, 25, -27, 35, -7, 37, -15, -24, -7, 68, -49, -14, 48, -39, -57, -19, -34, -31, 10, -69, 54, 10, 11, -20, 17, -37, -74, 16, -21, -49, -71, 25, -17, -62, 66, 59, 12, -10, -8, -69, 11, 72, 70, 76, 75, 17, 82, -55, -82, 64, -51, -6, 12, 73, 81, 29, -67, -39, -6, -23, 41, 19, 62, -43, 26, 45, 78, 64, -55, -55, 9, 39, 60, -17, 37, -10, -42, 2, -49, 25, -66, -49, 30, 72, -56, 17, -65, 4, 73, -34, -7, -10, 22, -61, 6, -21, 73, -21, -14, -68, -61, 6, -76, 75, -67, 66, -14, -52, -32, 23, -33, 24, -40, 33, -17, -42, 67, -80, 61, -46, 48, -24, 50, 77, 27, 54, -18, 56, 31, -37, -39, -37, 0, 43, 46, -48, 72, 36, -45, 10, -26, -43, 20, 42, 49, 1, 29, 54, -63, -71, -29, -36, -54, -38, 31, -64, -64, 59, -7, -45, -67, -62, -25, -29, -60, -49, 81, 31, -17, 47, -23, -33, 44, -10, -79, -77, 42, 40, 41, -8, -50, -85, -32, -80, -64, 51, 7, -85, -79, 50, 54, 24, 37, 21, -71, 63, -58, -40, -67, 58, -77, -16, 81, -82, -85, 39, 51, -62, -34, 9, -50, -50, 64, 41, 18, -5, 71, -25, 41, 21, -3, -47, -50, 0, -30, -42, 62, 7, -16, 8, 40, -35, 59, -21, 5, 64, -14, -33, 44, 18, -79, 64, 4, -82, -60, 33, -21, 70, -85, 55, 62, 51, 79, -80, 0, -41, 1, 16, -75, 25, 75, 52, -1, 57, -31, -40, -83, 18, -12, -26, 42, -30, -38, -73, 73, -51, 79, -21, -76, 65, 52, 39, 30, -69, -33, 12, -15, -26, 52, -77, -63, -56, -14, 82, 36, 85, 38, -7, 52, -63, 6, -10, -21, 5, -73, 18, -52, 72, 40, -28, -45, -85, 17, 25, 41, 21, -50, -28, -60, -20, -33, 44, -56, -7, 25, -77, 37, 22, -65, 21, -40, -40, 79, -28, 47, 46, 34, -16, -21, -83, 29, -20, -59, 72, -66, -47, 41, 27, 42, 7, 14, 16, -2, -54, -40, -17, 75, -53, 75, 65, -48, 21, 80, 33, -12, 8, -46, 7, 28, 27, -3, 58, -62, 39, -64, 85, 54, 16, -66, -19, 36, -12, -13, 42, -65, -42, -5, 27, 16, -12, -28, 34, -85, -15, 46, 14, 38, 77, 31, 42, 47, 20, -24, 33, -12, -68, -32, -64, 62, 75, -71, 63, 5, -72, -1, 83, 3, 42, -61, 27, 3, -75, 0, 51, -12, 44, 2, -10, -80, -24, 8, -27, -54, -71, 7, 1, -19, 36, 84, 0, 44, 34, -42, 59, -50, 73, 67, 43, 84, 58, 30, -55, -56, 19, -29, 75, -40, 29, -32, 36, -78, 51, 30, 72, 2, -26, -63, -3, 33, -45, -5, -84, 50, -26, 15, 28, -56, -39, 49, -16, -80, -20, -9, -15, -36, -71, -75, 17, -44, 79, -70, -33, -66, -3, 81, -28, 4, 31, -18, -27, 2, 78, 31, -66, -56, -14, -25, -73, 9, 51, 14, 18, 69, 79, -69, 40, -28, -28, -53, -46, 63, -75, 19, 3, 66, -74, -80, 56, 31, -62, -64, 42, -10, 27, -49, 74, 12, 57, -6, -33, -26, 3, -46, -34, -27, -25, -69, 68, 15, -43, 63, -75, 52, 20, 40, 55, 23, 60, 39, -64, -53, 16, -51, -23, -61, 33, 48, -71, 23, 41, 79, -25, -34, 71, -84, 63, -9, -70, 18, 30, 41, -34, -56, -79, 21, 40, -75, -47, -29, 40, -33, -52, 55, 77, 75, -12, 14, -74, 80, -27, -9, 31, -70, -21, 52, 47, -58, -63, 10, -23, 77, -7, -21, 17, -17, 65, -57, -85, -68, 59, -13, -4, 13, 45, -85, -50, -16, 5, 62, -83, -8, -27, 23, -29, 11, 74, 26, -15, -56, 66, -83, -40, -63, 22, 13, 40, 12, -85, -66, -6, 75, 28, 3, -27, 18, -4, -59, -11, 41, 65, 16, -53, -12, -4, -39, 2, -26, -14, -54, -41, 77, 6, -60, 21, -19, 0, 57, 2, 26, -10, 70, -70, -10, -16, 23, 54, -65, -83, 33, 7, -31, 41, -28, 8, 15, 75, -16, -66, -53, 70, 1, 55, 21, -49, 48, -34, 13, -85, -9, -22, 8, -8, 84, -58, -16, 23, 44, -76, -28, 31, -65, 25, -30, 74, -22, 55, 12, 50, 37, 42, 74, -34, 21, 16, -14, 75, -36, -68, -55, 27, -77, -16, -15, 45, -51, 21, 45, -60, -9, 58, -11, 73, -48, 23, -23, -23, 27, -6, -19, -31, 84, -54, 41, 73, -80, -58, 80, 1, 77, 70, 38, -38, -53, -48, 72, -38, -42, -78, 53, -44, -29, 5, -23, 49, -22, -10, 81, -75, -36, 81, -34, 68, -28, 19, -4, -68, -17, -43, 6, 67, -63, -25, 25, 57, 58, -4, 79, -34, -39, -78, 85, -45, 44, 53, 54, -14, -59, -66, -50, -14, 21, 52, -59, 80, 23, 0, 40, 4, -18, 34, 44, 61, 73, -19, -77, 54, 78, 11, -5, 48, 51, 21, 41, -63, -34, 41, 68, -6, 43, -63, -43, -67, -38, -42, 17, 71, -56, -67, -62, -22, -82, 46, -69, 33, 68, -2, -12, 63, 39, 5, -19, 81, 38, -28, -57, 13, -80, 60, 0, 53, -67, -3, 73, -56, 14, -1, -58, -73, 36, 29, -29, -31, -62, 65, -13, -69, 63, 60, 74, -67, 30, 79, 23, 6, 38, -75, 13, 32, -5, -46, 44, -58, -71, -75, 77, -51, -2}

#define CONV2D_KERNEL_0_SHIFT (9)

#define CONV2D_BIAS_0 {91, 40, 40, -37, 114, -95, 60, -46}

#define CONV2D_BIAS_0_SHIFT (8)


/* output enconding for each layer */
#define INPUT_1_OUTPUT_SHIFT 7
#define CONV2D_OUTPUT_SHIFT 5

/* bias shift and output shift for each layer */
#define CONV2D_OUTPUT_RSHIFT (INPUT_1_OUTPUT_SHIFT+CONV2D_KERNEL_0_SHIFT-CONV2D_OUTPUT_SHIFT)
#define CONV2D_BIAS_LSHIFT   (INPUT_1_OUTPUT_SHIFT+CONV2D_KERNEL_0_SHIFT-CONV2D_BIAS_0_SHIFT)
#if CONV2D_OUTPUT_RSHIFT < 0
#error CONV2D_OUTPUT_RSHIFT must be bigger than 0
#endif
#if CONV2D_BIAS_LSHIFT < 0
#error CONV2D_BIAS_LSHIFT must be bigger than 0
#endif

/* weights for each layer */
static const int8_t conv2d_weights[] = CONV2D_KERNEL_0;
static const nnom_weight_t conv2d_w = { (const void*)conv2d_weights, CONV2D_OUTPUT_RSHIFT};
static const int8_t conv2d_bias[] = CONV2D_BIAS_0;
static const nnom_bias_t conv2d_b = { (const void*)conv2d_bias, CONV2D_BIAS_LSHIFT};

/* nnom model */
static int8_t nnom_input_data[16384];
static int8_t nnom_output_data[8192];
static nnom_model_t* nnom_model_create(void)
{
	static nnom_model_t model;
	nnom_layer_t* layer[3];

	new_model(&model);

	layer[0] = Input(shape(32, 32, 16), nnom_input_data);
	layer[1] = model.hook(Conv2D(8, kernel(3, 3), stride(1, 1), dilation(1, 1), PADDING_SAME, &conv2d_w, &conv2d_b), layer[0]);
	layer[2] = model.hook(Output(shape(32, 32, 8), nnom_output_data), layer[1]);
	model_compile(&model, layer[0], layer[2]);
	return &model;
}
